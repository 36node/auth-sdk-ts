// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';

import type {
  CleanupAllDataError,
  CleanupAllDataResponse,
  CreateCaptchaData,
  CreateCaptchaError,
  CreateCaptchaResponse,
  CreateEmailRecordData,
  CreateEmailRecordError,
  CreateEmailRecordResponse,
  CreateGroupData,
  CreateGroupError,
  CreateGroupResponse,
  CreateNamespaceData,
  CreateNamespaceError,
  CreateNamespaceResponse,
  CreateRoleData,
  CreateRoleError,
  CreateRoleResponse,
  CreateSessionData,
  CreateSessionError,
  CreateSessionResponse,
  CreateSmsRecordData,
  CreateSmsRecordError,
  CreateSmsRecordResponse,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
  DeleteCaptchaData,
  DeleteCaptchaError,
  DeleteCaptchaResponse,
  DeleteEmailRecordData,
  DeleteEmailRecordError,
  DeleteEmailRecordResponse,
  DeleteGroupData,
  DeleteGroupError,
  DeleteGroupResponse,
  DeleteNamespaceData,
  DeleteNamespaceError,
  DeleteNamespaceResponse,
  DeleteRoleData,
  DeleteRoleError,
  DeleteRoleResponse,
  DeleteSessionData,
  DeleteSessionError,
  DeleteSessionResponse,
  DeleteSmsRecordData,
  DeleteSmsRecordError,
  DeleteSmsRecordResponse,
  DeleteUserData,
  DeleteUserError,
  DeleteUserResponse,
  GetCaptchaData,
  GetCaptchaError,
  GetCaptchaResponse,
  GetEmailRecordData,
  GetEmailRecordError,
  GetEmailRecordResponse,
  GetGroupData,
  GetGroupError,
  GetGroupResponse,
  GetNamespaceData,
  GetNamespaceError,
  GetNamespaceResponse,
  GetRoleData,
  GetRoleError,
  GetRoleResponse,
  GetSessionData,
  GetSessionError,
  GetSessionResponse,
  GetSmsRecordData,
  GetSmsRecordError,
  GetSmsRecordResponse,
  GetUserData,
  GetUserError,
  GetUserResponse,
  HelloError,
  HelloResponse,
  ListCaptchasData,
  ListCaptchasError,
  ListCaptchasResponse,
  ListEmailRecordsData,
  ListEmailRecordsError,
  ListEmailRecordsResponse,
  ListGroupsData,
  ListGroupsError,
  ListGroupsResponse,
  ListIndustriesError,
  ListIndustriesResponse,
  ListNamespacesData,
  ListNamespacesError,
  ListNamespacesResponse,
  ListRegionsError,
  ListRegionsResponse,
  ListRolesData,
  ListRolesError,
  ListRolesResponse,
  ListSessionsData,
  ListSessionsError,
  ListSessionsResponse,
  ListSmsRecordsData,
  ListSmsRecordsError,
  ListSmsRecordsResponse,
  ListUsersData,
  ListUsersError,
  ListUsersResponse,
  LoginByEmailData,
  LoginByEmailError,
  LoginByEmailResponse,
  LoginByPhoneData,
  LoginByPhoneError,
  LoginByPhoneResponse,
  LoginData,
  LoginError,
  LoginResponse,
  RefreshData,
  RefreshError,
  RefreshResponse,
  RegisterByEmailData,
  RegisterByEmailError,
  RegisterByEmailResponse,
  RegisterByPhoneData,
  RegisterByPhoneError,
  RegisterByPhoneResponse,
  RegisterData,
  RegisterError,
  RegisterResponse,
  ResetPasswordData,
  ResetPasswordError,
  ResetPasswordResponse,
  SendEmailData,
  SendEmailError,
  SendEmailResponse,
  SendSmsData,
  SendSmsError,
  SendSmsResponse,
  SignTokenData,
  SignTokenError,
  SignTokenResponse,
  UpdateCaptchaData,
  UpdateCaptchaError,
  UpdateCaptchaResponse,
  UpdateEmailRecordData,
  UpdateEmailRecordError,
  UpdateEmailRecordResponse,
  UpdateGroupData,
  UpdateGroupError,
  UpdateGroupResponse,
  UpdateNamespaceData,
  UpdateNamespaceError,
  UpdateNamespaceResponse,
  UpdatePasswordData,
  UpdatePasswordError,
  UpdatePasswordResponse,
  UpdateRoleData,
  UpdateRoleError,
  UpdateRoleResponse,
  UpdateSessionData,
  UpdateSessionError,
  UpdateSessionResponse,
  UpdateSmsRecordData,
  UpdateSmsRecordError,
  UpdateSmsRecordResponse,
  UpdateUserData,
  UpdateUserError,
  UpdateUserResponse,
  UpsertUserByEmployeeIdData,
  UpsertUserByEmployeeIdError,
  UpsertUserByEmployeeIdResponse,
  VerifyIdentityData,
  VerifyIdentityError,
  VerifyIdentityResponse,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * health check
 */
export const hello = <ThrowOnError extends boolean = true>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<HelloResponse, HelloError, ThrowOnError>({
    ...options,
    url: '/hello',
  });
};

/**
 * login with username/phone/email and password
 */
export const login = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<LoginData, ThrowOnError>
) => {
  return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
    ...options,
    url: '/auth/@login',
  });
};

/**
 * login with email and code
 */
export const loginByEmail = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<LoginByEmailData, ThrowOnError>
) => {
  return (options?.client ?? client).post<LoginByEmailResponse, LoginByEmailError, ThrowOnError>({
    ...options,
    url: '/auth/@loginByEmail',
  });
};

/**
 * login with phone and code
 */
export const loginByPhone = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<LoginByPhoneData, ThrowOnError>
) => {
  return (options?.client ?? client).post<LoginByPhoneResponse, LoginByPhoneError, ThrowOnError>({
    ...options,
    url: '/auth/@loginByPhone',
  });
};

/**
 * register with username and password
 */
export const register = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<RegisterData, ThrowOnError>
) => {
  return (options?.client ?? client).post<RegisterResponse, RegisterError, ThrowOnError>({
    ...options,
    url: '/auth/@register',
  });
};

/**
 * register with phone and code
 */
export const registerByPhone = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<RegisterByPhoneData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RegisterByPhoneResponse,
    RegisterByPhoneError,
    ThrowOnError
  >({
    ...options,
    url: '/auth/@registerByPhone',
  });
};

/**
 * register with email and code
 */
export const registerByEmail = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<RegisterByEmailData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RegisterByEmailResponse,
    RegisterByEmailError,
    ThrowOnError
  >({
    ...options,
    url: '/auth/@registerByEmail',
  });
};

/**
 * sign token
 */
export const signToken = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<SignTokenData, ThrowOnError>
) => {
  return (options?.client ?? client).post<SignTokenResponse, SignTokenError, ThrowOnError>({
    ...options,
    url: '/auth/@signToken',
  });
};

/**
 * refresh
 */
export const refresh = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<RefreshData, ThrowOnError>
) => {
  return (options?.client ?? client).post<RefreshResponse, RefreshError, ThrowOnError>({
    ...options,
    url: '/auth/@refresh',
  });
};

/**
 * clearnup all data
 */
export const cleanupAllData = <ThrowOnError extends boolean = true>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    CleanupAllDataResponse,
    CleanupAllDataError,
    ThrowOnError
  >({
    ...options,
    url: '/auth/@cleanup',
  });
};

/**
 * Create user
 */
export const createUser = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<CreateUserData, ThrowOnError>
) => {
  return (options?.client ?? client).post<CreateUserResponse, CreateUserError, ThrowOnError>({
    ...options,
    url: '/users',
  });
};

/**
 * List users
 */
export const listUsers = <ThrowOnError extends boolean = true>(
  options?: OptionsLegacyParser<ListUsersData, ThrowOnError>
) => {
  return (options?.client ?? client).get<ListUsersResponse, ListUsersError, ThrowOnError>({
    ...options,
    url: '/users',
  });
};

/**
 * Find user
 */
export const getUser = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<GetUserData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
    ...options,
    url: '/users/{userId}',
  });
};

/**
 * Update user
 */
export const updateUser = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<UpdateUserData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<UpdateUserResponse, UpdateUserError, ThrowOnError>({
    ...options,
    url: '/users/{userId}',
  });
};

/**
 * Delete user
 */
export const deleteUser = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<DeleteUserData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
    ...options,
    url: '/users/{userId}',
  });
};

/**
 * Upsert user by employeeId
 */
export const upsertUserByEmployeeId = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<UpsertUserByEmployeeIdData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    UpsertUserByEmployeeIdResponse,
    UpsertUserByEmployeeIdError,
    ThrowOnError
  >({
    ...options,
    url: '/users/employee/{userEmployeeId}',
  });
};

/**
 * Verify identity
 */
export const verifyIdentity = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<VerifyIdentityData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    VerifyIdentityResponse,
    VerifyIdentityError,
    ThrowOnError
  >({
    ...options,
    url: '/users/{userId}/@verifyIdentity',
  });
};

/**
 * Reset password
 */
export const resetPassword = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<ResetPasswordData, ThrowOnError>
) => {
  return (options?.client ?? client).post<ResetPasswordResponse, ResetPasswordError, ThrowOnError>({
    ...options,
    url: '/users/{userId}/@resetPassword',
  });
};

/**
 * Update password
 */
export const updatePassword = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<UpdatePasswordData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UpdatePasswordResponse,
    UpdatePasswordError,
    ThrowOnError
  >({
    ...options,
    url: '/users/{userId}/@updatePassword',
  });
};

/**
 * Create namespace
 */
export const createNamespace = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<CreateNamespaceData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateNamespaceResponse,
    CreateNamespaceError,
    ThrowOnError
  >({
    ...options,
    url: '/namespaces',
  });
};

/**
 * List namespaces
 */
export const listNamespaces = <ThrowOnError extends boolean = true>(
  options?: OptionsLegacyParser<ListNamespacesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<ListNamespacesResponse, ListNamespacesError, ThrowOnError>(
    {
      ...options,
      url: '/namespaces',
    }
  );
};

/**
 * Find namespace by id or key
 */
export const getNamespace = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<GetNamespaceData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetNamespaceResponse, GetNamespaceError, ThrowOnError>({
    ...options,
    url: '/namespaces/{namespaceIdOrKey}',
  });
};

/**
 * Update namespace
 */
export const updateNamespace = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<UpdateNamespaceData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    UpdateNamespaceResponse,
    UpdateNamespaceError,
    ThrowOnError
  >({
    ...options,
    url: '/namespaces/{namespaceIdOrKey}',
  });
};

/**
 * Delete namespace
 */
export const deleteNamespace = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<DeleteNamespaceData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteNamespaceResponse,
    DeleteNamespaceError,
    ThrowOnError
  >({
    ...options,
    url: '/namespaces/{namespaceId}',
  });
};

/**
 * Create session
 */
export const createSession = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<CreateSessionData, ThrowOnError>
) => {
  return (options?.client ?? client).post<CreateSessionResponse, CreateSessionError, ThrowOnError>({
    ...options,
    url: '/sessions',
  });
};

/**
 * List sessions
 */
export const listSessions = <ThrowOnError extends boolean = true>(
  options?: OptionsLegacyParser<ListSessionsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<ListSessionsResponse, ListSessionsError, ThrowOnError>({
    ...options,
    url: '/sessions',
  });
};

/**
 * Find session by id
 */
export const getSession = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<GetSessionData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetSessionResponse, GetSessionError, ThrowOnError>({
    ...options,
    url: '/sessions/{sessionId}',
  });
};

/**
 * Update session
 */
export const updateSession = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<UpdateSessionData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<UpdateSessionResponse, UpdateSessionError, ThrowOnError>(
    {
      ...options,
      url: '/sessions/{sessionId}',
    }
  );
};

/**
 * Delete session
 */
export const deleteSession = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<DeleteSessionData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteSessionResponse,
    DeleteSessionError,
    ThrowOnError
  >({
    ...options,
    url: '/sessions/{sessionId}',
  });
};

/**
 * Create group
 */
export const createGroup = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<CreateGroupData, ThrowOnError>
) => {
  return (options?.client ?? client).post<CreateGroupResponse, CreateGroupError, ThrowOnError>({
    ...options,
    url: '/groups',
  });
};

/**
 * List groups
 */
export const listGroups = <ThrowOnError extends boolean = true>(
  options?: OptionsLegacyParser<ListGroupsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<ListGroupsResponse, ListGroupsError, ThrowOnError>({
    ...options,
    url: '/groups',
  });
};

/**
 * Find group by id or name
 */
export const getGroup = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<GetGroupData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetGroupResponse, GetGroupError, ThrowOnError>({
    ...options,
    url: '/groups/{groupIdOrName}',
  });
};

/**
 * Update group
 */
export const updateGroup = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<UpdateGroupData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<UpdateGroupResponse, UpdateGroupError, ThrowOnError>({
    ...options,
    url: '/groups/{groupId}',
  });
};

/**
 * Delete group
 */
export const deleteGroup = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<DeleteGroupData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<DeleteGroupResponse, DeleteGroupError, ThrowOnError>({
    ...options,
    url: '/groups/{groupId}',
  });
};

/**
 * Create captcha
 */
export const createCaptcha = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<CreateCaptchaData, ThrowOnError>
) => {
  return (options?.client ?? client).post<CreateCaptchaResponse, CreateCaptchaError, ThrowOnError>({
    ...options,
    url: '/captchas',
  });
};

/**
 * List captchas
 */
export const listCaptchas = <ThrowOnError extends boolean = true>(
  options?: OptionsLegacyParser<ListCaptchasData, ThrowOnError>
) => {
  return (options?.client ?? client).get<ListCaptchasResponse, ListCaptchasError, ThrowOnError>({
    ...options,
    url: '/captchas',
  });
};

/**
 * Find captcha by id
 */
export const getCaptcha = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<GetCaptchaData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetCaptchaResponse, GetCaptchaError, ThrowOnError>({
    ...options,
    url: '/captchas/{captchaId}',
  });
};

/**
 * Update captcha
 */
export const updateCaptcha = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<UpdateCaptchaData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<UpdateCaptchaResponse, UpdateCaptchaError, ThrowOnError>(
    {
      ...options,
      url: '/captchas/{captchaId}',
    }
  );
};

/**
 * Delete captcha
 */
export const deleteCaptcha = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<DeleteCaptchaData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteCaptchaResponse,
    DeleteCaptchaError,
    ThrowOnError
  >({
    ...options,
    url: '/captchas/{captchaId}',
  });
};

/**
 * Send plain text email
 */
export const sendEmail = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<SendEmailData, ThrowOnError>
) => {
  return (options?.client ?? client).post<SendEmailResponse, SendEmailError, ThrowOnError>({
    ...options,
    url: '/email/@sendEmail',
  });
};

/**
 * Create email record
 */
export const createEmailRecord = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<CreateEmailRecordData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateEmailRecordResponse,
    CreateEmailRecordError,
    ThrowOnError
  >({
    ...options,
    url: '/email/records',
  });
};

/**
 * List email records
 */
export const listEmailRecords = <ThrowOnError extends boolean = true>(
  options?: OptionsLegacyParser<ListEmailRecordsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListEmailRecordsResponse,
    ListEmailRecordsError,
    ThrowOnError
  >({
    ...options,
    url: '/email/records',
  });
};

/**
 * Find email record by id
 */
export const getEmailRecord = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<GetEmailRecordData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetEmailRecordResponse, GetEmailRecordError, ThrowOnError>(
    {
      ...options,
      url: '/email/records/{emailRecordId}',
    }
  );
};

/**
 * Update email record
 */
export const updateEmailRecord = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<UpdateEmailRecordData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    UpdateEmailRecordResponse,
    UpdateEmailRecordError,
    ThrowOnError
  >({
    ...options,
    url: '/email/records/{emailRecordId}',
  });
};

/**
 * Delete email record
 */
export const deleteEmailRecord = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<DeleteEmailRecordData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteEmailRecordResponse,
    DeleteEmailRecordError,
    ThrowOnError
  >({
    ...options,
    url: '/email/records/{emailRecordId}',
  });
};

/**
 * Send sms
 */
export const sendSms = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<SendSmsData, ThrowOnError>
) => {
  return (options?.client ?? client).post<SendSmsResponse, SendSmsError, ThrowOnError>({
    ...options,
    url: '/sms/@sendSms',
  });
};

/**
 * Create sms record
 */
export const createSmsRecord = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<CreateSmsRecordData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateSmsRecordResponse,
    CreateSmsRecordError,
    ThrowOnError
  >({
    ...options,
    url: '/sms/records',
  });
};

/**
 * List sms records
 */
export const listSmsRecords = <ThrowOnError extends boolean = true>(
  options?: OptionsLegacyParser<ListSmsRecordsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<ListSmsRecordsResponse, ListSmsRecordsError, ThrowOnError>(
    {
      ...options,
      url: '/sms/records',
    }
  );
};

/**
 * Find sms record by id
 */
export const getSmsRecord = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<GetSmsRecordData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetSmsRecordResponse, GetSmsRecordError, ThrowOnError>({
    ...options,
    url: '/sms/records/{smsRecordId}',
  });
};

/**
 * Update sms record
 */
export const updateSmsRecord = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<UpdateSmsRecordData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    UpdateSmsRecordResponse,
    UpdateSmsRecordError,
    ThrowOnError
  >({
    ...options,
    url: '/sms/records/{smsRecordId}',
  });
};

/**
 * Delete sms record
 */
export const deleteSmsRecord = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<DeleteSmsRecordData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteSmsRecordResponse,
    DeleteSmsRecordError,
    ThrowOnError
  >({
    ...options,
    url: '/sms/records/{smsRecordId}',
  });
};

/**
 * List Industries
 */
export const listIndustries = <ThrowOnError extends boolean = true>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<ListIndustriesResponse, ListIndustriesError, ThrowOnError>(
    {
      ...options,
      url: '/industries',
    }
  );
};

/**
 * List Regions
 */
export const listRegions = <ThrowOnError extends boolean = true>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<ListRegionsResponse, ListRegionsError, ThrowOnError>({
    ...options,
    url: '/regions',
  });
};

/**
 * Create role
 */
export const createRole = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<CreateRoleData, ThrowOnError>
) => {
  return (options?.client ?? client).post<CreateRoleResponse, CreateRoleError, ThrowOnError>({
    ...options,
    url: '/roles',
  });
};

/**
 * List roles
 */
export const listRoles = <ThrowOnError extends boolean = true>(
  options?: OptionsLegacyParser<ListRolesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<ListRolesResponse, ListRolesError, ThrowOnError>({
    ...options,
    url: '/roles',
  });
};

/**
 * Find role by id or key
 */
export const getRole = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<GetRoleData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetRoleResponse, GetRoleError, ThrowOnError>({
    ...options,
    url: '/roles/{roleIdOrKey}',
  });
};

/**
 * Update role
 */
export const updateRole = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<UpdateRoleData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<UpdateRoleResponse, UpdateRoleError, ThrowOnError>({
    ...options,
    url: '/roles/{roleId}',
  });
};

/**
 * Delete role
 */
export const deleteRole = <ThrowOnError extends boolean = true>(
  options: OptionsLegacyParser<DeleteRoleData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<DeleteRoleResponse, DeleteRoleError, ThrowOnError>({
    ...options,
    url: '/roles/{roleId}',
  });
};

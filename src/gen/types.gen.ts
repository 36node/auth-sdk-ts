// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: string;
};

export type HealthCheckResult = {
    message: string;
};

export type AppResult = {
    message: string;
};

export type LoginDto = {
    /**
     * 可以是 username/phone/Email
     */
    login: string;
    /**
     * 密码
     */
    password: string;
};

export type SessionWithToken = {
    /**
     * 会话过期时间
     */
    expireAt: Date;
    /**
     * session key
     * 可以作为 refresh token
     */
    key: string;
    /**
     * 用户或第三方用户 id
     */
    subject: string;
    /**
     * 如果来自第三方，则会加上 source
     */
    source?: string;
    /**
     * 角色之外的权限
     */
    permissions?: Array<string>;
    /**
     * 角色
     */
    roles?: Array<string>;
    /**
     * 用户所属的组
     */
    groups?: Array<string>;
    /**
     * user ns
     */
    ns?: string;
    /**
     * 用户类型
     */
    type?: string;
    /**
     * 一次性的，禁止轮换
     */
    oneTimeUse?: boolean;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
    /**
     * token
     */
    token: string;
    /**
     * token 过期时间
     */
    tokenExpireAt: Date;
};

export type Authorizer = {
    /**
     * url
     */
    url: string;
};

export type GithubDto = {
    code: string;
    redirectUri?: string;
    repositoryId?: string;
};

export type OAuthDto = {
    provider: string;
    code: string;
    grantType?: string;
    redirectUri?: string;
};

export type LoginByEmailDto = {
    /**
     * 邮箱
     */
    email: string;
    /**
     * 验证码 key
     */
    key: string;
    /**
     * 验证码 code
     */
    code: string;
};

export type LoginByPhoneDto = {
    /**
     * 手机号
     */
    phone: string;
    /**
     * 验证码 key
     */
    key: string;
    /**
     * 验证码 code
     */
    code: string;
};

export type LogoutDto = {
    /**
     * session id
     */
    sid: string;
};

export type RegisterDto = {
    /**
     * 用户名
     */
    username: string;
    /**
     * 密码
     */
    password: string;
    /**
     * 命名空间
     */
    ns?: string;
    /**
     * 邀请人
     */
    inviter?: string;
    /**
     * 标签
     */
    labels?: Array<string>;
    /**
     * 注册 IP
     */
    registerIp?: string;
    /**
     * 注册地区，存地区编号
     */
    registerRegion?: string;
    /**
     * 类型, 登录端
     */
    type?: string;
};

export type User = {
    /**
     * 是否有密码
     */
    readonly hasPassword?: boolean;
    /**
     * 头像
     */
    avatar?: string;
    /**
     * 生日
     */
    birthday?: Date;
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 邮箱
     */
    email?: string;
    /**
     * 姓名
     */
    name?: string;
    identity?: string;
    /**
     * 实名认证时间
     */
    identityVerifiedAt?: Date;
    /**
     * 实名认证是否通过
     */
    identityVerified?: boolean;
    /**
     * 简介
     */
    intro?: string;
    /**
     * 邀请人
     */
    inviter?: string;
    /**
     * 标签
     */
    labels: Array<string>;
    /**
     * 使用语言
     */
    language?: string;
    /**
     * 最后登录 IP
     */
    lastLoginIp?: string;
    /**
     * 最后活跃时间
     */
    lastSeenAt?: Date;
    /**
     * 等级
     */
    level?: number;
    /**
     * 昵称
     */
    nickname?: string;
    /**
     * 所属命名空间
     */
    ns?: string;
    /**
     * 手机号
     */
    phone?: string;
    /**
     * 注册 IP
     */
    registerIp?: string;
    /**
     * 注册地区，存地区编号
     */
    registerRegion?: string;
    /**
     * 角色
     */
    roles: Array<string>;
    /**
     * 用户名
     */
    username?: string;
    /**
     * 员工编号
     */
    employeeId?: string;
    /**
     * 权限
     */
    permissions: Array<string>;
    /**
     * 团队
     */
    groups: Array<string>;
    /**
     * 最后登录时间
     */
    lastLoginAt?: Date;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 状态
     */
    status?: string;
    /**
     * 过期时间
     */
    expireAt?: Date;
    /**
     * 类型, 登录端
     */
    type?: string;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type RegisterbyPhoneDto = {
    /**
     * 手机号
     */
    phone: string;
    /**
     * 验证码 key
     */
    key: string;
    /**
     * 验证码 code
     */
    code: string;
    /**
     * 命名空间
     */
    ns?: string;
    /**
     * 邀请人
     */
    inviter?: string;
    /**
     * 标签
     */
    labels?: Array<string>;
    /**
     * 注册 IP
     */
    registerIp?: string;
    /**
     * 注册地区，存地区编号
     */
    registerRegion?: string;
    /**
     * 类型, 登录端
     */
    type?: string;
};

export type RegisterByEmailDto = {
    /**
     * 邮箱
     */
    email: string;
    /**
     * 验证码 key
     */
    key: string;
    /**
     * 验证码 code
     */
    code: string;
    /**
     * 命名空间
     */
    ns?: string;
    /**
     * 邀请人
     */
    inviter?: string;
    /**
     * 标签
     */
    labels?: Array<string>;
    /**
     * 注册 IP
     */
    registerIp?: string;
    /**
     * 注册地区，存地区编号
     */
    registerRegion?: string;
    /**
     * 类型, 登录端
     */
    type?: string;
};

export type SignTokenDto = {
    /**
     * short time span string
     *
     * refs: https://github.com/vercel/ms
     *
     * eg: "2 days", "10h", "7d", "120s", "2.5 hrs", "2h", "1m", "5s", "1y", "100", "1y1m1d"
     *
     * m => minute
     * h => hour
     * d => day
     * w => week
     * M => month
     * y => year
     * s => second
     * ms => millisecond
     * 无单位 => millisecond
     */
    expiresIn: string;
    /**
     * 用户 id
     */
    uid: string;
    /**
     * 受限权限
     */
    permissions?: Array<string>;
};

export type Token = {
    /**
     * token
     */
    token: string;
    /**
     * token 过期时间
     */
    tokenExpireAt: Date;
};

export type RefreshTokenDto = {
    /**
     * refresh token 也就是 session key
     */
    refreshToken: string;
};

export type ResetPasswordByPhoneDto = {
    /**
     * 手机号
     */
    phone: string;
    /**
     * 验证码 key
     */
    key: string;
    /**
     * 验证码 code
     */
    code: string;
    /**
     * 密码
     */
    password: string;
};

export type ResetPasswordByEmailDto = {
    /**
     * 手机号
     */
    email: string;
    /**
     * 验证码 key
     */
    key: string;
    /**
     * 验证码 code
     */
    code: string;
    /**
     * 密码
     */
    password: string;
};

export type CreateCaptchaDto = {
    /**
     * 验证码
     */
    code?: string;
    /**
     * 过期时间
     */
    expireAt?: Date;
    /**
     * key
     */
    key: string;
};

export type Captcha = {
    /**
     * 验证码
     */
    code: string;
    /**
     * 过期时间
     */
    expireAt: Date;
    /**
     * key
     */
    key: string;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type UpdateCaptchaDto = {
    /**
     * 验证码
     */
    code?: string;
    /**
     * 过期时间
     */
    expireAt?: Date;
    /**
     * key
     */
    key?: string;
};

export type VerifyCaptchaDto = {
    /**
     * 验证码
     */
    code: string;
    /**
     * 验证码 key
     */
    key: string;
};

export type VerifyCaptchaResultDto = {
    /**
     * 是否验证成功
     */
    success: boolean;
};

export type SendEmailDto = {
    from: string;
    to: string;
    subject: string;
    content: string;
};

/**
 * 发送状态
 */
export type EmailStatus = 'pending' | 'sent';

export type CreateEmailRecordDto = {
    /**
     * 发送状态
     */
    status: EmailStatus;
    /**
     * 发件者
     */
    from: string;
    /**
     * 收件者
     */
    to: string;
    /**
     * 主题
     */
    subject: string;
    /**
     * 内容
     */
    content: string;
    /**
     * 发送时间
     */
    sentAt?: Date;
};

export type EmailRecord = {
    /**
     * 发送状态
     */
    status: EmailStatus;
    /**
     * 发件者
     */
    from: string;
    /**
     * 收件者
     */
    to: string;
    /**
     * 主题
     */
    subject: string;
    /**
     * 内容
     */
    content: string;
    /**
     * 发送时间
     */
    sentAt?: Date;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type UpdateEmailRecordDto = {
    /**
     * 发送状态
     */
    status?: EmailStatus;
    /**
     * 发件者
     */
    from?: string;
    /**
     * 收件者
     */
    to?: string;
    /**
     * 主题
     */
    subject?: string;
    /**
     * 内容
     */
    content?: string;
    /**
     * 发送时间
     */
    sentAt?: Date;
};

export type CreateGroupDto = {
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 名称
     */
    name: string;
    /**
     * 权限
     */
    permissions?: Array<string>;
    /**
     * 是否启用
     */
    active?: boolean;
};

export type Group = {
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 名称
     */
    name: string;
    /**
     * 权限
     */
    permissions?: Array<string>;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type UpdateGroupDto = {
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 名称
     */
    name?: string;
    /**
     * 权限
     */
    permissions?: Array<string>;
    /**
     * 是否启用
     */
    active?: boolean;
};

export type CreateNamespaceDto = {
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 描述
     */
    desc?: string;
    /**
     * 标签
     */
    labels?: Array<string>;
    /**
     * 名称
     */
    name: string;
    /**
     * 命名空间的 key
     *
     * 允许的字符 ^[a-zA-Z][a-zA-Z0-9._/-]{0,200}$
     */
    key: string;
    /**
     * 所属的 namespace key
     */
    ns?: string;
    /**
     * 权限
     */
    permissions?: Array<string>;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 默认密码
     */
    defaultPassword?: string;
    /**
     * 是否可导出
     */
    exportable?: boolean;
};

export type Namespace = {
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 描述
     */
    desc?: string;
    /**
     * 标签
     */
    labels?: Array<string>;
    /**
     * 名称
     */
    name: string;
    /**
     * 命名空间的 key
     *
     * 允许的字符 ^[a-zA-Z][a-zA-Z0-9._/-]{0,200}$
     */
    key: string;
    /**
     * 所属的 namespace key
     */
    ns?: string;
    /**
     * 权限
     */
    permissions?: Array<string>;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 默认密码
     */
    defaultPassword?: string;
    /**
     * 是否可导出
     */
    exportable?: boolean;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type UpdateNamespaceDto = {
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 描述
     */
    desc?: string;
    /**
     * 标签
     */
    labels?: Array<string>;
    /**
     * 名称
     */
    name?: string;
    /**
     * 权限
     */
    permissions?: Array<string>;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 默认密码
     */
    defaultPassword?: string;
    /**
     * 是否可导出
     */
    exportable?: boolean;
};

export type CreateSessionDto = {
    /**
     * 会话过期时间
     */
    expireAt: Date;
    /**
     * 用户或第三方用户 id
     */
    subject: string;
    /**
     * 如果来自第三方，则会加上 source
     */
    source?: string;
    /**
     * 角色之外的权限
     */
    permissions?: Array<string>;
    /**
     * 角色
     */
    roles?: Array<string>;
    /**
     * 用户所属的组
     */
    groups?: Array<string>;
    /**
     * user ns
     */
    ns?: string;
    /**
     * 用户类型
     */
    type?: string;
    /**
     * 一次性的，禁止轮换
     */
    oneTimeUse?: boolean;
};

export type Session = {
    /**
     * 会话过期时间
     */
    expireAt: Date;
    /**
     * session key
     * 可以作为 refresh token
     */
    key: string;
    /**
     * 用户或第三方用户 id
     */
    subject: string;
    /**
     * 如果来自第三方，则会加上 source
     */
    source?: string;
    /**
     * 角色之外的权限
     */
    permissions?: Array<string>;
    /**
     * 角色
     */
    roles?: Array<string>;
    /**
     * 用户所属的组
     */
    groups?: Array<string>;
    /**
     * user ns
     */
    ns?: string;
    /**
     * 用户类型
     */
    type?: string;
    /**
     * 一次性的，禁止轮换
     */
    oneTimeUse?: boolean;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type UpdateSessionDto = {
    /**
     * 会话过期时间
     */
    expireAt?: Date;
    /**
     * 用户或第三方用户 id
     */
    subject?: string;
    /**
     * 如果来自第三方，则会加上 source
     */
    source?: string;
    /**
     * 角色之外的权限
     */
    permissions?: Array<string>;
    /**
     * 角色
     */
    roles?: Array<string>;
    /**
     * 用户所属的组
     */
    groups?: Array<string>;
    /**
     * user ns
     */
    ns?: string;
    /**
     * 用户类型
     */
    type?: string;
    /**
     * 一次性的，禁止轮换
     */
    oneTimeUse?: boolean;
};

export type SendSmsDto = {
    phone: string;
    sign: string;
    template: string;
    params?: {
        [key: string]: unknown;
    };
};

/**
 * 发送状态
 */
export type SmsStatus = 'pending' | 'sent';

export type CreateSmsRecordDto = {
    /**
     * 发送状态
     */
    status: SmsStatus;
    /**
     * 手机号
     */
    phone: string;
    /**
     * 签名
     */
    sign: string;
    /**
     * 模板
     */
    template: string;
    /**
     * 参数
     */
    params?: string;
    /**
     * 发送时间
     */
    sentAt?: Date;
};

export type SmsRecord = {
    /**
     * 发送状态
     */
    status: SmsStatus;
    /**
     * 手机号
     */
    phone: string;
    /**
     * 签名
     */
    sign: string;
    /**
     * 模板
     */
    template: string;
    /**
     * 参数
     */
    params?: string;
    /**
     * 发送时间
     */
    sentAt?: Date;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type UpdateSmsRecordDto = {
    /**
     * 发送状态
     */
    status?: SmsStatus;
    /**
     * 手机号
     */
    phone?: string;
    /**
     * 签名
     */
    sign?: string;
    /**
     * 模板
     */
    template?: string;
    /**
     * 参数
     */
    params?: string;
    /**
     * 发送时间
     */
    sentAt?: Date;
};

export type CreateThirdPartyDto = {
    /**
     * 第三方登录来源
     */
    source: string;
    /**
     * 第三方登录的用户唯一标识
     */
    tid: string;
    /**
     * 第三方登录 accessToken
     */
    accessToken: string;
    /**
     * 第三方登录过期时间
     */
    expireAt?: number;
    /**
     * 第三方登录 token 类型
     */
    tokenType?: string;
    /**
     * 第三方登录 refreshToken
     */
    refreshToken?: string;
    /**
     * 第三方登录 refreshToken 过期时间
     */
    refreshTokenExpireAt?: number;
    /**
     * 关联uid
     */
    uid?: string;
    /**
     * 用于存储第三方的额外数据
     */
    data: string;
};

export type ThirdParty = {
    /**
     * 第三方登录来源
     */
    source: string;
    /**
     * 第三方登录的用户唯一标识
     */
    tid: string;
    /**
     * 第三方登录 accessToken
     */
    accessToken: string;
    /**
     * 第三方登录过期时间
     */
    expireAt?: number;
    /**
     * 第三方登录 token 类型
     */
    tokenType?: string;
    /**
     * 第三方登录 refreshToken
     */
    refreshToken?: string;
    /**
     * 第三方登录 refreshToken 过期时间
     */
    refreshTokenExpireAt?: number;
    /**
     * 关联uid
     */
    uid?: string;
    /**
     * 用于存储第三方的额外数据
     */
    data: string;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type UpdateThirdPartyDto = {
    /**
     * 第三方登录来源
     */
    source?: string;
    /**
     * 第三方登录的用户唯一标识
     */
    tid?: string;
    /**
     * 第三方登录 accessToken
     */
    accessToken?: string;
    /**
     * 第三方登录过期时间
     */
    expireAt?: number;
    /**
     * 第三方登录 token 类型
     */
    tokenType?: string;
    /**
     * 第三方登录 refreshToken
     */
    refreshToken?: string;
    /**
     * 第三方登录 refreshToken 过期时间
     */
    refreshTokenExpireAt?: number;
    /**
     * 关联uid
     */
    uid?: string;
    /**
     * 用于存储第三方的额外数据
     */
    data?: string;
};

export type BindThirdPartyDto = {
    login: string;
    password?: string;
    source: string;
    tid: string;
};

export type CreateUserDto = {
    /**
     * 是否有密码
     */
    readonly hasPassword?: boolean;
    /**
     * 团队
     */
    groups?: Array<string>;
    /**
     * 标签
     */
    labels?: Array<string>;
    /**
     * 权限
     */
    permissions?: Array<string>;
    /**
     * 角色
     */
    roles?: Array<string>;
    /**
     * 头像
     */
    avatar?: string;
    /**
     * 生日
     */
    birthday?: Date;
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 邮箱
     */
    email?: string;
    /**
     * 姓名
     */
    name?: string;
    identity?: string;
    /**
     * 实名认证时间
     */
    identityVerifiedAt?: Date;
    /**
     * 实名认证是否通过
     */
    identityVerified?: boolean;
    /**
     * 简介
     */
    intro?: string;
    /**
     * 邀请人
     */
    inviter?: string;
    /**
     * 使用语言
     */
    language?: string;
    /**
     * 等级
     */
    level?: number;
    /**
     * 昵称
     */
    nickname?: string;
    /**
     * 所属命名空间
     */
    ns?: string;
    /**
     * 手机号
     */
    phone?: string;
    /**
     * 注册 IP
     */
    registerIp?: string;
    /**
     * 注册地区，存地区编号
     */
    registerRegion?: string;
    /**
     * 用户名
     */
    username?: string;
    /**
     * 员工编号
     */
    employeeId?: string;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 状态
     */
    status?: string;
    /**
     * 过期时间
     */
    expireAt?: Date;
    /**
     * 类型, 登录端
     */
    type?: string;
};

export type CountResult = {
    count: number;
};

export type UpdateUserDto = {
    /**
     * 是否有密码
     */
    readonly hasPassword?: boolean;
    /**
     * 头像
     */
    avatar?: string;
    /**
     * 生日
     */
    birthday?: Date;
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 邮箱
     */
    email?: string;
    /**
     * 姓名
     */
    name?: string;
    identity?: string;
    /**
     * 实名认证时间
     */
    identityVerifiedAt?: Date;
    /**
     * 实名认证是否通过
     */
    identityVerified?: boolean;
    /**
     * 简介
     */
    intro?: string;
    /**
     * 邀请人
     */
    inviter?: string;
    /**
     * 标签
     */
    labels?: Array<string>;
    /**
     * 使用语言
     */
    language?: string;
    /**
     * 最后登录 IP
     */
    lastLoginIp?: string;
    /**
     * 最后活跃时间
     */
    lastSeenAt?: Date;
    /**
     * 等级
     */
    level?: number;
    /**
     * 昵称
     */
    nickname?: string;
    /**
     * 所属命名空间
     */
    ns?: string;
    /**
     * 手机号
     */
    phone?: string;
    /**
     * 注册 IP
     */
    registerIp?: string;
    /**
     * 注册地区，存地区编号
     */
    registerRegion?: string;
    /**
     * 角色
     */
    roles?: Array<string>;
    /**
     * 用户名
     */
    username?: string;
    /**
     * 员工编号
     */
    employeeId?: string;
    /**
     * 权限
     */
    permissions?: Array<string>;
    /**
     * 团队
     */
    groups?: Array<string>;
    /**
     * 最后登录时间
     */
    lastLoginAt?: Date;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 状态
     */
    status?: string;
    /**
     * 过期时间
     */
    expireAt?: Date;
    /**
     * 类型, 登录端
     */
    type?: string;
};

export type UpdatePasswordDto = {
    /**
     * 旧密码
     */
    oldPassword?: string;
    /**
     * 新密码
     */
    newPassword: string;
};

export type AggregateUserDto = {
    /**
     * The group by clause
     */
    group?: Array<'level' | 'labels' | 'language' | 'ns' | 'registerRegion' | 'roles' | 'groups' | 'active' | 'status' | 'createdAt'>;
    /**
     * Date unit for time-based grouping when createdAt is in group
     */
    dateUnit?: 'hour' | 'day' | 'week' | 'month' | 'year';
};

export type DateGroup = {
    year?: number;
    month?: number;
    week?: number;
    day?: number;
    hour?: number;
};

export type UserAggregateResult = {
    level?: number;
    label?: string;
    language?: string;
    ns?: string;
    registerRegion?: string;
    role?: string;
    group?: string;
    active?: boolean;
    status?: string;
    createdAt?: DateGroup;
    /**
     * 统计数量
     */
    count: number;
};

export type Industry = {
    /**
     * 编码
     */
    code: string;
    /**
     * 名称
     */
    name: string;
    /**
     * 子集
     */
    children: Array<Industry>;
};

export type Region = {
    /**
     * 缩写
     */
    code: string;
    /**
     * 中文名称
     */
    nameZh: string;
    /**
     * 中文拼音
     */
    namePinyin: string;
    /**
     * 英文名称
     */
    nameEn: string;
    /**
     * 电话前缀
     */
    dialingPrefix: string;
};

export type CreateRoleDto = {
    /**
     * 权限
     */
    permissions?: Array<string>;
    /**
     * role key
     */
    key: string;
    /**
     * 名称
     */
    name: string;
};

export type Role = {
    /**
     * role key
     */
    key: string;
    /**
     * 名称
     */
    name: string;
    /**
     * 权限
     */
    permissions: Array<string>;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type UpdateRoleDto = {
    /**
     * 名称
     */
    name?: string;
    /**
     * 权限
     */
    permissions?: Array<string>;
};

export type ListUsersQuery = {
    /**
     * 按 id 筛选
     */
    id?: Array<string>;
    /**
     * 所属命名空间
     */
    ns?: string | Array<string>;
    /**
     * 所属命名空间 start 查询
     */
    ns_start?: string | Array<string>;
    /**
     * 排序参数
     */
    _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'lastLoginAt' | '-lastLoginAt' | 'expireAt' | '-expireAt';
    /**
     * 名称 模糊查询
     */
    name_like?: string;
    /**
     * 用户名 模糊查询
     */
    username_like?: string;
    /**
     * 昵称 模糊查询
     */
    nickname_like?: string;
    /**
     * 所属命名空间的 tree 查询
     */
    ns_tree?: string;
    /**
     * 过期时间大于该时间
     */
    expireAt_gte?: Date;
    /**
     * 过期时间小于该时间
     */
    expireAt_lte?: Date;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 邮箱
     */
    email?: string;
    /**
     * 团队
     */
    groups?: Array<string>;
    /**
     * 邀请人
     */
    inviter?: string;
    /**
     * 标签
     */
    labels?: Array<string>;
    /**
     * 姓名
     */
    name?: string;
    /**
     * 手机号
     */
    phone?: string;
    /**
     * 注册地区，存地区编号
     */
    registerRegion?: string;
    /**
     * 角色
     */
    roles?: Array<string>;
    /**
     * 状态
     */
    status?: string;
    /**
     * 类型, 登录端
     */
    type?: string;
    /**
     * 用户名
     */
    username?: string;
    /**
     * 分页大小
     */
    _limit?: number;
    /**
     * 分页偏移
     */
    _offset?: number;
};

export type ListNamespacesQuery = {
    /**
     * 按 key 查询
     */
    key?: string | Array<string>;
    /**
     * key start 查询
     */
    key_start?: string | Array<string>;
    /**
     * key tree 查询
     */
    key_tree?: string;
    /**
     * 所属命名空间
     */
    ns?: string | Array<string>;
    /**
     * 所属命名空间 start 查询
     */
    ns_start?: string | Array<string>;
    /**
     * 所属命名空间 tree 查询
     */
    ns_tree?: string;
    /**
     * 排序参数
     */
    _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'key' | '-key' | 'name' | '-name';
    /**
     * 名称 模糊查询
     */
    name_like?: string;
    /**
     * 标签
     */
    labels?: Array<string>;
    /**
     * 分页大小
     */
    _limit?: number;
    /**
     * 分页偏移
     */
    _offset?: number;
};

export type GetAuthorizerQuery = {
    provider: string;
    redirectUri?: string;
    responseType?: string;
    state?: string;
};

export type ListCaptchasQuery = {
    /**
     * 排序参数
     */
    _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'expireAt' | '-expireAt';
    /**
     * 验证码
     */
    code?: string;
    /**
     * key
     */
    key?: string;
    /**
     * 分页大小
     */
    _limit?: number;
    /**
     * 分页偏移
     */
    _offset?: number;
};

export type ListEmailRecordsQuery = {
    /**
     * 发送状态
     */
    status?: EmailStatus;
    /**
     * 排序参数
     */
    _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sentAt' | '-sentAt';
    /**
     * 创建时间大于该时间
     */
    createdAt_gt?: Date;
    /**
     * 创建时间小于该时间
     */
    createdAt_lt?: Date;
    /**
     * 发送时间大于该时间
     */
    sentAt_gt?: Date;
    /**
     * 发送时间小于该时间
     */
    sentAt_lt?: Date;
    /**
     * 发件者
     */
    from?: string;
    /**
     * 收件者
     */
    to?: string;
    /**
     * 分页大小
     */
    _limit?: number;
    /**
     * 分页偏移
     */
    _offset?: number;
};

export type ListGroupsQuery = {
    /**
     * 排序参数
     */
    _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
    /**
     * 按 id 筛选
     */
    id?: Array<string>;
    /**
     * 名称 模糊查询
     */
    name_like?: string;
    /**
     * 名称
     */
    name?: string;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 分页大小
     */
    _limit?: number;
    /**
     * 分页偏移
     */
    _offset?: number;
};

export type ListIndustriesQuery = {
    /**
     * 返回的层数
     * 默认返回所有层级
     */
    depth?: number;
};

export type ListRolesQuery = {
    /**
     * 排序参数
     */
    _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
    /**
     * 名称 模糊查询
     */
    name_like?: string;
    /**
     * 名称
     */
    name?: string;
    /**
     * role key
     */
    key?: string;
    /**
     * 分页大小
     */
    _limit?: number;
    /**
     * 分页偏移
     */
    _offset?: number;
};

export type ListSessionsQuery = {
    /**
     * 排序参数
     */
    _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'expireAt' | '-expireAt';
    /**
     * 用 key 进行查询
     */
    refreshToken?: string;
    /**
     * 用户或第三方用户 id
     */
    subject?: string;
    /**
     * 如果来自第三方，则会加上 source
     */
    source?: string;
    /**
     * 角色之外的权限
     */
    permissions?: Array<string>;
    /**
     * 角色
     */
    roles?: Array<string>;
    /**
     * 用户所属的组
     */
    groups?: Array<string>;
    /**
     * user ns
     */
    ns?: string;
    /**
     * 用户类型
     */
    type?: string;
    /**
     * 一次性的，禁止轮换
     */
    oneTimeUse?: boolean;
    /**
     * 分页大小
     */
    _limit?: number;
    /**
     * 分页偏移
     */
    _offset?: number;
};

export type ListSmsRecordsQuery = {
    /**
     * 发送状态
     */
    status?: SmsStatus;
    /**
     * 排序参数
     */
    _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sentAt' | '-sentAt';
    /**
     * 创建时间大于该时间
     */
    createdAt_gt?: Date;
    /**
     * 创建时间小于该时间
     */
    createdAt_lt?: Date;
    /**
     * 发送时间大于该时间
     */
    sentAt_gt?: Date;
    /**
     * 发送时间小于该时间
     */
    sentAt_lt?: Date;
    /**
     * 手机号
     */
    phone?: string;
    /**
     * 签名
     */
    sign?: string;
    /**
     * 分页大小
     */
    _limit?: number;
    /**
     * 分页偏移
     */
    _offset?: number;
};

export type ListThirdPartyQuery = {
    /**
     * 第三方登录来源
     */
    source?: string;
    /**
     * 第三方登录的用户唯一标识
     */
    tid?: string;
    /**
     * 第三方登录 accessToken
     */
    accessToken?: string;
    /**
     * 第三方登录过期时间
     */
    expireAt?: number;
    /**
     * 第三方登录 token 类型
     */
    tokenType?: string;
    /**
     * 第三方登录 refreshToken
     */
    refreshToken?: string;
    /**
     * 第三方登录 refreshToken 过期时间
     */
    refreshTokenExpireAt?: number;
    /**
     * 关联uid
     */
    uid?: string;
    /**
     * 用于存储第三方的额外数据
     */
    data?: string;
    /**
     * 分页大小
     */
    _limit?: number;
    /**
     * 分页偏移
     */
    _offset?: number;
};

export type UserWritable = {
    /**
     * 密码
     */
    password?: string;
    /**
     * 头像
     */
    avatar?: string;
    /**
     * 生日
     */
    birthday?: Date;
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 邮箱
     */
    email?: string;
    /**
     * 姓名
     */
    name?: string;
    identity?: string;
    /**
     * 实名认证时间
     */
    identityVerifiedAt?: Date;
    /**
     * 实名认证是否通过
     */
    identityVerified?: boolean;
    /**
     * 简介
     */
    intro?: string;
    /**
     * 邀请人
     */
    inviter?: string;
    /**
     * 标签
     */
    labels: Array<string>;
    /**
     * 使用语言
     */
    language?: string;
    /**
     * 最后登录 IP
     */
    lastLoginIp?: string;
    /**
     * 最后活跃时间
     */
    lastSeenAt?: Date;
    /**
     * 等级
     */
    level?: number;
    /**
     * 昵称
     */
    nickname?: string;
    /**
     * 所属命名空间
     */
    ns?: string;
    /**
     * 手机号
     */
    phone?: string;
    /**
     * 注册 IP
     */
    registerIp?: string;
    /**
     * 注册地区，存地区编号
     */
    registerRegion?: string;
    /**
     * 角色
     */
    roles: Array<string>;
    /**
     * 用户名
     */
    username?: string;
    /**
     * 员工编号
     */
    employeeId?: string;
    /**
     * 权限
     */
    permissions: Array<string>;
    /**
     * 团队
     */
    groups: Array<string>;
    /**
     * 最后登录时间
     */
    lastLoginAt?: Date;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 状态
     */
    status?: string;
    /**
     * 过期时间
     */
    expireAt?: Date;
    /**
     * 类型, 登录端
     */
    type?: string;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type CreateUserDtoWritable = {
    /**
     * 密码
     */
    password?: string;
    /**
     * 团队
     */
    groups?: Array<string>;
    /**
     * 标签
     */
    labels?: Array<string>;
    /**
     * 权限
     */
    permissions?: Array<string>;
    /**
     * 角色
     */
    roles?: Array<string>;
    /**
     * 头像
     */
    avatar?: string;
    /**
     * 生日
     */
    birthday?: Date;
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 邮箱
     */
    email?: string;
    /**
     * 姓名
     */
    name?: string;
    identity?: string;
    /**
     * 实名认证时间
     */
    identityVerifiedAt?: Date;
    /**
     * 实名认证是否通过
     */
    identityVerified?: boolean;
    /**
     * 简介
     */
    intro?: string;
    /**
     * 邀请人
     */
    inviter?: string;
    /**
     * 使用语言
     */
    language?: string;
    /**
     * 等级
     */
    level?: number;
    /**
     * 昵称
     */
    nickname?: string;
    /**
     * 所属命名空间
     */
    ns?: string;
    /**
     * 手机号
     */
    phone?: string;
    /**
     * 注册 IP
     */
    registerIp?: string;
    /**
     * 注册地区，存地区编号
     */
    registerRegion?: string;
    /**
     * 用户名
     */
    username?: string;
    /**
     * 员工编号
     */
    employeeId?: string;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 状态
     */
    status?: string;
    /**
     * 过期时间
     */
    expireAt?: Date;
    /**
     * 类型, 登录端
     */
    type?: string;
};

export type UpdateUserDtoWritable = {
    /**
     * 头像
     */
    avatar?: string;
    /**
     * 生日
     */
    birthday?: Date;
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 邮箱
     */
    email?: string;
    /**
     * 姓名
     */
    name?: string;
    identity?: string;
    /**
     * 实名认证时间
     */
    identityVerifiedAt?: Date;
    /**
     * 实名认证是否通过
     */
    identityVerified?: boolean;
    /**
     * 简介
     */
    intro?: string;
    /**
     * 邀请人
     */
    inviter?: string;
    /**
     * 标签
     */
    labels?: Array<string>;
    /**
     * 使用语言
     */
    language?: string;
    /**
     * 最后登录 IP
     */
    lastLoginIp?: string;
    /**
     * 最后活跃时间
     */
    lastSeenAt?: Date;
    /**
     * 等级
     */
    level?: number;
    /**
     * 昵称
     */
    nickname?: string;
    /**
     * 所属命名空间
     */
    ns?: string;
    /**
     * 手机号
     */
    phone?: string;
    /**
     * 注册 IP
     */
    registerIp?: string;
    /**
     * 注册地区，存地区编号
     */
    registerRegion?: string;
    /**
     * 角色
     */
    roles?: Array<string>;
    /**
     * 用户名
     */
    username?: string;
    /**
     * 员工编号
     */
    employeeId?: string;
    /**
     * 权限
     */
    permissions?: Array<string>;
    /**
     * 团队
     */
    groups?: Array<string>;
    /**
     * 最后登录时间
     */
    lastLoginAt?: Date;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 状态
     */
    status?: string;
    /**
     * 过期时间
     */
    expireAt?: Date;
    /**
     * 类型, 登录端
     */
    type?: string;
};

export type HelloData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/hello';
};

export type HelloResponses = {
    /**
     * Hello!
     */
    200: AppResult;
};

export type HelloResponse = HelloResponses[keyof HelloResponses];

export type CleanupData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/cleanup';
};

export type CleanupResponses = {
    /**
     * clean up result
     */
    200: AppResult;
};

export type CleanupResponse = CleanupResponses[keyof CleanupResponses];

export type LoginData = {
    body: LoginDto;
    path?: never;
    query?: never;
    url: '/auth/@login';
};

export type LoginResponses = {
    /**
     * The session with token has been successfully created.
     */
    200: SessionWithToken;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type GetAuthorizerData = {
    body?: never;
    path?: never;
    query: {
        provider: string;
        redirectUri?: string;
        responseType?: string;
        state?: string;
    };
    url: '/auth/authorizer';
};

export type GetAuthorizerResponses = {
    200: Authorizer;
};

export type GetAuthorizerResponse = GetAuthorizerResponses[keyof GetAuthorizerResponses];

export type LoginByGithubData = {
    body: GithubDto;
    path?: never;
    query?: never;
    url: '/auth/@loginByGithub';
};

export type LoginByGithubResponses = {
    /**
     * The session with token has been successfully created.
     */
    200: SessionWithToken;
};

export type LoginByGithubResponse = LoginByGithubResponses[keyof LoginByGithubResponses];

export type LoginByOAuthData = {
    body: OAuthDto;
    path?: never;
    query?: never;
    url: '/auth/@loginByOAuth';
};

export type LoginByOAuthResponses = {
    /**
     * The session with token has been successfully created.
     */
    200: SessionWithToken;
};

export type LoginByOAuthResponse = LoginByOAuthResponses[keyof LoginByOAuthResponses];

export type LoginByEmailData = {
    body: LoginByEmailDto;
    path?: never;
    query?: never;
    url: '/auth/@loginByEmail';
};

export type LoginByEmailResponses = {
    /**
     * The session with token has been successfully created.
     */
    200: SessionWithToken;
};

export type LoginByEmailResponse = LoginByEmailResponses[keyof LoginByEmailResponses];

export type LoginByPhoneData = {
    body: LoginByPhoneDto;
    path?: never;
    query?: never;
    url: '/auth/@loginByPhone';
};

export type LoginByPhoneResponses = {
    /**
     * The session with token has been successfully created.
     */
    200: SessionWithToken;
};

export type LoginByPhoneResponse = LoginByPhoneResponses[keyof LoginByPhoneResponses];

export type LogoutData = {
    body: LogoutDto;
    path?: never;
    query?: never;
    url: '/auth/@logout';
};

export type LogoutResponses = {
    204: void;
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type RegisterData = {
    body: RegisterDto;
    path?: never;
    query?: never;
    url: '/auth/@register';
};

export type RegisterResponses = {
    /**
     * The user just created.
     */
    200: User;
};

export type RegisterResponse = RegisterResponses[keyof RegisterResponses];

export type RegisterByPhoneData = {
    body: RegisterbyPhoneDto;
    path?: never;
    query?: never;
    url: '/auth/@registerByPhone';
};

export type RegisterByPhoneResponses = {
    /**
     * The user just created.
     */
    200: User;
};

export type RegisterByPhoneResponse = RegisterByPhoneResponses[keyof RegisterByPhoneResponses];

export type RegisterByEmailData = {
    body: RegisterByEmailDto;
    path?: never;
    query?: never;
    url: '/auth/@registerByEmail';
};

export type RegisterByEmailResponses = {
    /**
     * The user just created.
     */
    200: User;
};

export type RegisterByEmailResponse = RegisterByEmailResponses[keyof RegisterByEmailResponses];

export type SignTokenData = {
    body: SignTokenDto;
    path?: never;
    query?: never;
    url: '/auth/@signToken';
};

export type SignTokenResponses = {
    /**
     * The token has been successfully signed.
     */
    200: Token;
};

export type SignTokenResponse = SignTokenResponses[keyof SignTokenResponses];

export type RefreshData = {
    body: RefreshTokenDto;
    path?: never;
    query?: never;
    url: '/auth/@refresh';
};

export type RefreshResponses = {
    /**
     * The session with token has been successfully refreshed.
     */
    200: SessionWithToken;
};

export type RefreshResponse = RefreshResponses[keyof RefreshResponses];

export type ResetPasswordByPhoneData = {
    body: ResetPasswordByPhoneDto;
    path?: never;
    query?: never;
    url: '/auth/@resetPasswordByPhone';
};

export type ResetPasswordByPhoneResponses = {
    204: void;
};

export type ResetPasswordByPhoneResponse = ResetPasswordByPhoneResponses[keyof ResetPasswordByPhoneResponses];

export type ResetPasswordByEmailData = {
    body: ResetPasswordByEmailDto;
    path?: never;
    query?: never;
    url: '/auth/@resetPasswordByEmail';
};

export type ResetPasswordByEmailResponses = {
    204: void;
};

export type ResetPasswordByEmailResponse = ResetPasswordByEmailResponses[keyof ResetPasswordByEmailResponses];

export type ListCaptchasData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'expireAt' | '-expireAt';
        /**
         * 验证码
         */
        code?: string;
        /**
         * key
         */
        key?: string;
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
    };
    url: '/captchas';
};

export type ListCaptchasResponses = {
    /**
     * A paged array of captchas.
     */
    200: Array<Captcha>;
};

export type ListCaptchasResponse = ListCaptchasResponses[keyof ListCaptchasResponses];

export type CreateCaptchaData = {
    body: CreateCaptchaDto;
    path?: never;
    query?: never;
    url: '/captchas';
};

export type CreateCaptchaResponses = {
    /**
     * The captcha has been successfully created.
     */
    201: Captcha;
};

export type CreateCaptchaResponse = CreateCaptchaResponses[keyof CreateCaptchaResponses];

export type DeleteCaptchaData = {
    body?: never;
    path: {
        captchaId: string;
    };
    query?: never;
    url: '/captchas/{captchaId}';
};

export type DeleteCaptchaResponses = {
    /**
     * No content.
     */
    204: void;
};

export type DeleteCaptchaResponse = DeleteCaptchaResponses[keyof DeleteCaptchaResponses];

export type GetCaptchaData = {
    body?: never;
    path: {
        captchaId: string;
    };
    query?: never;
    url: '/captchas/{captchaId}';
};

export type GetCaptchaResponses = {
    /**
     * The captcha with expected id.
     */
    200: Captcha;
};

export type GetCaptchaResponse = GetCaptchaResponses[keyof GetCaptchaResponses];

export type UpdateCaptchaData = {
    body: UpdateCaptchaDto;
    path: {
        captchaId: string;
    };
    query?: never;
    url: '/captchas/{captchaId}';
};

export type UpdateCaptchaResponses = {
    /**
     * The captcha updated.
     */
    200: Captcha;
};

export type UpdateCaptchaResponse = UpdateCaptchaResponses[keyof UpdateCaptchaResponses];

export type VerifyCaptchaData = {
    body: VerifyCaptchaDto;
    path?: never;
    query?: never;
    url: '/captchas/@verifyCaptcha';
};

export type VerifyCaptchaResponses = {
    /**
     * Check if the captcha is valid.
     */
    200: VerifyCaptchaResultDto;
};

export type VerifyCaptchaResponse = VerifyCaptchaResponses[keyof VerifyCaptchaResponses];

export type SendEmailData = {
    body: SendEmailDto;
    path?: never;
    query?: never;
    url: '/email/@sendEmail';
};

export type SendEmailResponses = {
    /**
     * No content.
     */
    204: void;
};

export type SendEmailResponse = SendEmailResponses[keyof SendEmailResponses];

export type ListEmailRecordsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * 发送状态
         */
        status?: EmailStatus;
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sentAt' | '-sentAt';
        /**
         * 创建时间大于该时间
         */
        createdAt_gt?: Date;
        /**
         * 创建时间小于该时间
         */
        createdAt_lt?: Date;
        /**
         * 发送时间大于该时间
         */
        sentAt_gt?: Date;
        /**
         * 发送时间小于该时间
         */
        sentAt_lt?: Date;
        /**
         * 发件者
         */
        from?: string;
        /**
         * 收件者
         */
        to?: string;
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
    };
    url: '/email/records';
};

export type ListEmailRecordsResponses = {
    /**
     * A paged array of email records.
     */
    200: Array<EmailRecord>;
};

export type ListEmailRecordsResponse = ListEmailRecordsResponses[keyof ListEmailRecordsResponses];

export type CreateEmailRecordData = {
    body: CreateEmailRecordDto;
    path?: never;
    query?: never;
    url: '/email/records';
};

export type CreateEmailRecordResponses = {
    /**
     * The email record has been successfully created.
     */
    201: EmailRecord;
};

export type CreateEmailRecordResponse = CreateEmailRecordResponses[keyof CreateEmailRecordResponses];

export type DeleteEmailRecordData = {
    body?: never;
    path: {
        emailRecordId: string;
    };
    query?: never;
    url: '/email/records/{emailRecordId}';
};

export type DeleteEmailRecordResponses = {
    /**
     * No content.
     */
    204: void;
};

export type DeleteEmailRecordResponse = DeleteEmailRecordResponses[keyof DeleteEmailRecordResponses];

export type GetEmailRecordData = {
    body?: never;
    path: {
        /**
         * Email record id
         */
        emailRecordId: string;
    };
    query?: never;
    url: '/email/records/{emailRecordId}';
};

export type GetEmailRecordResponses = {
    /**
     * The email record with expected id.
     */
    200: EmailRecord;
};

export type GetEmailRecordResponse = GetEmailRecordResponses[keyof GetEmailRecordResponses];

export type UpdateEmailRecordData = {
    body: UpdateEmailRecordDto;
    path: {
        emailRecordId: string;
    };
    query?: never;
    url: '/email/records/{emailRecordId}';
};

export type UpdateEmailRecordResponses = {
    /**
     * The email record updated.
     */
    200: EmailRecord;
};

export type UpdateEmailRecordResponse = UpdateEmailRecordResponses[keyof UpdateEmailRecordResponses];

export type ListGroupsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * 按 id 筛选
         */
        id?: Array<string>;
        /**
         * 名称 模糊查询
         */
        name_like?: string;
        /**
         * 名称
         */
        name?: string;
        /**
         * 是否启用
         */
        active?: boolean;
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
    };
    url: '/groups';
};

export type ListGroupsResponses = {
    /**
     * A paged array of groups.
     */
    200: Array<Group>;
};

export type ListGroupsResponse = ListGroupsResponses[keyof ListGroupsResponses];

export type CreateGroupData = {
    body: CreateGroupDto;
    path?: never;
    query?: never;
    url: '/groups';
};

export type CreateGroupResponses = {
    /**
     * The group has been successfully created.
     */
    201: Group;
};

export type CreateGroupResponse = CreateGroupResponses[keyof CreateGroupResponses];

export type GetGroupData = {
    body?: never;
    path: {
        /**
         * Group id or name, if name should encodeURIComponent
         */
        groupIdOrName: string;
    };
    query?: never;
    url: '/groups/{groupIdOrName}';
};

export type GetGroupResponses = {
    /**
     * The group with expected id or name.
     */
    200: Group;
};

export type GetGroupResponse = GetGroupResponses[keyof GetGroupResponses];

export type DeleteGroupData = {
    body?: never;
    path: {
        groupId: string;
    };
    query?: never;
    url: '/groups/{groupId}';
};

export type DeleteGroupResponses = {
    /**
     * No content.
     */
    204: void;
};

export type DeleteGroupResponse = DeleteGroupResponses[keyof DeleteGroupResponses];

export type UpdateGroupData = {
    body: UpdateGroupDto;
    path: {
        groupId: string;
    };
    query?: never;
    url: '/groups/{groupId}';
};

export type UpdateGroupResponses = {
    /**
     * The group updated.
     */
    200: Group;
};

export type UpdateGroupResponse = UpdateGroupResponses[keyof UpdateGroupResponses];

export type UpsertGroupByNameData = {
    body: CreateGroupDto;
    path: {
        groupName: string;
    };
    query?: never;
    url: '/groups/{groupName}/@upsertGroupByName';
};

export type UpsertGroupByNameResponses = {
    /**
     * The group upserted.
     */
    200: Group;
    201: {
        [key: string]: unknown;
    };
};

export type UpsertGroupByNameResponse = UpsertGroupByNameResponses[keyof UpsertGroupByNameResponses];

export type ListNamespacesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * 按 key 查询
         */
        key?: string | Array<string>;
        /**
         * key start 查询
         */
        key_start?: string | Array<string>;
        /**
         * key tree 查询
         */
        key_tree?: string;
        /**
         * 所属命名空间
         */
        ns?: string | Array<string>;
        /**
         * 所属命名空间 start 查询
         */
        ns_start?: string | Array<string>;
        /**
         * 所属命名空间 tree 查询
         */
        ns_tree?: string;
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'key' | '-key' | 'name' | '-name';
        /**
         * 名称 模糊查询
         */
        name_like?: string;
        /**
         * 标签
         */
        labels?: Array<string>;
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
    };
    url: '/namespaces';
};

export type ListNamespacesResponses = {
    /**
     * A paged array of namespaces.
     */
    200: Array<Namespace>;
};

export type ListNamespacesResponse = ListNamespacesResponses[keyof ListNamespacesResponses];

export type CreateNamespaceData = {
    body: CreateNamespaceDto;
    path?: never;
    query?: never;
    url: '/namespaces';
};

export type CreateNamespaceResponses = {
    /**
     * The namespace has been successfully created.
     */
    201: Namespace;
};

export type CreateNamespaceResponse = CreateNamespaceResponses[keyof CreateNamespaceResponses];

export type GetNamespaceData = {
    body?: never;
    path: {
        /**
         * Namespace id or key, if key should encodeURIComponent
         */
        namespaceIdOrKey: string;
    };
    query?: never;
    url: '/namespaces/{namespaceIdOrKey}';
};

export type GetNamespaceResponses = {
    /**
     * The namespace with expected id or key.
     */
    200: Namespace;
};

export type GetNamespaceResponse = GetNamespaceResponses[keyof GetNamespaceResponses];

export type UpdateNamespaceData = {
    body: UpdateNamespaceDto;
    path: {
        namespaceIdOrKey: string;
    };
    query?: never;
    url: '/namespaces/{namespaceIdOrKey}';
};

export type UpdateNamespaceResponses = {
    /**
     * The namespace updated.
     */
    200: Namespace;
};

export type UpdateNamespaceResponse = UpdateNamespaceResponses[keyof UpdateNamespaceResponses];

export type DeleteNamespaceData = {
    body?: never;
    path: {
        namespaceId: string;
    };
    query?: never;
    url: '/namespaces/{namespaceId}';
};

export type DeleteNamespaceResponses = {
    /**
     * No content.
     */
    204: void;
};

export type DeleteNamespaceResponse = DeleteNamespaceResponses[keyof DeleteNamespaceResponses];

export type ListSessionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'expireAt' | '-expireAt';
        /**
         * 用 key 进行查询
         */
        refreshToken?: string;
        /**
         * 用户或第三方用户 id
         */
        subject?: string;
        /**
         * 如果来自第三方，则会加上 source
         */
        source?: string;
        /**
         * 角色之外的权限
         */
        permissions?: Array<string>;
        /**
         * 角色
         */
        roles?: Array<string>;
        /**
         * 用户所属的组
         */
        groups?: Array<string>;
        /**
         * user ns
         */
        ns?: string;
        /**
         * 用户类型
         */
        type?: string;
        /**
         * 一次性的，禁止轮换
         */
        oneTimeUse?: boolean;
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
    };
    url: '/sessions';
};

export type ListSessionsResponses = {
    /**
     * A paged array of sessions.
     */
    200: Array<Session>;
};

export type ListSessionsResponse = ListSessionsResponses[keyof ListSessionsResponses];

export type CreateSessionData = {
    body: CreateSessionDto;
    path?: never;
    query?: never;
    url: '/sessions';
};

export type CreateSessionResponses = {
    /**
     * The session has been successfully created.
     */
    201: Session;
};

export type CreateSessionResponse = CreateSessionResponses[keyof CreateSessionResponses];

export type DeleteSessionData = {
    body?: never;
    path: {
        sessionId: string;
    };
    query?: never;
    url: '/sessions/{sessionId}';
};

export type DeleteSessionResponses = {
    /**
     * No content.
     */
    204: void;
};

export type DeleteSessionResponse = DeleteSessionResponses[keyof DeleteSessionResponses];

export type GetSessionData = {
    body?: never;
    path: {
        sessionId: string;
    };
    query?: never;
    url: '/sessions/{sessionId}';
};

export type GetSessionResponses = {
    /**
     * The session with expected id.
     */
    200: Session;
};

export type GetSessionResponse = GetSessionResponses[keyof GetSessionResponses];

export type UpdateSessionData = {
    body: UpdateSessionDto;
    path: {
        sessionId: string;
    };
    query?: never;
    url: '/sessions/{sessionId}';
};

export type UpdateSessionResponses = {
    /**
     * The session updated.
     */
    200: Session;
};

export type UpdateSessionResponse = UpdateSessionResponses[keyof UpdateSessionResponses];

export type GetSessionByKeyData = {
    body?: never;
    path: {
        key: string;
    };
    query?: never;
    url: '/sessions/byKey/{key}';
};

export type GetSessionByKeyResponses = {
    /**
     * The session with expected key.
     */
    200: Session;
};

export type GetSessionByKeyResponse = GetSessionByKeyResponses[keyof GetSessionByKeyResponses];

export type SendSmsData = {
    body: SendSmsDto;
    path?: never;
    query?: never;
    url: '/sms/@sendSms';
};

export type SendSmsResponses = {
    /**
     * No content.
     */
    204: void;
};

export type SendSmsResponse = SendSmsResponses[keyof SendSmsResponses];

export type ListSmsRecordsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * 发送状态
         */
        status?: SmsStatus;
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sentAt' | '-sentAt';
        /**
         * 创建时间大于该时间
         */
        createdAt_gt?: Date;
        /**
         * 创建时间小于该时间
         */
        createdAt_lt?: Date;
        /**
         * 发送时间大于该时间
         */
        sentAt_gt?: Date;
        /**
         * 发送时间小于该时间
         */
        sentAt_lt?: Date;
        /**
         * 手机号
         */
        phone?: string;
        /**
         * 签名
         */
        sign?: string;
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
    };
    url: '/sms/records';
};

export type ListSmsRecordsResponses = {
    /**
     * A paged of sms record list.
     */
    200: Array<SmsRecord>;
};

export type ListSmsRecordsResponse = ListSmsRecordsResponses[keyof ListSmsRecordsResponses];

export type CreateSmsRecordData = {
    body: CreateSmsRecordDto;
    path?: never;
    query?: never;
    url: '/sms/records';
};

export type CreateSmsRecordResponses = {
    /**
     * The sms record has been successfully created.
     */
    201: SmsRecord;
};

export type CreateSmsRecordResponse = CreateSmsRecordResponses[keyof CreateSmsRecordResponses];

export type DeleteSmsRecordData = {
    body?: never;
    path: {
        smsRecordId: string;
    };
    query?: never;
    url: '/sms/records/{smsRecordId}';
};

export type DeleteSmsRecordResponses = {
    /**
     * No content.
     */
    204: void;
};

export type DeleteSmsRecordResponse = DeleteSmsRecordResponses[keyof DeleteSmsRecordResponses];

export type GetSmsRecordData = {
    body?: never;
    path: {
        /**
         * Sms record id
         */
        smsRecordId: string;
    };
    query?: never;
    url: '/sms/records/{smsRecordId}';
};

export type GetSmsRecordResponses = {
    /**
     * The sms record with expected id.
     */
    200: SmsRecord;
};

export type GetSmsRecordResponse = GetSmsRecordResponses[keyof GetSmsRecordResponses];

export type UpdateSmsRecordData = {
    body: UpdateSmsRecordDto;
    path: {
        smsRecordId: string;
    };
    query?: never;
    url: '/sms/records/{smsRecordId}';
};

export type UpdateSmsRecordResponses = {
    /**
     * The sms record updated.
     */
    200: SmsRecord;
};

export type UpdateSmsRecordResponse = UpdateSmsRecordResponses[keyof UpdateSmsRecordResponses];

export type ListThirdPartyData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * 第三方登录来源
         */
        source?: string;
        /**
         * 第三方登录的用户唯一标识
         */
        tid?: string;
        /**
         * 第三方登录 accessToken
         */
        accessToken?: string;
        /**
         * 第三方登录过期时间
         */
        expireAt?: number;
        /**
         * 第三方登录 token 类型
         */
        tokenType?: string;
        /**
         * 第三方登录 refreshToken
         */
        refreshToken?: string;
        /**
         * 第三方登录 refreshToken 过期时间
         */
        refreshTokenExpireAt?: number;
        /**
         * 关联uid
         */
        uid?: string;
        /**
         * 用于存储第三方的额外数据
         */
        data?: string;
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
    };
    url: '/third-parties';
};

export type ListThirdPartyResponses = {
    200: Array<{
        [key: string]: unknown;
    }>;
    /**
     * The third party record list.
     */
    201: Array<ThirdParty>;
};

export type ListThirdPartyResponse = ListThirdPartyResponses[keyof ListThirdPartyResponses];

export type CreateThirdPartyData = {
    body: CreateThirdPartyDto;
    path?: never;
    query?: never;
    url: '/third-parties';
};

export type CreateThirdPartyResponses = {
    /**
     * The third party has been successfully created.
     */
    201: ThirdParty;
};

export type CreateThirdPartyResponse = CreateThirdPartyResponses[keyof CreateThirdPartyResponses];

export type GetThirdPartyData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/third-parties/{id}';
};

export type GetThirdPartyResponses = {
    200: {
        [key: string]: unknown;
    };
    /**
     * The third party.
     */
    201: ThirdParty;
};

export type GetThirdPartyResponse = GetThirdPartyResponses[keyof GetThirdPartyResponses];

export type UpdateThirdPartyData = {
    body: UpdateThirdPartyDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/third-parties/{id}';
};

export type UpdateThirdPartyResponses = {
    200: {
        [key: string]: unknown;
    };
    /**
     * The third party has been successfully updated.
     */
    201: ThirdParty;
};

export type UpdateThirdPartyResponse = UpdateThirdPartyResponses[keyof UpdateThirdPartyResponses];

export type GetThirdPartyByUidData = {
    body?: never;
    path: {
        source: string;
        uid: string;
    };
    query?: never;
    url: '/third-parties/source/{source}/uid/{uid}';
};

export type GetThirdPartyByUidResponses = {
    200: {
        [key: string]: unknown;
    };
    /**
     * The third party.
     */
    201: ThirdParty;
};

export type GetThirdPartyByUidResponse = GetThirdPartyByUidResponses[keyof GetThirdPartyByUidResponses];

export type GetThirdPartyByTidData = {
    body?: never;
    path: {
        source: string;
        tid: string;
    };
    query?: never;
    url: '/third-parties/source/{source}/tid/{tid}';
};

export type GetThirdPartyByTidResponses = {
    200: {
        [key: string]: unknown;
    };
    /**
     * The third party.
     */
    201: ThirdParty;
};

export type GetThirdPartyByTidResponse = GetThirdPartyByTidResponses[keyof GetThirdPartyByTidResponses];

export type BindThirdPartyData = {
    body: BindThirdPartyDto;
    path?: never;
    query?: never;
    url: '/third-parties/@bind';
};

export type BindThirdPartyResponses = {
    /**
     * The third party has been successfully binded.
     */
    201: ThirdParty;
};

export type BindThirdPartyResponse = BindThirdPartyResponses[keyof BindThirdPartyResponses];

export type ListUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * 按 id 筛选
         */
        id?: Array<string>;
        /**
         * 所属命名空间
         */
        ns?: string | Array<string>;
        /**
         * 所属命名空间 start 查询
         */
        ns_start?: string | Array<string>;
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'lastLoginAt' | '-lastLoginAt' | 'expireAt' | '-expireAt';
        /**
         * 名称 模糊查询
         */
        name_like?: string;
        /**
         * 用户名 模糊查询
         */
        username_like?: string;
        /**
         * 昵称 模糊查询
         */
        nickname_like?: string;
        /**
         * 所属命名空间的 tree 查询
         */
        ns_tree?: string;
        /**
         * 过期时间大于该时间
         */
        expireAt_gte?: Date;
        /**
         * 过期时间小于该时间
         */
        expireAt_lte?: Date;
        /**
         * 是否启用
         */
        active?: boolean;
        /**
         * 邮箱
         */
        email?: string;
        /**
         * 团队
         */
        groups?: Array<string>;
        /**
         * 邀请人
         */
        inviter?: string;
        /**
         * 标签
         */
        labels?: Array<string>;
        /**
         * 姓名
         */
        name?: string;
        /**
         * 手机号
         */
        phone?: string;
        /**
         * 注册地区，存地区编号
         */
        registerRegion?: string;
        /**
         * 角色
         */
        roles?: Array<string>;
        /**
         * 状态
         */
        status?: string;
        /**
         * 类型, 登录端
         */
        type?: string;
        /**
         * 用户名
         */
        username?: string;
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
    };
    url: '/users';
};

export type ListUsersResponses = {
    /**
     * A paged array of users.
     */
    200: Array<User>;
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type CreateUserData = {
    body: CreateUserDtoWritable;
    path?: never;
    query?: never;
    url: '/users';
};

export type CreateUserResponses = {
    /**
     * The user has been successfully created.
     */
    201: User;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type CountUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * 按 id 筛选
         */
        id?: Array<string>;
        /**
         * 所属命名空间
         */
        ns?: string | Array<string>;
        /**
         * 所属命名空间 start 查询
         */
        ns_start?: string | Array<string>;
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'lastLoginAt' | '-lastLoginAt' | 'expireAt' | '-expireAt';
        /**
         * 名称 模糊查询
         */
        name_like?: string;
        /**
         * 用户名 模糊查询
         */
        username_like?: string;
        /**
         * 昵称 模糊查询
         */
        nickname_like?: string;
        /**
         * 所属命名空间的 tree 查询
         */
        ns_tree?: string;
        /**
         * 过期时间大于该时间
         */
        expireAt_gte?: Date;
        /**
         * 过期时间小于该时间
         */
        expireAt_lte?: Date;
        /**
         * 是否启用
         */
        active?: boolean;
        /**
         * 邮箱
         */
        email?: string;
        /**
         * 团队
         */
        groups?: Array<string>;
        /**
         * 邀请人
         */
        inviter?: string;
        /**
         * 标签
         */
        labels?: Array<string>;
        /**
         * 姓名
         */
        name?: string;
        /**
         * 手机号
         */
        phone?: string;
        /**
         * 注册地区，存地区编号
         */
        registerRegion?: string;
        /**
         * 角色
         */
        roles?: Array<string>;
        /**
         * 状态
         */
        status?: string;
        /**
         * 类型, 登录端
         */
        type?: string;
        /**
         * 用户名
         */
        username?: string;
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
    };
    url: '/users/@countUsers';
};

export type CountUsersResponses = {
    /**
     * The result of count users.
     */
    200: CountResult;
    201: CountResult;
};

export type CountUsersResponse = CountUsersResponses[keyof CountUsersResponses];

export type DeleteUserData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/users/{userId}';
};

export type DeleteUserResponses = {
    /**
     * No content.
     */
    204: void;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserData = {
    body?: never;
    path: {
        /**
         * User id
         */
        userId: string;
    };
    query?: never;
    url: '/users/{userId}';
};

export type GetUserResponses = {
    /**
     * The user with expected id.
     */
    200: User;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UpdateUserData = {
    body: UpdateUserDtoWritable;
    path: {
        userId: string;
    };
    query?: never;
    url: '/users/{userId}';
};

export type UpdateUserResponses = {
    /**
     * The user updated.
     */
    200: User;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type UpsertUserByEmployeeIdData = {
    body: CreateUserDtoWritable;
    path: {
        employeeId: string;
    };
    query?: never;
    url: '/users/{employeeId}/@upsertUserByEmployeeId';
};

export type UpsertUserByEmployeeIdResponses = {
    /**
     * The user upserted.
     */
    200: User;
    201: {
        [key: string]: unknown;
    };
};

export type UpsertUserByEmployeeIdResponse = UpsertUserByEmployeeIdResponses[keyof UpsertUserByEmployeeIdResponses];

export type UpsertUserByUsernameData = {
    body: CreateUserDtoWritable;
    path: {
        username: string;
    };
    query?: never;
    url: '/users/{username}/@upsertUserByUsername';
};

export type UpsertUserByUsernameResponses = {
    /**
     * The user upserted.
     */
    200: User;
    201: {
        [key: string]: unknown;
    };
};

export type UpsertUserByUsernameResponse = UpsertUserByUsernameResponses[keyof UpsertUserByUsernameResponses];

export type UpsertUserByEmailData = {
    body: CreateUserDtoWritable;
    path: {
        email: string;
    };
    query?: never;
    url: '/users/{email}/@upsertUserByEmail';
};

export type UpsertUserByEmailResponses = {
    /**
     * The user upserted.
     */
    200: User;
    201: {
        [key: string]: unknown;
    };
};

export type UpsertUserByEmailResponse = UpsertUserByEmailResponses[keyof UpsertUserByEmailResponses];

export type UpsertUserByPhoneData = {
    body: CreateUserDtoWritable;
    path: {
        phone: string;
    };
    query?: never;
    url: '/users/{phone}/@upsertUserByPhone';
};

export type UpsertUserByPhoneResponses = {
    /**
     * The user upserted.
     */
    200: User;
    201: {
        [key: string]: unknown;
    };
};

export type UpsertUserByPhoneResponse = UpsertUserByPhoneResponses[keyof UpsertUserByPhoneResponses];

export type VerifyIdentityData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/users/{userId}/@verifyIdentity';
};

export type VerifyIdentityResponses = {
    /**
     * The user has been verified.
     */
    200: User;
};

export type VerifyIdentityResponse = VerifyIdentityResponses[keyof VerifyIdentityResponses];

export type UpdatePasswordData = {
    body: UpdatePasswordDto;
    path: {
        userId: string;
    };
    query?: never;
    url: '/users/{userId}/@updatePassword';
};

export type UpdatePasswordResponses = {
    204: void;
};

export type UpdatePasswordResponse = UpdatePasswordResponses[keyof UpdatePasswordResponses];

export type AggregateUsersData = {
    body: AggregateUserDto;
    path?: never;
    query?: {
        /**
         * 按 id 筛选
         */
        id?: Array<string>;
        /**
         * 所属命名空间
         */
        ns?: string | Array<string>;
        /**
         * 所属命名空间 start 查询
         */
        ns_start?: string | Array<string>;
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'lastLoginAt' | '-lastLoginAt' | 'expireAt' | '-expireAt';
        /**
         * 名称 模糊查询
         */
        name_like?: string;
        /**
         * 用户名 模糊查询
         */
        username_like?: string;
        /**
         * 昵称 模糊查询
         */
        nickname_like?: string;
        /**
         * 所属命名空间的 tree 查询
         */
        ns_tree?: string;
        /**
         * 过期时间大于该时间
         */
        expireAt_gte?: Date;
        /**
         * 过期时间小于该时间
         */
        expireAt_lte?: Date;
        /**
         * 是否启用
         */
        active?: boolean;
        /**
         * 邮箱
         */
        email?: string;
        /**
         * 团队
         */
        groups?: Array<string>;
        /**
         * 邀请人
         */
        inviter?: string;
        /**
         * 标签
         */
        labels?: Array<string>;
        /**
         * 姓名
         */
        name?: string;
        /**
         * 手机号
         */
        phone?: string;
        /**
         * 注册地区，存地区编号
         */
        registerRegion?: string;
        /**
         * 角色
         */
        roles?: Array<string>;
        /**
         * 状态
         */
        status?: string;
        /**
         * 类型, 登录端
         */
        type?: string;
        /**
         * 用户名
         */
        username?: string;
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
    };
    url: '/users/@aggregate';
};

export type AggregateUsersResponses = {
    /**
     * A paged array of user aggregate results.
     */
    200: Array<UserAggregateResult>;
    201: Array<UserAggregateResult>;
};

export type AggregateUsersResponse = AggregateUsersResponses[keyof AggregateUsersResponses];

export type ListIndustriesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * 返回的层数
         * 默认返回所有层级
         */
        depth?: number;
    };
    url: '/industries';
};

export type ListIndustriesResponses = {
    /**
     * A paged array of region.
     */
    200: Array<Industry>;
};

export type ListIndustriesResponse = ListIndustriesResponses[keyof ListIndustriesResponses];

export type ListRegionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/regions';
};

export type ListRegionsResponses = {
    /**
     * A paged array of region.
     */
    200: Array<Region>;
};

export type ListRegionsResponse = ListRegionsResponses[keyof ListRegionsResponses];

export type ListRolesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * 名称 模糊查询
         */
        name_like?: string;
        /**
         * 名称
         */
        name?: string;
        /**
         * role key
         */
        key?: string;
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
    };
    url: '/roles';
};

export type ListRolesResponses = {
    /**
     * A paged array of roles.
     */
    200: Array<Role>;
};

export type ListRolesResponse = ListRolesResponses[keyof ListRolesResponses];

export type CreateRoleData = {
    body: CreateRoleDto;
    path?: never;
    query?: never;
    url: '/roles';
};

export type CreateRoleResponses = {
    /**
     * The role has been successfully created.
     */
    201: Role;
};

export type CreateRoleResponse = CreateRoleResponses[keyof CreateRoleResponses];

export type GetRoleData = {
    body?: never;
    path: {
        /**
         * Role id or key
         */
        roleIdOrKey: string;
    };
    query?: never;
    url: '/roles/{roleIdOrKey}';
};

export type GetRoleResponses = {
    /**
     * The role with expected id or key.
     */
    200: Role;
};

export type GetRoleResponse = GetRoleResponses[keyof GetRoleResponses];

export type DeleteRoleData = {
    body?: never;
    path: {
        roleId: string;
    };
    query?: never;
    url: '/roles/{roleId}';
};

export type DeleteRoleResponses = {
    /**
     * No content.
     */
    204: void;
};

export type DeleteRoleResponse = DeleteRoleResponses[keyof DeleteRoleResponses];

export type UpdateRoleData = {
    body: UpdateRoleDto;
    path: {
        roleId: string;
    };
    query?: never;
    url: '/roles/{roleId}';
};

export type UpdateRoleResponses = {
    /**
     * The role updated.
     */
    200: Role;
};

export type UpdateRoleResponse = UpdateRoleResponses[keyof UpdateRoleResponses];

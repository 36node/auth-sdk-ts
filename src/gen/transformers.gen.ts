// This file is auto-generated by @hey-api/openapi-ts

import type { BindThirdPartyResponse, CreateCaptchaResponse, CreateEmailRecordResponse, CreateGroupResponse, CreateNamespaceResponse, CreateRoleResponse, CreateSessionResponse, CreateSmsRecordResponse, CreateThirdPartyResponse, CreateUserResponse, GetCaptchaResponse, GetEmailRecordResponse, GetGroupResponse, GetNamespaceResponse, GetRoleResponse, GetSessionByKeyResponse, GetSessionResponse, GetSmsRecordResponse, GetUserResponse, ListCaptchasResponse, ListEmailRecordsResponse, ListGroupsResponse, ListIndustriesResponse, ListNamespacesResponse, ListRolesResponse, ListSessionsResponse, ListSmsRecordsResponse, ListUsersResponse, LoginByEmailResponse, LoginByGithubResponse, LoginByOAuthResponse, LoginByPhoneResponse, LoginResponse, RefreshResponse, RegisterByEmailResponse, RegisterByPhoneResponse, RegisterResponse, SignTokenResponse, UpdateCaptchaResponse, UpdateEmailRecordResponse, UpdateGroupResponse, UpdateNamespaceResponse, UpdateRoleResponse, UpdateSessionResponse, UpdateSmsRecordResponse, UpdateUserResponse, VerifyIdentityResponse } from './types.gen';

export const loginResponseTransformer = async (data: any): Promise<LoginResponse> => {
    data = sessionWithTokenSchemaResponseTransformer(data);
    return data;
};

const sessionWithTokenSchemaResponseTransformer = (data: any) => {
    data.expireAt = new Date(data.expireAt);
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    data.tokenExpireAt = new Date(data.tokenExpireAt);
    return data;
};

export const loginByGithubResponseTransformer = async (data: any): Promise<LoginByGithubResponse> => {
    data = sessionWithTokenSchemaResponseTransformer(data);
    return data;
};

export const loginByOAuthResponseTransformer = async (data: any): Promise<LoginByOAuthResponse> => {
    data = sessionWithTokenSchemaResponseTransformer(data);
    return data;
};

export const loginByEmailResponseTransformer = async (data: any): Promise<LoginByEmailResponse> => {
    data = sessionWithTokenSchemaResponseTransformer(data);
    return data;
};

export const loginByPhoneResponseTransformer = async (data: any): Promise<LoginByPhoneResponse> => {
    data = sessionWithTokenSchemaResponseTransformer(data);
    return data;
};

export const registerResponseTransformer = async (data: any): Promise<RegisterResponse> => {
    data = userSchemaResponseTransformer(data);
    return data;
};

const userSchemaResponseTransformer = (data: any) => {
    if (data.birthday) {
        data.birthday = new Date(data.birthday);
    }
    if (data.identityVerifiedAt) {
        data.identityVerifiedAt = new Date(data.identityVerifiedAt);
    }
    if (data.lastSeenAt) {
        data.lastSeenAt = new Date(data.lastSeenAt);
    }
    if (data.lastLoginAt) {
        data.lastLoginAt = new Date(data.lastLoginAt);
    }
    if (data.expireAt) {
        data.expireAt = new Date(data.expireAt);
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const registerByPhoneResponseTransformer = async (data: any): Promise<RegisterByPhoneResponse> => {
    data = userSchemaResponseTransformer(data);
    return data;
};

export const registerByEmailResponseTransformer = async (data: any): Promise<RegisterByEmailResponse> => {
    data = userSchemaResponseTransformer(data);
    return data;
};

export const signTokenResponseTransformer = async (data: any): Promise<SignTokenResponse> => {
    data = tokenSchemaResponseTransformer(data);
    return data;
};

const tokenSchemaResponseTransformer = (data: any) => {
    data.tokenExpireAt = new Date(data.tokenExpireAt);
    return data;
};

export const refreshResponseTransformer = async (data: any): Promise<RefreshResponse> => {
    data = sessionWithTokenSchemaResponseTransformer(data);
    return data;
};

export const listCaptchasResponseTransformer = async (data: any): Promise<ListCaptchasResponse> => {
    data = data.map((item: any) => {
        return captchaSchemaResponseTransformer(item);
    });
    return data;
};

const captchaSchemaResponseTransformer = (data: any) => {
    data.expireAt = new Date(data.expireAt);
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const createCaptchaResponseTransformer = async (data: any): Promise<CreateCaptchaResponse> => {
    data = captchaSchemaResponseTransformer(data);
    return data;
};

export const getCaptchaResponseTransformer = async (data: any): Promise<GetCaptchaResponse> => {
    data = captchaSchemaResponseTransformer(data);
    return data;
};

export const updateCaptchaResponseTransformer = async (data: any): Promise<UpdateCaptchaResponse> => {
    data = captchaSchemaResponseTransformer(data);
    return data;
};

export const listEmailRecordsResponseTransformer = async (data: any): Promise<ListEmailRecordsResponse> => {
    data = data.map((item: any) => {
        return emailRecordSchemaResponseTransformer(item);
    });
    return data;
};

const emailRecordSchemaResponseTransformer = (data: any) => {
    if (data.sentAt) {
        data.sentAt = new Date(data.sentAt);
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const createEmailRecordResponseTransformer = async (data: any): Promise<CreateEmailRecordResponse> => {
    data = emailRecordSchemaResponseTransformer(data);
    return data;
};

export const getEmailRecordResponseTransformer = async (data: any): Promise<GetEmailRecordResponse> => {
    data = emailRecordSchemaResponseTransformer(data);
    return data;
};

export const updateEmailRecordResponseTransformer = async (data: any): Promise<UpdateEmailRecordResponse> => {
    data = emailRecordSchemaResponseTransformer(data);
    return data;
};

export const listGroupsResponseTransformer = async (data: any): Promise<ListGroupsResponse> => {
    data = data.map((item: any) => {
        return groupSchemaResponseTransformer(item);
    });
    return data;
};

const groupSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const createGroupResponseTransformer = async (data: any): Promise<CreateGroupResponse> => {
    data = groupSchemaResponseTransformer(data);
    return data;
};

export const getGroupResponseTransformer = async (data: any): Promise<GetGroupResponse> => {
    data = groupSchemaResponseTransformer(data);
    return data;
};

export const updateGroupResponseTransformer = async (data: any): Promise<UpdateGroupResponse> => {
    data = groupSchemaResponseTransformer(data);
    return data;
};

export const listNamespacesResponseTransformer = async (data: any): Promise<ListNamespacesResponse> => {
    data = data.map((item: any) => {
        return namespaceSchemaResponseTransformer(item);
    });
    return data;
};

const namespaceSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const createNamespaceResponseTransformer = async (data: any): Promise<CreateNamespaceResponse> => {
    data = namespaceSchemaResponseTransformer(data);
    return data;
};

export const getNamespaceResponseTransformer = async (data: any): Promise<GetNamespaceResponse> => {
    data = namespaceSchemaResponseTransformer(data);
    return data;
};

export const updateNamespaceResponseTransformer = async (data: any): Promise<UpdateNamespaceResponse> => {
    data = namespaceSchemaResponseTransformer(data);
    return data;
};

export const listSessionsResponseTransformer = async (data: any): Promise<ListSessionsResponse> => {
    data = data.map((item: any) => {
        return sessionSchemaResponseTransformer(item);
    });
    return data;
};

const sessionSchemaResponseTransformer = (data: any) => {
    data.expireAt = new Date(data.expireAt);
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const createSessionResponseTransformer = async (data: any): Promise<CreateSessionResponse> => {
    data = sessionSchemaResponseTransformer(data);
    return data;
};

export const getSessionResponseTransformer = async (data: any): Promise<GetSessionResponse> => {
    data = sessionSchemaResponseTransformer(data);
    return data;
};

export const updateSessionResponseTransformer = async (data: any): Promise<UpdateSessionResponse> => {
    data = sessionSchemaResponseTransformer(data);
    return data;
};

export const getSessionByKeyResponseTransformer = async (data: any): Promise<GetSessionByKeyResponse> => {
    data = sessionSchemaResponseTransformer(data);
    return data;
};

export const listSmsRecordsResponseTransformer = async (data: any): Promise<ListSmsRecordsResponse> => {
    data = data.map((item: any) => {
        return smsRecordSchemaResponseTransformer(item);
    });
    return data;
};

const smsRecordSchemaResponseTransformer = (data: any) => {
    if (data.sentAt) {
        data.sentAt = new Date(data.sentAt);
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const createSmsRecordResponseTransformer = async (data: any): Promise<CreateSmsRecordResponse> => {
    data = smsRecordSchemaResponseTransformer(data);
    return data;
};

export const getSmsRecordResponseTransformer = async (data: any): Promise<GetSmsRecordResponse> => {
    data = smsRecordSchemaResponseTransformer(data);
    return data;
};

export const updateSmsRecordResponseTransformer = async (data: any): Promise<UpdateSmsRecordResponse> => {
    data = smsRecordSchemaResponseTransformer(data);
    return data;
};

export const createThirdPartyResponseTransformer = async (data: any): Promise<CreateThirdPartyResponse> => {
    data = thirdPartySchemaResponseTransformer(data);
    return data;
};

const thirdPartySchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const bindThirdPartyResponseTransformer = async (data: any): Promise<BindThirdPartyResponse> => {
    data = thirdPartySchemaResponseTransformer(data);
    return data;
};

export const listUsersResponseTransformer = async (data: any): Promise<ListUsersResponse> => {
    data = data.map((item: any) => {
        return userSchemaResponseTransformer(item);
    });
    return data;
};

export const createUserResponseTransformer = async (data: any): Promise<CreateUserResponse> => {
    data = userSchemaResponseTransformer(data);
    return data;
};

export const getUserResponseTransformer = async (data: any): Promise<GetUserResponse> => {
    data = userSchemaResponseTransformer(data);
    return data;
};

export const updateUserResponseTransformer = async (data: any): Promise<UpdateUserResponse> => {
    data = userSchemaResponseTransformer(data);
    return data;
};

export const verifyIdentityResponseTransformer = async (data: any): Promise<VerifyIdentityResponse> => {
    data = userSchemaResponseTransformer(data);
    return data;
};

export const listIndustriesResponseTransformer = async (data: any): Promise<ListIndustriesResponse> => {
    data = data.map((item: any) => {
        return industrySchemaResponseTransformer(item);
    });
    return data;
};

const industrySchemaResponseTransformer = (data: any) => {
    data.children = data.children.map((item: any) => {
        return industrySchemaResponseTransformer(item);
    });
    return data;
};

export const listRolesResponseTransformer = async (data: any): Promise<ListRolesResponse> => {
    data = data.map((item: any) => {
        return roleSchemaResponseTransformer(item);
    });
    return data;
};

const roleSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const createRoleResponseTransformer = async (data: any): Promise<CreateRoleResponse> => {
    data = roleSchemaResponseTransformer(data);
    return data;
};

export const getRoleResponseTransformer = async (data: any): Promise<GetRoleResponse> => {
    data = roleSchemaResponseTransformer(data);
    return data;
};

export const updateRoleResponseTransformer = async (data: any): Promise<UpdateRoleResponse> => {
    data = roleSchemaResponseTransformer(data);
    return data;
};

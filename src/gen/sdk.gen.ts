// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import { bindThirdPartyResponseTransformer, createCaptchaResponseTransformer, createEmailRecordResponseTransformer, createGroupResponseTransformer, createNamespaceResponseTransformer, createRoleResponseTransformer, createSessionResponseTransformer, createSmsRecordResponseTransformer, createThirdPartyResponseTransformer, createUserResponseTransformer, getCaptchaResponseTransformer, getEmailRecordResponseTransformer, getGroupResponseTransformer, getNamespaceResponseTransformer, getRoleResponseTransformer, getSessionByKeyResponseTransformer, getSessionResponseTransformer, getSmsRecordResponseTransformer, getUserResponseTransformer, listCaptchasResponseTransformer, listEmailRecordsResponseTransformer, listGroupsResponseTransformer, listIndustriesResponseTransformer, listNamespacesResponseTransformer, listRolesResponseTransformer, listSessionsResponseTransformer, listSmsRecordsResponseTransformer, listUsersResponseTransformer, loginByEmailResponseTransformer, loginByGithubResponseTransformer, loginByOAuthResponseTransformer, loginByPhoneResponseTransformer, loginResponseTransformer, refreshResponseTransformer, registerByEmailResponseTransformer, registerByPhoneResponseTransformer, registerResponseTransformer, signTokenResponseTransformer, updateCaptchaResponseTransformer, updateEmailRecordResponseTransformer, updateGroupResponseTransformer, updateNamespaceResponseTransformer, updateRoleResponseTransformer, updateSessionResponseTransformer, updateSmsRecordResponseTransformer, updateUserResponseTransformer, verifyIdentityResponseTransformer } from './transformers.gen';
import type { AggregateUsersData, AggregateUsersResponses, BindThirdPartyData, BindThirdPartyResponses, CleanupData, CleanupResponses, CountUsersData, CountUsersResponses, CreateCaptchaData, CreateCaptchaResponses, CreateEmailRecordData, CreateEmailRecordResponses, CreateGroupData, CreateGroupResponses, CreateNamespaceData, CreateNamespaceResponses, CreateRoleData, CreateRoleResponses, CreateSessionData, CreateSessionResponses, CreateSmsRecordData, CreateSmsRecordResponses, CreateThirdPartyData, CreateThirdPartyResponses, CreateUserData, CreateUserResponses, DeleteCaptchaData, DeleteCaptchaResponses, DeleteEmailRecordData, DeleteEmailRecordResponses, DeleteGroupData, DeleteGroupResponses, DeleteNamespaceData, DeleteNamespaceResponses, DeleteRoleData, DeleteRoleResponses, DeleteSessionData, DeleteSessionResponses, DeleteSmsRecordData, DeleteSmsRecordResponses, DeleteUserData, DeleteUserResponses, GetAuthorizerData, GetAuthorizerResponses, GetCaptchaData, GetCaptchaResponses, GetEmailRecordData, GetEmailRecordResponses, GetGroupData, GetGroupResponses, GetNamespaceData, GetNamespaceResponses, GetRoleData, GetRoleResponses, GetSessionByKeyData, GetSessionByKeyResponses, GetSessionData, GetSessionResponses, GetSmsRecordData, GetSmsRecordResponses, GetThirdPartyByTidData, GetThirdPartyByTidResponses, GetThirdPartyByUidData, GetThirdPartyByUidResponses, GetThirdPartyData, GetThirdPartyResponses, GetUserData, GetUserResponses, HelloData, HelloResponses, ListCaptchasData, ListCaptchasResponses, ListEmailRecordsData, ListEmailRecordsResponses, ListGroupsData, ListGroupsResponses, ListIndustriesData, ListIndustriesResponses, ListNamespacesData, ListNamespacesResponses, ListRegionsData, ListRegionsResponses, ListRolesData, ListRolesResponses, ListSessionsData, ListSessionsResponses, ListSmsRecordsData, ListSmsRecordsResponses, ListThirdPartyData, ListThirdPartyResponses, ListUsersData, ListUsersResponses, LoginByEmailData, LoginByEmailResponses, LoginByGithubData, LoginByGithubResponses, LoginByOAuthData, LoginByOAuthResponses, LoginByPhoneData, LoginByPhoneResponses, LoginData, LoginResponses, LogoutData, LogoutResponses, RefreshData, RefreshResponses, RegisterByEmailData, RegisterByEmailResponses, RegisterByPhoneData, RegisterByPhoneResponses, RegisterData, RegisterResponses, ResetPasswordByEmailData, ResetPasswordByEmailResponses, ResetPasswordByPhoneData, ResetPasswordByPhoneResponses, SendEmailData, SendEmailResponses, SendSmsData, SendSmsResponses, SignTokenData, SignTokenResponses, UpdateCaptchaData, UpdateCaptchaResponses, UpdateEmailRecordData, UpdateEmailRecordResponses, UpdateGroupData, UpdateGroupResponses, UpdateNamespaceData, UpdateNamespaceResponses, UpdatePasswordData, UpdatePasswordResponses, UpdateRoleData, UpdateRoleResponses, UpdateSessionData, UpdateSessionResponses, UpdateSmsRecordData, UpdateSmsRecordResponses, UpdateThirdPartyData, UpdateThirdPartyResponses, UpdateUserData, UpdateUserResponses, UpsertGroupByNameData, UpsertGroupByNameResponses, UpsertUserByEmailData, UpsertUserByEmailResponses, UpsertUserByEmployeeIdData, UpsertUserByEmployeeIdResponses, UpsertUserByPhoneData, UpsertUserByPhoneResponses, UpsertUserByUsernameData, UpsertUserByUsernameResponses, VerifyCaptchaData, VerifyCaptchaResponses, VerifyIdentityData, VerifyIdentityResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * health check
 */
export const hello = <ThrowOnError extends boolean = true>(options?: Options<HelloData, ThrowOnError>) => {
    return (options?.client ?? client).get<HelloResponses, unknown, ThrowOnError>({
        url: '/hello',
        ...options
    });
};

/**
 * clearnup all data
 */
export const cleanup = <ThrowOnError extends boolean = true>(options?: Options<CleanupData, ThrowOnError>) => {
    return (options?.client ?? client).get<CleanupResponses, unknown, ThrowOnError>({
        url: '/cleanup',
        ...options
    });
};

/**
 * login with username/phone/email and password
 */
export const login = <ThrowOnError extends boolean = true>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginResponses, unknown, ThrowOnError>({
        responseTransformer: loginResponseTransformer,
        url: '/auth/@login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAuthorizer = <ThrowOnError extends boolean = true>(options: Options<GetAuthorizerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAuthorizerResponses, unknown, ThrowOnError>({
        url: '/auth/authorizer',
        ...options
    });
};

/**
 * login by Github
 */
export const loginByGithub = <ThrowOnError extends boolean = true>(options: Options<LoginByGithubData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginByGithubResponses, unknown, ThrowOnError>({
        responseTransformer: loginByGithubResponseTransformer,
        url: '/auth/@loginByGithub',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * login by OAuth
 */
export const loginByOAuth = <ThrowOnError extends boolean = true>(options: Options<LoginByOAuthData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginByOAuthResponses, unknown, ThrowOnError>({
        responseTransformer: loginByOAuthResponseTransformer,
        url: '/auth/@loginByOAuth',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * login by email and code
 */
export const loginByEmail = <ThrowOnError extends boolean = true>(options: Options<LoginByEmailData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginByEmailResponses, unknown, ThrowOnError>({
        responseTransformer: loginByEmailResponseTransformer,
        url: '/auth/@loginByEmail',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * login with phone and code
 */
export const loginByPhone = <ThrowOnError extends boolean = true>(options: Options<LoginByPhoneData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginByPhoneResponses, unknown, ThrowOnError>({
        responseTransformer: loginByPhoneResponseTransformer,
        url: '/auth/@loginByPhone',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * logout
 */
export const logout = <ThrowOnError extends boolean = true>(options: Options<LogoutData, ThrowOnError>) => {
    return (options.client ?? client).post<LogoutResponses, unknown, ThrowOnError>({
        url: '/auth/@logout',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * register with username and password
 */
export const register = <ThrowOnError extends boolean = true>(options: Options<RegisterData, ThrowOnError>) => {
    return (options.client ?? client).post<RegisterResponses, unknown, ThrowOnError>({
        responseTransformer: registerResponseTransformer,
        url: '/auth/@register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * register with phone and code
 */
export const registerByPhone = <ThrowOnError extends boolean = true>(options: Options<RegisterByPhoneData, ThrowOnError>) => {
    return (options.client ?? client).post<RegisterByPhoneResponses, unknown, ThrowOnError>({
        responseTransformer: registerByPhoneResponseTransformer,
        url: '/auth/@registerByPhone',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * register with email and code
 */
export const registerByEmail = <ThrowOnError extends boolean = true>(options: Options<RegisterByEmailData, ThrowOnError>) => {
    return (options.client ?? client).post<RegisterByEmailResponses, unknown, ThrowOnError>({
        responseTransformer: registerByEmailResponseTransformer,
        url: '/auth/@registerByEmail',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * sign token
 * 为用户签发一个一次性的 token 无法 refresh
 */
export const signToken = <ThrowOnError extends boolean = true>(options: Options<SignTokenData, ThrowOnError>) => {
    return (options.client ?? client).post<SignTokenResponses, unknown, ThrowOnError>({
        responseTransformer: signTokenResponseTransformer,
        url: '/auth/@signToken',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * refresh
 */
export const refresh = <ThrowOnError extends boolean = true>(options: Options<RefreshData, ThrowOnError>) => {
    return (options.client ?? client).post<RefreshResponses, unknown, ThrowOnError>({
        responseTransformer: refreshResponseTransformer,
        url: '/auth/@refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset password by phone
 */
export const resetPasswordByPhone = <ThrowOnError extends boolean = true>(options: Options<ResetPasswordByPhoneData, ThrowOnError>) => {
    return (options.client ?? client).post<ResetPasswordByPhoneResponses, unknown, ThrowOnError>({
        url: '/auth/@resetPasswordByPhone',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset password by email
 */
export const resetPasswordByEmail = <ThrowOnError extends boolean = true>(options: Options<ResetPasswordByEmailData, ThrowOnError>) => {
    return (options.client ?? client).post<ResetPasswordByEmailResponses, unknown, ThrowOnError>({
        url: '/auth/@resetPasswordByEmail',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List captchas
 */
export const listCaptchas = <ThrowOnError extends boolean = true>(options: Options<ListCaptchasData, ThrowOnError>) => {
    return (options.client ?? client).get<ListCaptchasResponses, unknown, ThrowOnError>({
        responseTransformer: listCaptchasResponseTransformer,
        url: '/captchas',
        ...options
    });
};

/**
 * Create captcha
 */
export const createCaptcha = <ThrowOnError extends boolean = true>(options: Options<CreateCaptchaData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateCaptchaResponses, unknown, ThrowOnError>({
        responseTransformer: createCaptchaResponseTransformer,
        url: '/captchas',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete captcha
 */
export const deleteCaptcha = <ThrowOnError extends boolean = true>(options: Options<DeleteCaptchaData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteCaptchaResponses, unknown, ThrowOnError>({
        url: '/captchas/{captchaId}',
        ...options
    });
};

/**
 * Find captcha by id
 */
export const getCaptcha = <ThrowOnError extends boolean = true>(options: Options<GetCaptchaData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCaptchaResponses, unknown, ThrowOnError>({
        responseTransformer: getCaptchaResponseTransformer,
        url: '/captchas/{captchaId}',
        ...options
    });
};

/**
 * Update captcha
 */
export const updateCaptcha = <ThrowOnError extends boolean = true>(options: Options<UpdateCaptchaData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateCaptchaResponses, unknown, ThrowOnError>({
        responseTransformer: updateCaptchaResponseTransformer,
        url: '/captchas/{captchaId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * verify captcha
 */
export const verifyCaptcha = <ThrowOnError extends boolean = true>(options: Options<VerifyCaptchaData, ThrowOnError>) => {
    return (options.client ?? client).post<VerifyCaptchaResponses, unknown, ThrowOnError>({
        url: '/captchas/@verifyCaptcha',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Send plain text email
 */
export const sendEmail = <ThrowOnError extends boolean = true>(options: Options<SendEmailData, ThrowOnError>) => {
    return (options.client ?? client).post<SendEmailResponses, unknown, ThrowOnError>({
        url: '/email/@sendEmail',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List email records
 */
export const listEmailRecords = <ThrowOnError extends boolean = true>(options: Options<ListEmailRecordsData, ThrowOnError>) => {
    return (options.client ?? client).get<ListEmailRecordsResponses, unknown, ThrowOnError>({
        responseTransformer: listEmailRecordsResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/email/records',
        ...options
    });
};

/**
 * Create email record
 */
export const createEmailRecord = <ThrowOnError extends boolean = true>(options: Options<CreateEmailRecordData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateEmailRecordResponses, unknown, ThrowOnError>({
        responseTransformer: createEmailRecordResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/email/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete email record
 */
export const deleteEmailRecord = <ThrowOnError extends boolean = true>(options: Options<DeleteEmailRecordData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteEmailRecordResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/email/records/{emailRecordId}',
        ...options
    });
};

/**
 * Find email record by id
 */
export const getEmailRecord = <ThrowOnError extends boolean = true>(options: Options<GetEmailRecordData, ThrowOnError>) => {
    return (options.client ?? client).get<GetEmailRecordResponses, unknown, ThrowOnError>({
        responseTransformer: getEmailRecordResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/email/records/{emailRecordId}',
        ...options
    });
};

/**
 * Update email record
 */
export const updateEmailRecord = <ThrowOnError extends boolean = true>(options: Options<UpdateEmailRecordData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateEmailRecordResponses, unknown, ThrowOnError>({
        responseTransformer: updateEmailRecordResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/email/records/{emailRecordId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List groups
 */
export const listGroups = <ThrowOnError extends boolean = true>(options: Options<ListGroupsData, ThrowOnError>) => {
    return (options.client ?? client).get<ListGroupsResponses, unknown, ThrowOnError>({
        responseTransformer: listGroupsResponseTransformer,
        url: '/groups',
        ...options
    });
};

/**
 * Create group
 */
export const createGroup = <ThrowOnError extends boolean = true>(options: Options<CreateGroupData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateGroupResponses, unknown, ThrowOnError>({
        responseTransformer: createGroupResponseTransformer,
        url: '/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Find group by id or name
 */
export const getGroup = <ThrowOnError extends boolean = true>(options: Options<GetGroupData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGroupResponses, unknown, ThrowOnError>({
        responseTransformer: getGroupResponseTransformer,
        url: '/groups/{groupIdOrName}',
        ...options
    });
};

/**
 * Delete group
 */
export const deleteGroup = <ThrowOnError extends boolean = true>(options: Options<DeleteGroupData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteGroupResponses, unknown, ThrowOnError>({
        url: '/groups/{groupId}',
        ...options
    });
};

/**
 * Update group
 */
export const updateGroup = <ThrowOnError extends boolean = true>(options: Options<UpdateGroupData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateGroupResponses, unknown, ThrowOnError>({
        responseTransformer: updateGroupResponseTransformer,
        url: '/groups/{groupId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 根据 groupName 创建 group
 */
export const upsertGroupByName = <ThrowOnError extends boolean = true>(options: Options<UpsertGroupByNameData, ThrowOnError>) => {
    return (options.client ?? client).post<UpsertGroupByNameResponses, unknown, ThrowOnError>({
        url: '/groups/{groupName}/@upsertGroupByName',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List namespaces
 */
export const listNamespaces = <ThrowOnError extends boolean = true>(options: Options<ListNamespacesData, ThrowOnError>) => {
    return (options.client ?? client).get<ListNamespacesResponses, unknown, ThrowOnError>({
        responseTransformer: listNamespacesResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/namespaces',
        ...options
    });
};

/**
 * Create namespace
 */
export const createNamespace = <ThrowOnError extends boolean = true>(options: Options<CreateNamespaceData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateNamespaceResponses, unknown, ThrowOnError>({
        responseTransformer: createNamespaceResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/namespaces',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Find namespace by id or key
 */
export const getNamespace = <ThrowOnError extends boolean = true>(options: Options<GetNamespaceData, ThrowOnError>) => {
    return (options.client ?? client).get<GetNamespaceResponses, unknown, ThrowOnError>({
        responseTransformer: getNamespaceResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/namespaces/{namespaceIdOrKey}',
        ...options
    });
};

/**
 * Update namespace
 */
export const updateNamespace = <ThrowOnError extends boolean = true>(options: Options<UpdateNamespaceData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateNamespaceResponses, unknown, ThrowOnError>({
        responseTransformer: updateNamespaceResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/namespaces/{namespaceIdOrKey}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete namespace
 */
export const deleteNamespace = <ThrowOnError extends boolean = true>(options: Options<DeleteNamespaceData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteNamespaceResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/namespaces/{namespaceId}',
        ...options
    });
};

/**
 * List sessions
 */
export const listSessions = <ThrowOnError extends boolean = true>(options: Options<ListSessionsData, ThrowOnError>) => {
    return (options.client ?? client).get<ListSessionsResponses, unknown, ThrowOnError>({
        responseTransformer: listSessionsResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/sessions',
        ...options
    });
};

/**
 * Create session
 */
export const createSession = <ThrowOnError extends boolean = true>(options: Options<CreateSessionData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateSessionResponses, unknown, ThrowOnError>({
        responseTransformer: createSessionResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/sessions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete session
 */
export const deleteSession = <ThrowOnError extends boolean = true>(options: Options<DeleteSessionData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteSessionResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/sessions/{sessionId}',
        ...options
    });
};

/**
 * Find session by id
 */
export const getSession = <ThrowOnError extends boolean = true>(options: Options<GetSessionData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSessionResponses, unknown, ThrowOnError>({
        responseTransformer: getSessionResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/sessions/{sessionId}',
        ...options
    });
};

/**
 * Update session
 */
export const updateSession = <ThrowOnError extends boolean = true>(options: Options<UpdateSessionData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateSessionResponses, unknown, ThrowOnError>({
        responseTransformer: updateSessionResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/sessions/{sessionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Find session by key
 */
export const getSessionByKey = <ThrowOnError extends boolean = true>(options: Options<GetSessionByKeyData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSessionByKeyResponses, unknown, ThrowOnError>({
        responseTransformer: getSessionByKeyResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/sessions/byKey/{key}',
        ...options
    });
};

/**
 * Send sms
 */
export const sendSms = <ThrowOnError extends boolean = true>(options: Options<SendSmsData, ThrowOnError>) => {
    return (options.client ?? client).post<SendSmsResponses, unknown, ThrowOnError>({
        url: '/sms/@sendSms',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List sms records
 */
export const listSmsRecords = <ThrowOnError extends boolean = true>(options: Options<ListSmsRecordsData, ThrowOnError>) => {
    return (options.client ?? client).get<ListSmsRecordsResponses, unknown, ThrowOnError>({
        responseTransformer: listSmsRecordsResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/sms/records',
        ...options
    });
};

/**
 * Create sms record
 */
export const createSmsRecord = <ThrowOnError extends boolean = true>(options: Options<CreateSmsRecordData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateSmsRecordResponses, unknown, ThrowOnError>({
        responseTransformer: createSmsRecordResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/sms/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete sms record
 */
export const deleteSmsRecord = <ThrowOnError extends boolean = true>(options: Options<DeleteSmsRecordData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteSmsRecordResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/sms/records/{smsRecordId}',
        ...options
    });
};

/**
 * Find sms record by id
 */
export const getSmsRecord = <ThrowOnError extends boolean = true>(options: Options<GetSmsRecordData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSmsRecordResponses, unknown, ThrowOnError>({
        responseTransformer: getSmsRecordResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/sms/records/{smsRecordId}',
        ...options
    });
};

/**
 * Update sms record
 */
export const updateSmsRecord = <ThrowOnError extends boolean = true>(options: Options<UpdateSmsRecordData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateSmsRecordResponses, unknown, ThrowOnError>({
        responseTransformer: updateSmsRecordResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/sms/records/{smsRecordId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * list third party
 */
export const listThirdParty = <ThrowOnError extends boolean = true>(options: Options<ListThirdPartyData, ThrowOnError>) => {
    return (options.client ?? client).get<ListThirdPartyResponses, unknown, ThrowOnError>({
        url: '/third-parties',
        ...options
    });
};

/**
 * create third party
 */
export const createThirdParty = <ThrowOnError extends boolean = true>(options: Options<CreateThirdPartyData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateThirdPartyResponses, unknown, ThrowOnError>({
        responseTransformer: createThirdPartyResponseTransformer,
        url: '/third-parties',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * get third party
 */
export const getThirdParty = <ThrowOnError extends boolean = true>(options: Options<GetThirdPartyData, ThrowOnError>) => {
    return (options.client ?? client).get<GetThirdPartyResponses, unknown, ThrowOnError>({
        url: '/third-parties/{id}',
        ...options
    });
};

/**
 * update third party
 */
export const updateThirdParty = <ThrowOnError extends boolean = true>(options: Options<UpdateThirdPartyData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateThirdPartyResponses, unknown, ThrowOnError>({
        url: '/third-parties/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * get third party by uid
 */
export const getThirdPartyByUid = <ThrowOnError extends boolean = true>(options: Options<GetThirdPartyByUidData, ThrowOnError>) => {
    return (options.client ?? client).get<GetThirdPartyByUidResponses, unknown, ThrowOnError>({
        url: '/third-parties/source/{source}/uid/{uid}',
        ...options
    });
};

/**
 * get third party by tid
 */
export const getThirdPartyByTid = <ThrowOnError extends boolean = true>(options: Options<GetThirdPartyByTidData, ThrowOnError>) => {
    return (options.client ?? client).get<GetThirdPartyByTidResponses, unknown, ThrowOnError>({
        url: '/third-parties/source/{source}/tid/{tid}',
        ...options
    });
};

/**
 * bind third party
 */
export const bindThirdParty = <ThrowOnError extends boolean = true>(options: Options<BindThirdPartyData, ThrowOnError>) => {
    return (options.client ?? client).post<BindThirdPartyResponses, unknown, ThrowOnError>({
        responseTransformer: bindThirdPartyResponseTransformer,
        url: '/third-parties/@bind',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List users
 */
export const listUsers = <ThrowOnError extends boolean = true>(options: Options<ListUsersData, ThrowOnError>) => {
    return (options.client ?? client).get<ListUsersResponses, unknown, ThrowOnError>({
        responseTransformer: listUsersResponseTransformer,
        url: '/users',
        ...options
    });
};

/**
 * Create user
 */
export const createUser = <ThrowOnError extends boolean = true>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateUserResponses, unknown, ThrowOnError>({
        responseTransformer: createUserResponseTransformer,
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Count users
 */
export const countUsers = <ThrowOnError extends boolean = true>(options: Options<CountUsersData, ThrowOnError>) => {
    return (options.client ?? client).post<CountUsersResponses, unknown, ThrowOnError>({
        url: '/users/@countUsers',
        ...options
    });
};

/**
 * Delete user
 */
export const deleteUser = <ThrowOnError extends boolean = true>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteUserResponses, unknown, ThrowOnError>({
        url: '/users/{userId}',
        ...options
    });
};

/**
 * Find user
 */
export const getUser = <ThrowOnError extends boolean = true>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserResponses, unknown, ThrowOnError>({
        responseTransformer: getUserResponseTransformer,
        url: '/users/{userId}',
        ...options
    });
};

/**
 * Update user
 */
export const updateUser = <ThrowOnError extends boolean = true>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateUserResponses, unknown, ThrowOnError>({
        responseTransformer: updateUserResponseTransformer,
        url: '/users/{userId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upsert user by employeeId
 */
export const upsertUserByEmployeeId = <ThrowOnError extends boolean = true>(options: Options<UpsertUserByEmployeeIdData, ThrowOnError>) => {
    return (options.client ?? client).post<UpsertUserByEmployeeIdResponses, unknown, ThrowOnError>({
        url: '/users/{employeeId}/@upsertUserByEmployeeId',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upsert user by username
 */
export const upsertUserByUsername = <ThrowOnError extends boolean = true>(options: Options<UpsertUserByUsernameData, ThrowOnError>) => {
    return (options.client ?? client).post<UpsertUserByUsernameResponses, unknown, ThrowOnError>({
        url: '/users/{username}/@upsertUserByUsername',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upsert user by email
 */
export const upsertUserByEmail = <ThrowOnError extends boolean = true>(options: Options<UpsertUserByEmailData, ThrowOnError>) => {
    return (options.client ?? client).post<UpsertUserByEmailResponses, unknown, ThrowOnError>({
        url: '/users/{email}/@upsertUserByEmail',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upsert user by phone
 */
export const upsertUserByPhone = <ThrowOnError extends boolean = true>(options: Options<UpsertUserByPhoneData, ThrowOnError>) => {
    return (options.client ?? client).post<UpsertUserByPhoneResponses, unknown, ThrowOnError>({
        url: '/users/{phone}/@upsertUserByPhone',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify identity
 */
export const verifyIdentity = <ThrowOnError extends boolean = true>(options: Options<VerifyIdentityData, ThrowOnError>) => {
    return (options.client ?? client).post<VerifyIdentityResponses, unknown, ThrowOnError>({
        responseTransformer: verifyIdentityResponseTransformer,
        url: '/users/{userId}/@verifyIdentity',
        ...options
    });
};

/**
 * Update password
 */
export const updatePassword = <ThrowOnError extends boolean = true>(options: Options<UpdatePasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdatePasswordResponses, unknown, ThrowOnError>({
        url: '/users/{userId}/@updatePassword',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Aggregate user
 */
export const aggregateUsers = <ThrowOnError extends boolean = true>(options: Options<AggregateUsersData, ThrowOnError>) => {
    return (options.client ?? client).post<AggregateUsersResponses, unknown, ThrowOnError>({
        url: '/users/@aggregate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Industries
 */
export const listIndustries = <ThrowOnError extends boolean = true>(options: Options<ListIndustriesData, ThrowOnError>) => {
    return (options.client ?? client).get<ListIndustriesResponses, unknown, ThrowOnError>({
        responseTransformer: listIndustriesResponseTransformer,
        url: '/industries',
        ...options
    });
};

/**
 * List Regions
 */
export const listRegions = <ThrowOnError extends boolean = true>(options?: Options<ListRegionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListRegionsResponses, unknown, ThrowOnError>({
        url: '/regions',
        ...options
    });
};

/**
 * List roles
 */
export const listRoles = <ThrowOnError extends boolean = true>(options?: Options<ListRolesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListRolesResponses, unknown, ThrowOnError>({
        responseTransformer: listRolesResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/roles',
        ...options
    });
};

/**
 * Create role
 */
export const createRole = <ThrowOnError extends boolean = true>(options: Options<CreateRoleData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateRoleResponses, unknown, ThrowOnError>({
        responseTransformer: createRoleResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Find role by id or key
 */
export const getRole = <ThrowOnError extends boolean = true>(options: Options<GetRoleData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRoleResponses, unknown, ThrowOnError>({
        responseTransformer: getRoleResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/roles/{roleIdOrKey}',
        ...options
    });
};

/**
 * Delete role
 */
export const deleteRole = <ThrowOnError extends boolean = true>(options: Options<DeleteRoleData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/roles/{roleId}',
        ...options
    });
};

/**
 * Update role
 */
export const updateRole = <ThrowOnError extends boolean = true>(options: Options<UpdateRoleData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateRoleResponses, unknown, ThrowOnError>({
        responseTransformer: updateRoleResponseTransformer,
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/roles/{roleId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

// This file is auto-generated by @hey-api/openapi-ts

export type AppResult = {
    message: string;
};

export type bindThirdPartyDto = {
    username: string;
    password: string;
    source: 'github' | 'wechat';
    login: string;
};

export type source = 'github' | 'wechat';

export type Captcha = {
    /**
     * 验证码
     */
    code: string;
    /**
     * 过期时间
     */
    expireAt: Date;
    /**
     * key
     */
    key: string;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type CreateCaptchaDto = {
    /**
     * 验证码
     */
    code?: string;
    /**
     * 过期时间
     */
    expireAt?: Date;
    /**
     * key
     */
    key: string;
};

export type CreateEmailRecordDto = {
    status: EmailStatus;
    /**
     * 发件者
     */
    from: string;
    /**
     * 收件者
     */
    to: string;
    /**
     * 主题
     */
    subject: string;
    /**
     * 内容
     */
    content: string;
    /**
     * 发送时间
     */
    sentAt?: Date;
};

export type CreateGroupDto = {
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 名称
     */
    name: string;
    /**
     * 权限
     */
    permissions?: Array<(string)>;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 人数
     */
    userCount?: number;
};

export type CreateNamespaceDto = {
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 描述
     */
    desc?: string;
    /**
     * 标签
     */
    labels?: Array<(string)>;
    /**
     * 名称
     */
    name: string;
    /**
     * 命名空间的 key
     *
     * 允许的字符 ^[a-zA-Z][a-zA-Z0-9._/-]{0,30}$
     */
    key: string;
    /**
     * 所属的 namespace
     */
    ns?: string;
    /**
     * 权限
     */
    permissions?: Array<(string)>;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 默认密码
     */
    defaultPassword?: string;
    /**
     * 是否可导出
     */
    exportable?: boolean;
    /**
     * 人数
     */
    userCount?: number;
};

export type CreateRoleDto = {
    /**
     * 权限
     */
    permissions?: Array<(string)>;
    /**
     * role key
     */
    key: string;
    /**
     * 名称
     */
    name: string;
};

export type CreateSessionDto = {
    /**
     * 会话过期时间
     */
    refreshTokenExpireAt: Date;
    /**
     * 用户或第三方用户
     * "user|123456789"
     * "github|123456789"
     * "client|abcddfe"
     */
    subject: string;
    /**
     * 受限权限，如果提供这个字段，会覆盖用户的权限
     */
    permissions?: Array<(string)>;
    /**
     * 用户所属的组
     */
    groups?: Array<(string)>;
    /**
     * user ns
     */
    ns?: string;
    /**
     * 类型，登录端
     */
    type?: string;
};

export type CreateSmsRecordDto = {
    status: SmsStatus;
    /**
     * 手机号
     */
    phone: string;
    /**
     * 签名
     */
    sign: string;
    /**
     * 模板
     */
    template: string;
    /**
     * 参数
     */
    params?: string;
    /**
     * 发送时间
     */
    sentAt?: Date;
};

export type createThirdPartyDto = {
    source: ThirdPartySource;
    /**
     * 第三方登录 id
     */
    login: string;
    /**
     * 第三方登录 accessToken
     */
    accessToken: string;
    avatar?: string;
    name?: string;
    /**
     * 关联uid
     */
    uid?: string;
};

export type CreateUserDto = {
    /**
     * 密码
     */
    password?: string;
    /**
     * 是否有密码
     */
    readonly hasPassword?: boolean;
    /**
     * 头像
     */
    avatar?: string;
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 邮箱
     */
    email?: string;
    /**
     * 姓名
     */
    name?: string;
    identity?: string;
    /**
     * 实名认证时间
     */
    identityVerifiedAt?: Date;
    /**
     * 实名认证是否通过
     */
    identityVerified?: boolean;
    /**
     * 简介
     */
    intro?: string;
    /**
     * 使用语言
     */
    language?: string;
    /**
     * 等级
     */
    level?: number;
    /**
     * 昵称
     */
    nickname?: string;
    /**
     * 所属命名空间
     */
    ns?: string;
    /**
     * 手机号
     */
    phone?: string;
    /**
     * 注册地区，存地区编号
     */
    registerRegion?: string;
    /**
     * 角色
     */
    roles?: Array<(string)>;
    /**
     * 用户名
     */
    username?: string;
    /**
     * 员工编号
     */
    employeeId?: string;
    /**
     * 权限
     */
    permissions?: Array<(string)>;
    /**
     * 团队
     */
    groups?: Array<(string)>;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 状态
     */
    status?: string;
    /**
     * 过期时间
     */
    expireAt?: Date;
    /**
     * 类型, 登录端
     */
    type?: string;
};

export type EmailRecord = {
    status: EmailStatus;
    /**
     * 发件者
     */
    from: string;
    /**
     * 收件者
     */
    to: string;
    /**
     * 主题
     */
    subject: string;
    /**
     * 内容
     */
    content: string;
    /**
     * 发送时间
     */
    sentAt?: Date;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

/**
 * 发送状态
 */
export type EmailStatus = 'pending' | 'sent';

export type GithubDto = {
    code: string;
};

export type Group = {
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 名称
     */
    name: string;
    /**
     * 权限
     */
    permissions?: Array<(string)>;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 人数
     */
    userCount?: number;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type HealthCheckResult = {
    message: string;
};

export type Industry = {
    /**
     * 编码
     */
    code: string;
    /**
     * 名称
     */
    name: string;
    /**
     * 子集
     */
    children: Array<Industry>;
};

export type LoginByEmailDto = {
    /**
     * 邮箱
     */
    email: string;
    /**
     * 验证码 key
     */
    key: string;
    /**
     * 验证码 code
     */
    code: string;
};

export type LoginByPhoneDto = {
    /**
     * 手机号
     */
    phone: string;
    /**
     * 验证码 key
     */
    key: string;
    /**
     * 验证码 code
     */
    code: string;
};

export type LoginDto = {
    /**
     * 可以是 username/phone/Email
     */
    login: string;
    /**
     * 密码
     */
    password: string;
};

export type LogoutDto = {
    /**
     * session refreshToken
     */
    refreshToken: string;
};

export type Namespace = {
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 描述
     */
    desc?: string;
    /**
     * 标签
     */
    labels?: Array<(string)>;
    /**
     * 名称
     */
    name: string;
    /**
     * 命名空间的 key
     *
     * 允许的字符 ^[a-zA-Z][a-zA-Z0-9._/-]{0,30}$
     */
    key: string;
    /**
     * 所属的 namespace
     */
    ns?: string;
    /**
     * 权限
     */
    permissions?: Array<(string)>;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 默认密码
     */
    defaultPassword?: string;
    /**
     * 是否可导出
     */
    exportable?: boolean;
    /**
     * 人数
     */
    userCount?: number;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type RefreshTokenDto = {
    /**
     * user id
     */
    refreshToken: string;
};

export type Region = {
    /**
     * 缩写
     */
    code: string;
    /**
     * 中文名称
     */
    nameZh: string;
    /**
     * 中文拼音
     */
    namePinyin: string;
    /**
     * 英文名称
     */
    nameEn: string;
    /**
     * 电话前缀
     */
    dialingPrefix: string;
};

export type RegisterByEmailDto = {
    /**
     * 邮箱
     */
    email: string;
    /**
     * 验证码 key
     */
    key: string;
    /**
     * 验证码 code
     */
    code: string;
    /**
     * 命名空间
     */
    ns?: string;
};

export type RegisterbyPhoneDto = {
    /**
     * 手机号
     */
    phone: string;
    /**
     * 验证码 key
     */
    key: string;
    /**
     * 验证码 code
     */
    code: string;
    /**
     * 命名空间
     */
    ns?: string;
};

export type RegisterDto = {
    /**
     * 用户名
     */
    username: string;
    /**
     * 密码
     */
    password: string;
    /**
     * 命名空间
     */
    ns?: string;
};

export type ResetPasswordByEmailDto = {
    /**
     * 手机号
     */
    email: string;
    /**
     * 验证码 key
     */
    key: string;
    /**
     * 验证码 code
     */
    code: string;
    /**
     * 密码
     */
    password: string;
};

export type ResetPasswordByPhoneDto = {
    /**
     * 手机号
     */
    phone: string;
    /**
     * 验证码 key
     */
    key: string;
    /**
     * 验证码 code
     */
    code: string;
    /**
     * 密码
     */
    password: string;
};

export type Role = {
    /**
     * role key
     */
    key: string;
    /**
     * 名称
     */
    name: string;
    /**
     * 权限
     */
    permissions: Array<(string)>;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type SendEmailDto = {
    from: string;
    to: string;
    subject: string;
    content: string;
};

export type SendSmsDto = {
    phone: string;
    sign: string;
    template: string;
    params?: {
        [key: string]: unknown;
    };
};

export type Session = {
    /**
     * 会话过期时间
     */
    refreshTokenExpireAt: Date;
    /**
     * refresh token
     */
    refreshToken: string;
    /**
     * 用户或第三方用户
     * "user|123456789"
     * "github|123456789"
     * "client|abcddfe"
     */
    subject: string;
    /**
     * 受限权限，如果提供这个字段，会覆盖用户的权限
     */
    permissions?: Array<(string)>;
    /**
     * 用户所属的组
     */
    groups?: Array<(string)>;
    /**
     * user ns
     */
    ns?: string;
    /**
     * 类型，登录端
     */
    type?: string;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type SessionWithToken = {
    /**
     * 会话过期时间
     */
    refreshTokenExpireAt: Date;
    /**
     * refresh token
     */
    refreshToken: string;
    /**
     * 用户或第三方用户
     * "user|123456789"
     * "github|123456789"
     * "client|abcddfe"
     */
    subject: string;
    /**
     * 受限权限，如果提供这个字段，会覆盖用户的权限
     */
    permissions?: Array<(string)>;
    /**
     * 用户所属的组
     */
    groups?: Array<(string)>;
    /**
     * user ns
     */
    ns?: string;
    /**
     * 类型，登录端
     */
    type?: string;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
    /**
     * token
     */
    token: string;
    /**
     * token 过期时间
     */
    tokenExpireAt: Date;
};

export type SignTokenDto = {
    /**
     * short time span string
     *
     * refs: https://github.com/vercel/ms
     *
     * eg: "2 days", "10h", "7d", "120s", "2.5 hrs", "2h", "1m", "5s", "1y", "100", "1y1m1d"
     *
     * m => minute
     * h => hour
     * d => day
     * w => week
     * M => month
     * y => year
     * s => second
     * ms => millisecond
     * 无单位 => millisecond
     */
    expiresIn: string;
    /**
     * 用户 id
     */
    uid: string;
    /**
     * 受限权限
     */
    permissions?: Array<(string)>;
};

export type SmsRecord = {
    status: SmsStatus;
    /**
     * 手机号
     */
    phone: string;
    /**
     * 签名
     */
    sign: string;
    /**
     * 模板
     */
    template: string;
    /**
     * 参数
     */
    params?: string;
    /**
     * 发送时间
     */
    sentAt?: Date;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

/**
 * 发送状态
 */
export type SmsStatus = 'pending' | 'sent';

export type ThirdParty = {
    source: ThirdPartySource;
    /**
     * 第三方登录 id
     */
    login: string;
    /**
     * 第三方登录 accessToken
     */
    accessToken: string;
    avatar?: string;
    name?: string;
    /**
     * 关联uid
     */
    uid?: string;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

/**
 * 第三方登录来源
 */
export type ThirdPartySource = 'github' | 'wechat';

export type Token = {
    /**
     * token
     */
    token: string;
    /**
     * token 过期时间
     */
    tokenExpireAt: Date;
};

export type UpdateCaptchaDto = {
    /**
     * 验证码
     */
    code?: string;
    /**
     * 过期时间
     */
    expireAt?: Date;
    /**
     * key
     */
    key?: string;
};

export type UpdateEmailRecordDto = {
    status?: EmailStatus;
    /**
     * 发件者
     */
    from?: string;
    /**
     * 收件者
     */
    to?: string;
    /**
     * 主题
     */
    subject?: string;
    /**
     * 内容
     */
    content?: string;
    /**
     * 发送时间
     */
    sentAt?: Date;
};

export type UpdateGroupDto = {
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 名称
     */
    name?: string;
    /**
     * 权限
     */
    permissions?: Array<(string)>;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 人数
     */
    userCount?: number;
};

export type UpdateNamespaceDto = {
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 描述
     */
    desc?: string;
    /**
     * 标签
     */
    labels?: Array<(string)>;
    /**
     * 名称
     */
    name?: string;
    /**
     * 权限
     */
    permissions?: Array<(string)>;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 默认密码
     */
    defaultPassword?: string;
    /**
     * 是否可导出
     */
    exportable?: boolean;
    /**
     * 人数
     */
    userCount?: number;
};

export type UpdatePasswordDto = {
    /**
     * 旧密码
     */
    oldPassword?: string;
    /**
     * 新密码
     */
    newPassword: string;
};

export type UpdateRoleDto = {
    /**
     * 名称
     */
    name?: string;
    /**
     * 权限
     */
    permissions?: Array<(string)>;
};

export type UpdateSessionDto = {
    /**
     * 会话过期时间
     */
    refreshTokenExpireAt?: Date;
    /**
     * 用户或第三方用户
     * "user|123456789"
     * "github|123456789"
     * "client|abcddfe"
     */
    subject?: string;
    /**
     * 受限权限，如果提供这个字段，会覆盖用户的权限
     */
    permissions?: Array<(string)>;
    /**
     * 用户所属的组
     */
    groups?: Array<(string)>;
    /**
     * user ns
     */
    ns?: string;
    /**
     * 类型，登录端
     */
    type?: string;
};

export type UpdateSmsRecordDto = {
    status?: SmsStatus;
    /**
     * 手机号
     */
    phone?: string;
    /**
     * 签名
     */
    sign?: string;
    /**
     * 模板
     */
    template?: string;
    /**
     * 参数
     */
    params?: string;
    /**
     * 发送时间
     */
    sentAt?: Date;
};

export type UpdateThirdPartyDto = {
    source?: ThirdPartySource;
    /**
     * 第三方登录 id
     */
    login?: string;
    /**
     * 第三方登录 accessToken
     */
    accessToken?: string;
    avatar?: string;
    name?: string;
    /**
     * 关联uid
     */
    uid?: string;
};

export type UpdateUserDto = {
    /**
     * 是否有密码
     */
    readonly hasPassword?: boolean;
    /**
     * 头像
     */
    avatar?: string;
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 邮箱
     */
    email?: string;
    /**
     * 姓名
     */
    name?: string;
    identity?: string;
    /**
     * 实名认证时间
     */
    identityVerifiedAt?: Date;
    /**
     * 实名认证是否通过
     */
    identityVerified?: boolean;
    /**
     * 简介
     */
    intro?: string;
    /**
     * 使用语言
     */
    language?: string;
    /**
     * 最后登录 IP
     */
    lastLoginIp?: string;
    /**
     * 最后活跃时间
     */
    lastSeenAt?: Date;
    /**
     * 等级
     */
    level?: number;
    /**
     * 昵称
     */
    nickname?: string;
    /**
     * 所属命名空间
     */
    ns?: string;
    /**
     * 手机号
     */
    phone?: string;
    /**
     * 注册 IP
     */
    registerIp?: string;
    /**
     * 注册地区，存地区编号
     */
    registerRegion?: string;
    /**
     * 角色
     */
    roles?: Array<(string)>;
    /**
     * 用户名
     */
    username?: string;
    /**
     * 员工编号
     */
    employeeId?: string;
    /**
     * 权限
     */
    permissions?: Array<(string)>;
    /**
     * 团队
     */
    groups?: Array<(string)>;
    /**
     * 最后登录时间
     */
    lastLoginAt?: Date;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 状态
     */
    status?: string;
    /**
     * 过期时间
     */
    expireAt?: Date;
    /**
     * 类型, 登录端
     */
    type?: string;
};

export type User = {
    /**
     * 密码
     */
    password?: string;
    /**
     * 是否有密码
     */
    readonly hasPassword?: boolean;
    /**
     * 头像
     */
    avatar?: string;
    /**
     * 额外数据
     */
    data?: string;
    /**
     * 邮箱
     */
    email?: string;
    /**
     * 姓名
     */
    name?: string;
    identity?: string;
    /**
     * 实名认证时间
     */
    identityVerifiedAt?: Date;
    /**
     * 实名认证是否通过
     */
    identityVerified?: boolean;
    /**
     * 简介
     */
    intro?: string;
    /**
     * 使用语言
     */
    language?: string;
    /**
     * 最后登录 IP
     */
    lastLoginIp?: string;
    /**
     * 最后活跃时间
     */
    lastSeenAt?: Date;
    /**
     * 等级
     */
    level?: number;
    /**
     * 昵称
     */
    nickname?: string;
    /**
     * 所属命名空间
     */
    ns?: string;
    /**
     * 手机号
     */
    phone?: string;
    /**
     * 注册 IP
     */
    registerIp?: string;
    /**
     * 注册地区，存地区编号
     */
    registerRegion?: string;
    /**
     * 角色
     */
    roles?: Array<(string)>;
    /**
     * 用户名
     */
    username?: string;
    /**
     * 员工编号
     */
    employeeId?: string;
    /**
     * 权限
     */
    permissions?: Array<(string)>;
    /**
     * 团队
     */
    groups?: Array<(string)>;
    /**
     * 最后登录时间
     */
    lastLoginAt?: Date;
    /**
     * 是否启用
     */
    active?: boolean;
    /**
     * 状态
     */
    status?: string;
    /**
     * 过期时间
     */
    expireAt?: Date;
    /**
     * 类型, 登录端
     */
    type?: string;
    /**
     * Entity id
     */
    id: string;
    /**
     * Entity created at when
     */
    createdAt?: Date;
    /**
     * Entity updated at when
     */
    updatedAt?: Date;
    /**
     * Entity created by who
     */
    createdBy?: string;
    /**
     * Entity updated by who
     */
    updatedBy?: string;
};

export type VerifyCaptchaDto = {
    /**
     * 验证码
     */
    code: string;
    /**
     * 验证码 key
     */
    key: string;
};

export type VerifyCaptchaResultDto = {
    /**
     * 是否验证成功
     */
    success: boolean;
};

export type HelloResponse = (AppResult);

export type HelloError = unknown;

export type CleanupResponse = (AppResult);

export type CleanupError = unknown;

export type LoginData = {
    body: LoginDto;
};

export type LoginResponse = (SessionWithToken);

export type LoginError = unknown;

export type LoginByGithubData = {
    body: GithubDto;
};

export type LoginByGithubResponse = (SessionWithToken);

export type LoginByGithubError = unknown;

export type LoginByEmailData = {
    body: LoginByEmailDto;
};

export type LoginByEmailResponse = (SessionWithToken);

export type LoginByEmailError = unknown;

export type LoginByPhoneData = {
    body: LoginByPhoneDto;
};

export type LoginByPhoneResponse = (SessionWithToken);

export type LoginByPhoneError = unknown;

export type LogoutData = {
    body: LogoutDto;
};

export type LogoutResponse = (void);

export type LogoutError = unknown;

export type RegisterData = {
    body: RegisterDto;
};

export type RegisterResponse = (User);

export type RegisterError = unknown;

export type RegisterByPhoneData = {
    body: RegisterbyPhoneDto;
};

export type RegisterByPhoneResponse = (User);

export type RegisterByPhoneError = unknown;

export type RegisterByEmailData = {
    body: RegisterByEmailDto;
};

export type RegisterByEmailResponse = (User);

export type RegisterByEmailError = unknown;

export type SignTokenData = {
    body: SignTokenDto;
};

export type SignTokenResponse = (Token);

export type SignTokenError = unknown;

export type RefreshData = {
    body: RefreshTokenDto;
};

export type RefreshResponse = (SessionWithToken);

export type RefreshError = unknown;

export type ResetPasswordByPhoneData = {
    body: ResetPasswordByPhoneDto;
};

export type ResetPasswordByPhoneResponse = (void);

export type ResetPasswordByPhoneError = unknown;

export type ResetPasswordByEmailData = {
    body: ResetPasswordByEmailDto;
};

export type ResetPasswordByEmailResponse = (void);

export type ResetPasswordByEmailError = unknown;

export type CreateUserData = {
    body: CreateUserDto;
};

export type CreateUserResponse = (User);

export type CreateUserError = unknown;

export type ListUsersData = {
    query?: {
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'lastLoginAt' | '-lastLoginAt' | 'expireAt' | '-expireAt';
        /**
         * 是否启用
         */
        active?: boolean;
        /**
         * 邮箱
         */
        email?: string;
        /**
         * 过期时间大于该时间
         */
        expireAt_gte?: Date;
        /**
         * 过期时间小于该时间
         */
        expireAt_lte?: Date;
        /**
         * 团队
         */
        groups?: Array<(string)>;
        /**
         * 按 id 筛选
         */
        id?: Array<(string)>;
        /**
         * 姓名
         */
        name?: string;
        /**
         * 名称 模糊查询
         */
        name_like?: string;
        /**
         * 昵称 模糊查询
         */
        nickname_like?: string;
        /**
         * 所属命名空间的 tree 查询
         */
        ns_tree?: string;
        /**
         * 手机号
         */
        phone?: string;
        /**
         * 注册地区，存地区编号
         */
        registerRegion?: string;
        /**
         * 角色
         */
        roles?: Array<(string)>;
        /**
         * 状态
         */
        status?: string;
        /**
         * 类型, 登录端
         */
        type?: string;
        /**
         * 用户名
         */
        username?: string;
        /**
         * 用户名 模糊查询
         */
        username_like?: string;
    };
};

export type ListUsersResponse = (Array<User>);

export type ListUsersError = unknown;

export type GetUserData = {
    path: {
        /**
         * User id
         */
        userId: string;
    };
};

export type GetUserResponse = (User);

export type GetUserError = unknown;

export type UpdateUserData = {
    body: UpdateUserDto;
    path: {
        userId: string;
    };
};

export type UpdateUserResponse = (User);

export type UpdateUserError = unknown;

export type DeleteUserData = {
    path: {
        userId: string;
    };
};

export type DeleteUserResponse = (void);

export type DeleteUserError = unknown;

export type UpsertUserByEmployeeIdData = {
    body: CreateUserDto;
    path: {
        employeeId: string;
    };
};

export type UpsertUserByEmployeeIdResponse = (User | {
    [key: string]: unknown;
});

export type UpsertUserByEmployeeIdError = unknown;

export type UpsertUserByUsernameData = {
    body: CreateUserDto;
    path: {
        username: string;
    };
};

export type UpsertUserByUsernameResponse = (User | {
    [key: string]: unknown;
});

export type UpsertUserByUsernameError = unknown;

export type UpsertUserByEmailData = {
    body: CreateUserDto;
    path: {
        email: string;
    };
};

export type UpsertUserByEmailResponse = (User | {
    [key: string]: unknown;
});

export type UpsertUserByEmailError = unknown;

export type UpsertUserByPhoneData = {
    body: CreateUserDto;
    path: {
        phone: string;
    };
};

export type UpsertUserByPhoneResponse = (User | {
    [key: string]: unknown;
});

export type UpsertUserByPhoneError = unknown;

export type VerifyIdentityData = {
    path: {
        userId: string;
    };
};

export type VerifyIdentityResponse = (User);

export type VerifyIdentityError = unknown;

export type UpdatePasswordData = {
    body: UpdatePasswordDto;
    path: {
        userId: string;
    };
};

export type UpdatePasswordResponse = (void);

export type UpdatePasswordError = unknown;

export type CreateNamespaceData = {
    body: CreateNamespaceDto;
};

export type CreateNamespaceResponse = (Namespace);

export type CreateNamespaceError = unknown;

export type ListNamespacesData = {
    query?: {
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'key' | '-key' | 'name' | '-name';
        /**
         * 命名空间的 key
         *
         * 允许的字符 ^[a-zA-Z][a-zA-Z0-9._/-]{0,30}$
         */
        key?: string;
        /**
         * key tree 查询
         */
        key_tree?: string;
        /**
         * 标签
         */
        labels?: Array<(string)>;
        /**
         * 名称 模糊查询
         */
        name_like?: string;
        /**
         * 所属命名空间 tree 查询
         */
        ns_tree?: string;
    };
};

export type ListNamespacesResponse = (Array<Namespace>);

export type ListNamespacesError = unknown;

export type GetNamespaceData = {
    path: {
        /**
         * Namespace id or key, if key should encodeURIComponent
         */
        namespaceIdOrKey: string;
    };
};

export type GetNamespaceResponse = (Namespace);

export type GetNamespaceError = unknown;

export type UpdateNamespaceData = {
    body: UpdateNamespaceDto;
    path: {
        namespaceIdOrKey: string;
    };
};

export type UpdateNamespaceResponse = (Namespace);

export type UpdateNamespaceError = unknown;

export type DeleteNamespaceData = {
    path: {
        namespaceId: string;
    };
};

export type DeleteNamespaceResponse = (void);

export type DeleteNamespaceError = unknown;

export type CreateSessionData = {
    body: CreateSessionDto;
};

export type CreateSessionResponse = (Session);

export type CreateSessionError = unknown;

export type ListSessionsData = {
    query?: {
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'refreshTokenExpireAt' | '-refreshTokenExpireAt';
        /**
         * 用户所属的组
         */
        groups?: Array<(string)>;
        /**
         * user ns
         */
        ns?: string;
        /**
         * 受限权限，如果提供这个字段，会覆盖用户的权限
         */
        permissions?: Array<(string)>;
        /**
         * 用 key 进行查询
         */
        refreshToken?: string;
        /**
         * 用户或第三方用户
         * "user|123456789"
         * "github|123456789"
         * "client|abcddfe"
         */
        subject?: string;
        /**
         * 类型，登录端
         */
        type?: string;
    };
};

export type ListSessionsResponse = (Array<Session>);

export type ListSessionsError = unknown;

export type GetSessionData = {
    path: {
        sessionId: string;
    };
};

export type GetSessionResponse = (Session);

export type GetSessionError = unknown;

export type UpdateSessionData = {
    body: UpdateSessionDto;
    path: {
        sessionId: string;
    };
};

export type UpdateSessionResponse = (Session);

export type UpdateSessionError = unknown;

export type DeleteSessionData = {
    path: {
        sessionId: string;
    };
};

export type DeleteSessionResponse = (void);

export type DeleteSessionError = unknown;

export type CreateGroupData = {
    body: CreateGroupDto;
};

export type CreateGroupResponse = (Group);

export type CreateGroupError = unknown;

export type ListGroupsData = {
    query?: {
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * 是否启用
         */
        active?: boolean;
        /**
         * 名称
         */
        name?: string;
        /**
         * 名称 模糊查询
         */
        name_like?: string;
    };
};

export type ListGroupsResponse = (Array<Group>);

export type ListGroupsError = unknown;

export type GetGroupData = {
    path: {
        /**
         * Group id or name, if name should encodeURIComponent
         */
        groupIdOrName: string;
    };
};

export type GetGroupResponse = (Group);

export type GetGroupError = unknown;

export type UpdateGroupData = {
    body: UpdateGroupDto;
    path: {
        groupId: string;
    };
};

export type UpdateGroupResponse = (Group);

export type UpdateGroupError = unknown;

export type DeleteGroupData = {
    path: {
        groupId: string;
    };
};

export type DeleteGroupResponse = (void);

export type DeleteGroupError = unknown;

export type CreateCaptchaData = {
    body: CreateCaptchaDto;
};

export type CreateCaptchaResponse = (Captcha);

export type CreateCaptchaError = unknown;

export type ListCaptchasData = {
    query?: {
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'expireAt' | '-expireAt';
        /**
         * 验证码
         */
        code?: string;
        /**
         * key
         */
        key?: string;
    };
};

export type ListCaptchasResponse = (Array<Captcha>);

export type ListCaptchasError = unknown;

export type GetCaptchaData = {
    path: {
        captchaId: string;
    };
};

export type GetCaptchaResponse = (Captcha);

export type GetCaptchaError = unknown;

export type UpdateCaptchaData = {
    body: UpdateCaptchaDto;
    path: {
        captchaId: string;
    };
};

export type UpdateCaptchaResponse = (Captcha);

export type UpdateCaptchaError = unknown;

export type DeleteCaptchaData = {
    path: {
        captchaId: string;
    };
};

export type DeleteCaptchaResponse = (void);

export type DeleteCaptchaError = unknown;

export type VerifyCaptchaData = {
    body: VerifyCaptchaDto;
};

export type VerifyCaptchaResponse = (VerifyCaptchaResultDto);

export type VerifyCaptchaError = unknown;

export type SendEmailData = {
    body: SendEmailDto;
};

export type SendEmailResponse = (void);

export type SendEmailError = unknown;

export type CreateEmailRecordData = {
    body: CreateEmailRecordDto;
};

export type CreateEmailRecordResponse = (EmailRecord);

export type CreateEmailRecordError = unknown;

export type ListEmailRecordsData = {
    query?: {
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sentAt' | '-sentAt';
        /**
         * 创建时间大于该时间
         */
        createdAt_gt?: Date;
        /**
         * 创建时间小于该时间
         */
        createdAt_lt?: Date;
        /**
         * 发件者
         */
        from?: string;
        /**
         * 发送时间大于该时间
         */
        sentAt_gt?: Date;
        /**
         * 发送时间小于该时间
         */
        sentAt_lt?: Date;
        /**
         * 发送状态
         */
        status?: EmailStatus;
        /**
         * 收件者
         */
        to?: string;
    };
};

export type ListEmailRecordsResponse = (Array<EmailRecord>);

export type ListEmailRecordsError = unknown;

export type GetEmailRecordData = {
    path: {
        /**
         * Email record id
         */
        emailRecordId: string;
    };
};

export type GetEmailRecordResponse = (EmailRecord);

export type GetEmailRecordError = unknown;

export type UpdateEmailRecordData = {
    body: UpdateEmailRecordDto;
    path: {
        emailRecordId: string;
    };
};

export type UpdateEmailRecordResponse = (EmailRecord);

export type UpdateEmailRecordError = unknown;

export type DeleteEmailRecordData = {
    path: {
        emailRecordId: string;
    };
};

export type DeleteEmailRecordResponse = (void);

export type DeleteEmailRecordError = unknown;

export type SendSmsData = {
    body: SendSmsDto;
};

export type SendSmsResponse = (void);

export type SendSmsError = unknown;

export type CreateSmsRecordData = {
    body: CreateSmsRecordDto;
};

export type CreateSmsRecordResponse = (SmsRecord);

export type CreateSmsRecordError = unknown;

export type ListSmsRecordsData = {
    query?: {
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sentAt' | '-sentAt';
        /**
         * 创建时间大于该时间
         */
        createdAt_gt?: Date;
        /**
         * 创建时间小于该时间
         */
        createdAt_lt?: Date;
        /**
         * 手机号
         */
        phone?: string;
        /**
         * 发送时间大于该时间
         */
        sentAt_gt?: Date;
        /**
         * 发送时间小于该时间
         */
        sentAt_lt?: Date;
        /**
         * 签名
         */
        sign?: string;
        /**
         * 发送状态
         */
        status?: SmsStatus;
    };
};

export type ListSmsRecordsResponse = (Array<SmsRecord>);

export type ListSmsRecordsError = unknown;

export type GetSmsRecordData = {
    path: {
        /**
         * Sms record id
         */
        smsRecordId: string;
    };
};

export type GetSmsRecordResponse = (SmsRecord);

export type GetSmsRecordError = unknown;

export type UpdateSmsRecordData = {
    body: UpdateSmsRecordDto;
    path: {
        smsRecordId: string;
    };
};

export type UpdateSmsRecordResponse = (SmsRecord);

export type UpdateSmsRecordError = unknown;

export type DeleteSmsRecordData = {
    path: {
        smsRecordId: string;
    };
};

export type DeleteSmsRecordResponse = (void);

export type DeleteSmsRecordError = unknown;

export type CreateThirdPartyData = {
    body: createThirdPartyDto;
};

export type CreateThirdPartyResponse = (ThirdParty);

export type CreateThirdPartyError = unknown;

export type ListThirdPartyData = {
    query?: {
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
        /**
         * 第三方登录 accessToken
         */
        accessToken?: string;
        avatar?: string;
        /**
         * 第三方登录 id
         */
        login?: string;
        name?: string;
        /**
         * 第三方登录来源
         */
        source?: ThirdPartySource;
        /**
         * 关联uid
         */
        uid?: string;
    };
};

export type ListThirdPartyResponse = (Array<{
    [key: string]: unknown;
}> | Array<ThirdParty>);

export type ListThirdPartyError = unknown;

export type GetThirdPartyData = {
    path: {
        id: string;
    };
};

export type GetThirdPartyResponse = ({
    [key: string]: unknown;
} | ThirdParty);

export type GetThirdPartyError = unknown;

export type UpdateThirdPartyData = {
    body: UpdateThirdPartyDto;
    path: {
        id: string;
    };
};

export type UpdateThirdPartyResponse = ({
    [key: string]: unknown;
} | ThirdParty);

export type UpdateThirdPartyError = unknown;

export type BindThirdPartyData = {
    body: bindThirdPartyDto;
};

export type BindThirdPartyResponse = (ThirdParty);

export type BindThirdPartyError = unknown;

export type ListIndustriesResponse = (Array<Industry>);

export type ListIndustriesError = unknown;

export type ListRegionsResponse = (Array<Region>);

export type ListRegionsError = unknown;

export type CreateRoleData = {
    body: CreateRoleDto;
};

export type CreateRoleResponse = (Role);

export type CreateRoleError = unknown;

export type ListRolesData = {
    query?: {
        /**
         * 分页大小
         */
        _limit?: number;
        /**
         * 分页偏移
         */
        _offset?: number;
        /**
         * 排序参数
         */
        _sort?: 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * role key
         */
        key?: string;
        /**
         * 名称
         */
        name?: string;
        /**
         * 名称 模糊查询
         */
        name_like?: string;
    };
};

export type ListRolesResponse = (Array<Role>);

export type ListRolesError = unknown;

export type GetRoleData = {
    path: {
        /**
         * Role id or key
         */
        roleIdOrKey: string;
    };
};

export type GetRoleResponse = (Role);

export type GetRoleError = unknown;

export type UpdateRoleData = {
    body: UpdateRoleDto;
    path: {
        roleId: string;
    };
};

export type UpdateRoleResponse = (Role);

export type UpdateRoleError = unknown;

export type DeleteRoleData = {
    path: {
        roleId: string;
    };
};

export type DeleteRoleResponse = (void);

export type DeleteRoleError = unknown;

export type LoginResponseTransformer = (data: any) => Promise<LoginResponse>;

export type SessionWithTokenModelResponseTransformer = (data: any) => SessionWithToken;

export const SessionWithTokenModelResponseTransformer: SessionWithTokenModelResponseTransformer = data => {
    if (data?.refreshTokenExpireAt) {
        data.refreshTokenExpireAt = new Date(data.refreshTokenExpireAt);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    if (data?.tokenExpireAt) {
        data.tokenExpireAt = new Date(data.tokenExpireAt);
    }
    return data;
};

export const LoginResponseTransformer: LoginResponseTransformer = async (data) => {
    SessionWithTokenModelResponseTransformer(data);
    return data;
};

export type LoginByGithubResponseTransformer = (data: any) => Promise<LoginByGithubResponse>;

export const LoginByGithubResponseTransformer: LoginByGithubResponseTransformer = async (data) => {
    SessionWithTokenModelResponseTransformer(data);
    return data;
};

export type LoginByEmailResponseTransformer = (data: any) => Promise<LoginByEmailResponse>;

export const LoginByEmailResponseTransformer: LoginByEmailResponseTransformer = async (data) => {
    SessionWithTokenModelResponseTransformer(data);
    return data;
};

export type LoginByPhoneResponseTransformer = (data: any) => Promise<LoginByPhoneResponse>;

export const LoginByPhoneResponseTransformer: LoginByPhoneResponseTransformer = async (data) => {
    SessionWithTokenModelResponseTransformer(data);
    return data;
};

export type RegisterResponseTransformer = (data: any) => Promise<RegisterResponse>;

export type UserModelResponseTransformer = (data: any) => User;

export const UserModelResponseTransformer: UserModelResponseTransformer = data => {
    if (data?.identityVerifiedAt) {
        data.identityVerifiedAt = new Date(data.identityVerifiedAt);
    }
    if (data?.lastSeenAt) {
        data.lastSeenAt = new Date(data.lastSeenAt);
    }
    if (data?.lastLoginAt) {
        data.lastLoginAt = new Date(data.lastLoginAt);
    }
    if (data?.expireAt) {
        data.expireAt = new Date(data.expireAt);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const RegisterResponseTransformer: RegisterResponseTransformer = async (data) => {
    UserModelResponseTransformer(data);
    return data;
};

export type RegisterByPhoneResponseTransformer = (data: any) => Promise<RegisterByPhoneResponse>;

export const RegisterByPhoneResponseTransformer: RegisterByPhoneResponseTransformer = async (data) => {
    UserModelResponseTransformer(data);
    return data;
};

export type RegisterByEmailResponseTransformer = (data: any) => Promise<RegisterByEmailResponse>;

export const RegisterByEmailResponseTransformer: RegisterByEmailResponseTransformer = async (data) => {
    UserModelResponseTransformer(data);
    return data;
};

export type SignTokenResponseTransformer = (data: any) => Promise<SignTokenResponse>;

export type TokenModelResponseTransformer = (data: any) => Token;

export const TokenModelResponseTransformer: TokenModelResponseTransformer = data => {
    if (data?.tokenExpireAt) {
        data.tokenExpireAt = new Date(data.tokenExpireAt);
    }
    return data;
};

export const SignTokenResponseTransformer: SignTokenResponseTransformer = async (data) => {
    TokenModelResponseTransformer(data);
    return data;
};

export type RefreshResponseTransformer = (data: any) => Promise<RefreshResponse>;

export const RefreshResponseTransformer: RefreshResponseTransformer = async (data) => {
    SessionWithTokenModelResponseTransformer(data);
    return data;
};

export type CreateUserResponseTransformer = (data: any) => Promise<CreateUserResponse>;

export const CreateUserResponseTransformer: CreateUserResponseTransformer = async (data) => {
    UserModelResponseTransformer(data);
    return data;
};

export type ListUsersResponseTransformer = (data: any) => Promise<ListUsersResponse>;

export const ListUsersResponseTransformer: ListUsersResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(UserModelResponseTransformer);
    }
    return data;
};

export type GetUserResponseTransformer = (data: any) => Promise<GetUserResponse>;

export const GetUserResponseTransformer: GetUserResponseTransformer = async (data) => {
    UserModelResponseTransformer(data);
    return data;
};

export type UpdateUserResponseTransformer = (data: any) => Promise<UpdateUserResponse>;

export const UpdateUserResponseTransformer: UpdateUserResponseTransformer = async (data) => {
    UserModelResponseTransformer(data);
    return data;
};

export type VerifyIdentityResponseTransformer = (data: any) => Promise<VerifyIdentityResponse>;

export const VerifyIdentityResponseTransformer: VerifyIdentityResponseTransformer = async (data) => {
    UserModelResponseTransformer(data);
    return data;
};

export type CreateNamespaceResponseTransformer = (data: any) => Promise<CreateNamespaceResponse>;

export type NamespaceModelResponseTransformer = (data: any) => Namespace;

export const NamespaceModelResponseTransformer: NamespaceModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const CreateNamespaceResponseTransformer: CreateNamespaceResponseTransformer = async (data) => {
    NamespaceModelResponseTransformer(data);
    return data;
};

export type ListNamespacesResponseTransformer = (data: any) => Promise<ListNamespacesResponse>;

export const ListNamespacesResponseTransformer: ListNamespacesResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(NamespaceModelResponseTransformer);
    }
    return data;
};

export type GetNamespaceResponseTransformer = (data: any) => Promise<GetNamespaceResponse>;

export const GetNamespaceResponseTransformer: GetNamespaceResponseTransformer = async (data) => {
    NamespaceModelResponseTransformer(data);
    return data;
};

export type UpdateNamespaceResponseTransformer = (data: any) => Promise<UpdateNamespaceResponse>;

export const UpdateNamespaceResponseTransformer: UpdateNamespaceResponseTransformer = async (data) => {
    NamespaceModelResponseTransformer(data);
    return data;
};

export type CreateSessionResponseTransformer = (data: any) => Promise<CreateSessionResponse>;

export type SessionModelResponseTransformer = (data: any) => Session;

export const SessionModelResponseTransformer: SessionModelResponseTransformer = data => {
    if (data?.refreshTokenExpireAt) {
        data.refreshTokenExpireAt = new Date(data.refreshTokenExpireAt);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const CreateSessionResponseTransformer: CreateSessionResponseTransformer = async (data) => {
    SessionModelResponseTransformer(data);
    return data;
};

export type ListSessionsResponseTransformer = (data: any) => Promise<ListSessionsResponse>;

export const ListSessionsResponseTransformer: ListSessionsResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(SessionModelResponseTransformer);
    }
    return data;
};

export type GetSessionResponseTransformer = (data: any) => Promise<GetSessionResponse>;

export const GetSessionResponseTransformer: GetSessionResponseTransformer = async (data) => {
    SessionModelResponseTransformer(data);
    return data;
};

export type UpdateSessionResponseTransformer = (data: any) => Promise<UpdateSessionResponse>;

export const UpdateSessionResponseTransformer: UpdateSessionResponseTransformer = async (data) => {
    SessionModelResponseTransformer(data);
    return data;
};

export type CreateGroupResponseTransformer = (data: any) => Promise<CreateGroupResponse>;

export type GroupModelResponseTransformer = (data: any) => Group;

export const GroupModelResponseTransformer: GroupModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const CreateGroupResponseTransformer: CreateGroupResponseTransformer = async (data) => {
    GroupModelResponseTransformer(data);
    return data;
};

export type ListGroupsResponseTransformer = (data: any) => Promise<ListGroupsResponse>;

export const ListGroupsResponseTransformer: ListGroupsResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(GroupModelResponseTransformer);
    }
    return data;
};

export type GetGroupResponseTransformer = (data: any) => Promise<GetGroupResponse>;

export const GetGroupResponseTransformer: GetGroupResponseTransformer = async (data) => {
    GroupModelResponseTransformer(data);
    return data;
};

export type UpdateGroupResponseTransformer = (data: any) => Promise<UpdateGroupResponse>;

export const UpdateGroupResponseTransformer: UpdateGroupResponseTransformer = async (data) => {
    GroupModelResponseTransformer(data);
    return data;
};

export type CreateCaptchaResponseTransformer = (data: any) => Promise<CreateCaptchaResponse>;

export type CaptchaModelResponseTransformer = (data: any) => Captcha;

export const CaptchaModelResponseTransformer: CaptchaModelResponseTransformer = data => {
    if (data?.expireAt) {
        data.expireAt = new Date(data.expireAt);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const CreateCaptchaResponseTransformer: CreateCaptchaResponseTransformer = async (data) => {
    CaptchaModelResponseTransformer(data);
    return data;
};

export type ListCaptchasResponseTransformer = (data: any) => Promise<ListCaptchasResponse>;

export const ListCaptchasResponseTransformer: ListCaptchasResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(CaptchaModelResponseTransformer);
    }
    return data;
};

export type GetCaptchaResponseTransformer = (data: any) => Promise<GetCaptchaResponse>;

export const GetCaptchaResponseTransformer: GetCaptchaResponseTransformer = async (data) => {
    CaptchaModelResponseTransformer(data);
    return data;
};

export type UpdateCaptchaResponseTransformer = (data: any) => Promise<UpdateCaptchaResponse>;

export const UpdateCaptchaResponseTransformer: UpdateCaptchaResponseTransformer = async (data) => {
    CaptchaModelResponseTransformer(data);
    return data;
};

export type CreateEmailRecordResponseTransformer = (data: any) => Promise<CreateEmailRecordResponse>;

export type EmailRecordModelResponseTransformer = (data: any) => EmailRecord;

export const EmailRecordModelResponseTransformer: EmailRecordModelResponseTransformer = data => {
    if (data?.sentAt) {
        data.sentAt = new Date(data.sentAt);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const CreateEmailRecordResponseTransformer: CreateEmailRecordResponseTransformer = async (data) => {
    EmailRecordModelResponseTransformer(data);
    return data;
};

export type ListEmailRecordsResponseTransformer = (data: any) => Promise<ListEmailRecordsResponse>;

export const ListEmailRecordsResponseTransformer: ListEmailRecordsResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(EmailRecordModelResponseTransformer);
    }
    return data;
};

export type GetEmailRecordResponseTransformer = (data: any) => Promise<GetEmailRecordResponse>;

export const GetEmailRecordResponseTransformer: GetEmailRecordResponseTransformer = async (data) => {
    EmailRecordModelResponseTransformer(data);
    return data;
};

export type UpdateEmailRecordResponseTransformer = (data: any) => Promise<UpdateEmailRecordResponse>;

export const UpdateEmailRecordResponseTransformer: UpdateEmailRecordResponseTransformer = async (data) => {
    EmailRecordModelResponseTransformer(data);
    return data;
};

export type CreateSmsRecordResponseTransformer = (data: any) => Promise<CreateSmsRecordResponse>;

export type SmsRecordModelResponseTransformer = (data: any) => SmsRecord;

export const SmsRecordModelResponseTransformer: SmsRecordModelResponseTransformer = data => {
    if (data?.sentAt) {
        data.sentAt = new Date(data.sentAt);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const CreateSmsRecordResponseTransformer: CreateSmsRecordResponseTransformer = async (data) => {
    SmsRecordModelResponseTransformer(data);
    return data;
};

export type ListSmsRecordsResponseTransformer = (data: any) => Promise<ListSmsRecordsResponse>;

export const ListSmsRecordsResponseTransformer: ListSmsRecordsResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(SmsRecordModelResponseTransformer);
    }
    return data;
};

export type GetSmsRecordResponseTransformer = (data: any) => Promise<GetSmsRecordResponse>;

export const GetSmsRecordResponseTransformer: GetSmsRecordResponseTransformer = async (data) => {
    SmsRecordModelResponseTransformer(data);
    return data;
};

export type UpdateSmsRecordResponseTransformer = (data: any) => Promise<UpdateSmsRecordResponse>;

export const UpdateSmsRecordResponseTransformer: UpdateSmsRecordResponseTransformer = async (data) => {
    SmsRecordModelResponseTransformer(data);
    return data;
};

export type CreateThirdPartyResponseTransformer = (data: any) => Promise<CreateThirdPartyResponse>;

export type ThirdPartyModelResponseTransformer = (data: any) => ThirdParty;

export const ThirdPartyModelResponseTransformer: ThirdPartyModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const CreateThirdPartyResponseTransformer: CreateThirdPartyResponseTransformer = async (data) => {
    ThirdPartyModelResponseTransformer(data);
    return data;
};

export type BindThirdPartyResponseTransformer = (data: any) => Promise<BindThirdPartyResponse>;

export const BindThirdPartyResponseTransformer: BindThirdPartyResponseTransformer = async (data) => {
    ThirdPartyModelResponseTransformer(data);
    return data;
};

export type ListIndustriesResponseTransformer = (data: any) => Promise<ListIndustriesResponse>;

export type IndustryModelResponseTransformer = (data: any) => Industry;

export const IndustryModelResponseTransformer: IndustryModelResponseTransformer = data => {
    if (Array.isArray(data?.children)) {
        data.children.forEach(IndustryModelResponseTransformer);
    }
    return data;
};

export const ListIndustriesResponseTransformer: ListIndustriesResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(IndustryModelResponseTransformer);
    }
    return data;
};

export type CreateRoleResponseTransformer = (data: any) => Promise<CreateRoleResponse>;

export type RoleModelResponseTransformer = (data: any) => Role;

export const RoleModelResponseTransformer: RoleModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const CreateRoleResponseTransformer: CreateRoleResponseTransformer = async (data) => {
    RoleModelResponseTransformer(data);
    return data;
};

export type ListRolesResponseTransformer = (data: any) => Promise<ListRolesResponse>;

export const ListRolesResponseTransformer: ListRolesResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(RoleModelResponseTransformer);
    }
    return data;
};

export type GetRoleResponseTransformer = (data: any) => Promise<GetRoleResponse>;

export const GetRoleResponseTransformer: GetRoleResponseTransformer = async (data) => {
    RoleModelResponseTransformer(data);
    return data;
};

export type UpdateRoleResponseTransformer = (data: any) => Promise<UpdateRoleResponse>;

export const UpdateRoleResponseTransformer: UpdateRoleResponseTransformer = async (data) => {
    RoleModelResponseTransformer(data);
    return data;
};
// Generated by openapi-ts-gen. DO NOT EDIT
/* eslint-disable */
export interface HealthCheckResult {
  message: string
}
export interface LoginDto {
  login: string
  password: string
}
export interface User {
  password?: string
  hasPassword?: boolean
  avatar?: string
  data?: string
  email?: string
  name?: string
  identity?: string
  identityVerifiedAt?: string
  identityVerified?: boolean
  intro?: string
  language?: string
  lastLoginIp?: string
  lastSeenAt?: string
  nickname?: string
  ns?: string
  phone?: string
  registerIp?: string
  registerRegion?: string
  roles?: string[]
  super?: boolean
  username?: string
  id: string
  createdAt?: string
  updatedAt?: string
  createdBy?: string
  updatedBy?: string
}
export interface SessionWithToken {
  acl?: SessionWithToken.Acl
  expireAt: string
  key: string
  user: User
  client?: string
  id: string
  createdAt?: string
  updatedAt?: string
  createdBy?: string
  updatedBy?: string
  token: string
  tokenExpireAt: string
}
export namespace SessionWithToken {
  export interface Acl {
  }
}
export interface LoginByEmailDto {
  email: string
  key: string
  code: string
}
export interface LoginByPhoneDto {
  phone: string
  key: string
  code: string
}
export interface RegisterDto {
  username: string
  password: string
  ns?: string
}
export interface RegisterbyPhoneDto {
  phone: string
  key: string
  code: string
  ns?: string
}
export interface RegisterByEmailDto {
  email: string
  key: string
  code: string
  ns?: string
}
export interface SignTokenDto {
  expiresIn: string
  acl?: SignTokenDto.Acl
  uid: string
}
export namespace SignTokenDto {
  export interface Acl {
  }
}
export interface Token {
  token: string
  tokenExpireAt: string
}
export interface RefreshTokenDto {
  key: string
}
export interface CreateUserDto {
  password?: string
  hasPassword?: boolean
  avatar?: string
  data?: string
  email?: string
  name?: string
  identity?: string
  identityVerifiedAt?: string
  identityVerified?: boolean
  intro?: string
  language?: string
  nickname?: string
  ns?: string
  phone?: string
  registerRegion?: string
  roles?: string[]
  super?: boolean
  username?: string
}
export interface UpdateUserDto {
  hasPassword?: boolean
  avatar?: string
  data?: string
  email?: string
  name?: string
  identity?: string
  identityVerifiedAt?: string
  identityVerified?: boolean
  intro?: string
  language?: string
  lastLoginIp?: string
  lastSeenAt?: string
  nickname?: string
  ns?: string
  phone?: string
  registerIp?: string
  registerRegion?: string
  roles?: string[]
  super?: boolean
  username?: string
}
export interface ResetPasswordDto {
  password?: string
}
export interface UpdatePasswordDto {
  oldPassword?: string
  newPassword: string
}
export interface CreateNamespaceDto {
  data?: string
  desc?: string
  labels?: string[]
  name: string
  key: string
  ns?: string
}
export interface Namespace {
  data?: string
  desc?: string
  labels?: string[]
  name: string
  key: string
  ns?: string
  id: string
  createdAt?: string
  updatedAt?: string
  createdBy?: string
  updatedBy?: string
}
export interface UpdateNamespaceDto {
  data?: string
  desc?: string
  labels?: string[]
  name?: string
}
export interface CreateSessionDto {
  uid: string
  acl?: CreateSessionDto.Acl
  expireAt: string
  client?: string
}
export namespace CreateSessionDto {
  export interface Acl {
  }
}
export interface Session {
  acl?: Session.Acl
  expireAt: string
  key: string
  user: User
  client?: string
  id: string
  createdAt?: string
  updatedAt?: string
  createdBy?: string
  updatedBy?: string
}
export namespace Session {
  export interface Acl {
  }
}
export interface UpdateSessionDto {
  acl?: UpdateSessionDto.Acl
  expireAt?: string
  client?: string
  uid?: string
}
export namespace UpdateSessionDto {
  export interface Acl {
  }
}
export interface CreateCaptchaDto {
  code?: string
  expireAt?: string
  key: string
}
export interface Captcha {
  code: string
  expireAt: string
  key: string
  id: string
  createdAt?: string
  updatedAt?: string
  createdBy?: string
  updatedBy?: string
}
export interface UpdateCaptchaDto {
  code?: string
  expireAt?: string
  key?: string
}
export interface SendEmailDto {
  from: string
  to: string
  subject: string
  content: string
}
export enum EmailStatus {
  PENDING = "pending",
  SENT = "sent",
}
export type EmailStatusType = typeof EmailStatus[keyof typeof EmailStatus];
export interface CreateEmailRecordDto {
  status: EmailStatus
  from: string
  to: string
  subject: string
  content: string
  sentAt?: string
}
export interface EmailRecord {
  status: EmailStatus
  from: string
  to: string
  subject: string
  content: string
  sentAt?: string
  id: string
  createdAt?: string
  updatedAt?: string
  createdBy?: string
  updatedBy?: string
}
export interface UpdateEmailRecordDto {
  status?: EmailStatus
  from?: string
  to?: string
  subject?: string
  content?: string
  sentAt?: string
}
export interface Industry {
  code: string
  name: string
  children: Industry[]
}
export interface Region {
  code: string
  nameZh: string
  namePinyin: string
  nameEn: string
  dialingPrefix: string
}
export interface SendSmsDto {
  phone: string
  sign: string
  template: string
  params?: SendSmsDto.Params
}
export namespace SendSmsDto {
  export interface Params {
  }
}
export enum SmsStatus {
  PENDING = "pending",
  SENT = "sent",
}
export type SmsStatusType = typeof SmsStatus[keyof typeof SmsStatus];
export interface CreateSmsRecordDto {
  status: SmsStatus
  phone: string
  sign: string
  template: string
  params?: string
  sentAt?: string
}
export interface SmsRecord {
  status: SmsStatus
  phone: string
  sign: string
  template: string
  params?: string
  sentAt?: string
  id: string
  createdAt?: string
  updatedAt?: string
  createdBy?: string
  updatedBy?: string
}
export interface UpdateSmsRecordDto {
  status?: SmsStatus
  phone?: string
  sign?: string
  template?: string
  params?: string
  sentAt?: string
}
export interface HelloRequest {
}
export interface LoginRequest {
  body: LoginDto
}
export interface LoginByEmailRequest {
  body: LoginByEmailDto
}
export interface LoginByPhoneRequest {
  body: LoginByPhoneDto
}
export interface RegisterRequest {
  body: RegisterDto
}
export interface RegisterByPhoneRequest {
  body: RegisterbyPhoneDto
}
export interface RegisterByEmailRequest {
  body: RegisterByEmailDto
}
export interface SignTokenRequest {
  body: SignTokenDto
}
export interface RefreshRequest {
  body: RefreshTokenDto
}
export interface CreateUserRequest {
  body: CreateUserDto
}
export interface ListUsersRequest {
  _sort?: ListUsersRequest.Sort
  id?: string[]
  name_like?: string
  username_like?: string
  nickname_like?: string
  ns?: string[]
  ns_start?: string[]
  username?: string
  email?: string
  phone?: string
  registerRegion?: string
  roles?: string[]
  _limit?: number
  _offset?: number
}
export namespace ListUsersRequest {
  export enum Sort {
    CREATED_AT = "createdAt",
    CREATED_AT_DESC = "-createdAt",
    UPDATED_AT = "updatedAt",
    UPDATED_AT_DESC = "-updatedAt",
  }
  export type SortType = typeof Sort[keyof typeof Sort];
}
export interface GetUserRequest {
  userId: string
}
export interface UpdateUserRequest {
  userId: string
  body: UpdateUserDto
}
export interface DeleteUserRequest {
  userId: string
}
export interface VerifyIdentityRequest {
  userId: string
}
export interface ResetPasswordRequest {
  userId: string
  body: ResetPasswordDto
}
export interface UpdatePasswordRequest {
  userId: string
  body: UpdatePasswordDto
}
export interface CreateNamespaceRequest {
  body: CreateNamespaceDto
}
export interface ListNamespacesRequest {
  ns?: string[]
  ns_start?: string[]
  _sort?: ListNamespacesRequest.Sort
  name_like?: string
  labels?: string[]
  key?: string
  _limit?: number
  _offset?: number
}
export namespace ListNamespacesRequest {
  export enum Sort {
    CREATED_AT = "createdAt",
    CREATED_AT_DESC = "-createdAt",
    UPDATED_AT = "updatedAt",
    UPDATED_AT_DESC = "-updatedAt",
    KEY = "key",
    KEY_DESC = "-key",
    NAME = "name",
    NAME_DESC = "-name",
  }
  export type SortType = typeof Sort[keyof typeof Sort];
}
export interface GetNamespaceRequest {
  namespaceIdOrKey: string
}
export interface UpdateNamespaceRequest {
  namespaceId: string
  body: UpdateNamespaceDto
}
export interface DeleteNamespaceRequest {
  namespaceId: string
}
export interface CreateSessionRequest {
  body: CreateSessionDto
}
export interface ListSessionsRequest {
  _sort?: ListSessionsRequest.Sort
  key?: string
  client?: string
  uid?: string
  _limit?: number
  _offset?: number
}
export namespace ListSessionsRequest {
  export enum Sort {
    CREATED_AT = "createdAt",
    CREATED_AT_DESC = "-createdAt",
    UPDATED_AT = "updatedAt",
    UPDATED_AT_DESC = "-updatedAt",
    EXPIRE_AT = "expireAt",
    EXPIRE_AT_DESC = "-expireAt",
  }
  export type SortType = typeof Sort[keyof typeof Sort];
}
export interface GetSessionRequest {
  sessionId: string
}
export interface UpdateSessionRequest {
  sessionId: string
  body: UpdateSessionDto
}
export interface DeleteSessionRequest {
  sessionId: string
}
export interface CreateCaptchaRequest {
  body: CreateCaptchaDto
}
export interface ListCaptchasRequest {
  _sort?: ListCaptchasRequest.Sort
  code?: string
  key?: string
  _limit?: number
  _offset?: number
}
export namespace ListCaptchasRequest {
  export enum Sort {
    CREATED_AT = "createdAt",
    CREATED_AT_DESC = "-createdAt",
    UPDATED_AT = "updatedAt",
    UPDATED_AT_DESC = "-updatedAt",
    EXPIRE_AT = "expireAt",
    EXPIRE_AT_DESC = "-expireAt",
  }
  export type SortType = typeof Sort[keyof typeof Sort];
}
export interface GetCaptchaRequest {
  captchaId: string
}
export interface UpdateCaptchaRequest {
  captchaId: string
  body: UpdateCaptchaDto
}
export interface DeleteCaptchaRequest {
  captchaId: string
}
export interface SendEmailRequest {
  body: SendEmailDto
}
export interface CreateEmailRecordRequest {
  body: CreateEmailRecordDto
}
export interface ListEmailRecordsRequest {
  status?: EmailStatus
  _sort?: ListEmailRecordsRequest.Sort
  createdAt_gt?: string
  createdAt_lt?: string
  sentAt_gt?: string
  sentAt_lt?: string
  from?: string
  to?: string
  _limit?: number
  _offset?: number
}
export namespace ListEmailRecordsRequest {
  export enum Sort {
    CREATED_AT = "createdAt",
    CREATED_AT_DESC = "-createdAt",
    UPDATED_AT = "updatedAt",
    UPDATED_AT_DESC = "-updatedAt",
    SENT_AT = "sentAt",
    SENT_AT_DESC = "-sentAt",
  }
  export type SortType = typeof Sort[keyof typeof Sort];
}
export interface GetEmailRecordRequest {
  emailRecordId: string
}
export interface UpdateEmailRecordRequest {
  emailRecordId: string
  body: UpdateEmailRecordDto
}
export interface DeleteEmailRecordRequest {
  emailRecordId: string
}
export interface ListIndustriesRequest {
}
export interface ListRegionsRequest {
}
export interface SendSmsRequest {
  body: SendSmsDto
}
export interface CreateSmsRecordRequest {
  body: CreateSmsRecordDto
}
export interface ListSmsRecordsRequest {
  status?: SmsStatus
  _sort?: ListSmsRecordsRequest.Sort
  createdAt_gt?: string
  createdAt_lt?: string
  sentAt_gt?: string
  sentAt_lt?: string
  phone?: string
  sign?: string
  _limit?: number
  _offset?: number
}
export namespace ListSmsRecordsRequest {
  export enum Sort {
    CREATED_AT = "createdAt",
    CREATED_AT_DESC = "-createdAt",
    UPDATED_AT = "updatedAt",
    UPDATED_AT_DESC = "-updatedAt",
    SENT_AT = "sentAt",
    SENT_AT_DESC = "-sentAt",
  }
  export type SortType = typeof Sort[keyof typeof Sort];
}
export interface GetSmsRecordRequest {
  smsRecordId: string
}
export interface UpdateSmsRecordRequest {
  smsRecordId: string
  body: UpdateSmsRecordDto
}
export interface DeleteSmsRecordRequest {
  smsRecordId: string
}
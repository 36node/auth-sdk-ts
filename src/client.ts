// Generated by openapi-ts-gen. DO NOT EDIT
/* eslint-disable */
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

import * as schemas from "./schemas";

export class CoreAPIClient {
  public client: AxiosInstance;
  constructor(client: AxiosInstance) {
    if (!client.defaults.baseURL) {
      throw new Error("client's baseURL MUST specified");
    }
    this.client = client;
  }
  hello = (req: schemas.HelloRequest, config: AxiosRequestConfig = {}): Response<schemas.HealthCheckResult> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/hello`, 
      method: "get", 
    })
  }
  createUser = (req: schemas.CreateUserRequest, config: AxiosRequestConfig = {}): Response<schemas.User> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/users`, 
      method: "post", 
      data: req.body,
    })
  }
  listUsers = (req: schemas.ListUsersRequest, config: AxiosRequestConfig = {}): Response<schemas.User[]> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/users`, 
      method: "get", 
      params: pick(req, ["ns", "ns_scope", "_sort", "id", "name_like", "username", "username_like", "nickname_like", "email", "phone", "registerRegion", "roles", "dialingPrefix", "_limit", "_offset"]),
    })
  }
  getUser = (req: schemas.GetUserRequest, config: AxiosRequestConfig = {}): Response<schemas.User> => {
    checkPathParams("getUser", req, ["userId"])
    return this.client.request({
      ...config,
      url: `/auth/v1/users/${req.userId}`, 
      method: "get", 
    })
  }
  updateUser = (req: schemas.UpdateUserRequest, config: AxiosRequestConfig = {}): Response<schemas.User> => {
    checkPathParams("updateUser", req, ["userId"])
    return this.client.request({
      ...config,
      url: `/auth/v1/users/${req.userId}`, 
      method: "patch", 
      data: req.body,
    })
  }
  deleteUser = (req: schemas.DeleteUserRequest, config: AxiosRequestConfig = {}): Response<void> => {
    checkPathParams("deleteUser", req, ["userId"])
    return this.client.request({
      ...config,
      url: `/auth/v1/users/${req.userId}`, 
      method: "delete", 
    })
  }
  createNamespace = (req: schemas.CreateNamespaceRequest, config: AxiosRequestConfig = {}): Response<schemas.Namespace> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/namespaces`, 
      method: "post", 
      data: req.body,
    })
  }
  listNamespaces = (req: schemas.ListNamespacesRequest, config: AxiosRequestConfig = {}): Response<schemas.Namespace[]> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/namespaces`, 
      method: "get", 
      params: pick(req, ["parent", "parent_scope", "_sort", "name_like", "labels", "_limit", "_offset"]),
    })
  }
  getNamespace = (req: schemas.GetNamespaceRequest, config: AxiosRequestConfig = {}): Response<schemas.Namespace> => {
    checkPathParams("getNamespace", req, ["namespaceIdOrNs"])
    return this.client.request({
      ...config,
      url: `/auth/v1/namespaces/${req.namespaceIdOrNs}`, 
      method: "get", 
    })
  }
  updateNamespace = (req: schemas.UpdateNamespaceRequest, config: AxiosRequestConfig = {}): Response<schemas.Namespace> => {
    checkPathParams("updateNamespace", req, ["namespaceId"])
    return this.client.request({
      ...config,
      url: `/auth/v1/namespaces/${req.namespaceId}`, 
      method: "patch", 
      data: req.body,
    })
  }
  deleteNamespace = (req: schemas.DeleteNamespaceRequest, config: AxiosRequestConfig = {}): Response<void> => {
    checkPathParams("deleteNamespace", req, ["namespaceId"])
    return this.client.request({
      ...config,
      url: `/auth/v1/namespaces/${req.namespaceId}`, 
      method: "delete", 
    })
  }
  listScopes = (req: schemas.ListScopesRequest, config: AxiosRequestConfig = {}): Response<schemas.Namespace[]> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/scopes`, 
      method: "get", 
      params: pick(req, ["parent", "_sort", "labels", "_limit", "_offset", "name_like"]),
    })
  }
  createCaptchaBySms = (req: schemas.CreateCaptchaBySmsRequest, config: AxiosRequestConfig = {}): Response<schemas.CaptchaBySmsResult> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/captchas/@createCaptchaBySms`, 
      method: "post", 
      data: req.body,
    })
  }
  createCaptchaByEmail = (req: schemas.CreateCaptchaByEmailRequest, config: AxiosRequestConfig = {}): Response<schemas.CaptchaByEmailResult> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/captchas/@createCaptchaByEmail`, 
      method: "post", 
      data: req.body,
    })
  }
  createCaptchaByPhoto = (req: schemas.CreateCaptchaByPhotoRequest, config: AxiosRequestConfig = {}): Response<schemas.CaptchaByPhotoResult> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/captchas/@createCaptchaByPhoto`, 
      method: "post", 
      data: req.body,
    })
  }
  createSession = (req: schemas.CreateSessionRequest, config: AxiosRequestConfig = {}): Response<schemas.Session> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/sessions`, 
      method: "post", 
      data: req.body,
    })
  }
  listSessions = (req: schemas.ListSessionsRequest, config: AxiosRequestConfig = {}): Response<schemas.Session[]> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/sessions`, 
      method: "get", 
      params: pick(req, ["_sort", "key", "client", "tokenExpiresIn", "uid", "_limit", "_offset"]),
    })
  }
  getSession = (req: schemas.GetSessionRequest, config: AxiosRequestConfig = {}): Response<schemas.Session> => {
    checkPathParams("getSession", req, ["sessionId"])
    return this.client.request({
      ...config,
      url: `/auth/v1/sessions/${req.sessionId}`, 
      method: "get", 
    })
  }
  updateSession = (req: schemas.UpdateSessionRequest, config: AxiosRequestConfig = {}): Response<schemas.Session> => {
    checkPathParams("updateSession", req, ["sessionId"])
    return this.client.request({
      ...config,
      url: `/auth/v1/sessions/${req.sessionId}`, 
      method: "patch", 
      data: req.body,
    })
  }
  deleteSession = (req: schemas.DeleteSessionRequest, config: AxiosRequestConfig = {}): Response<void> => {
    checkPathParams("deleteSession", req, ["sessionId"])
    return this.client.request({
      ...config,
      url: `/auth/v1/sessions/${req.sessionId}`, 
      method: "delete", 
    })
  }
  restrictToken = (req: schemas.RestrictTokenRequest, config: AxiosRequestConfig = {}): Response<schemas.OnlyToken> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/sessions/@restrictToken`, 
      method: "post", 
      data: req.body,
    })
  }
  listRegions = (req: schemas.ListRegionsRequest, config: AxiosRequestConfig = {}): Response<schemas.Region[]> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/base-data/regions`, 
      method: "get", 
    })
  }
  init = (req: schemas.InitRequest, config: AxiosRequestConfig = {}): Response<void> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/init`, 
      method: "post", 
    })
  }
  getMyInfo = (req: schemas.GetMyInfoRequest, config: AxiosRequestConfig = {}): Response<schemas.MyInfo> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/info`, 
      method: "get", 
    })
  }
  updateMyInfo = (req: schemas.UpdateMyInfoRequest, config: AxiosRequestConfig = {}): Response<schemas.MyInfo> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/info`, 
      method: "patch", 
      data: req.body,
    })
  }
  updateMyPassword = (req: schemas.UpdateMyPasswordRequest, config: AxiosRequestConfig = {}): Response<schemas.MyInfo> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/password`, 
      method: "patch", 
      data: req.body,
    })
  }
  resetMyPassword = (req: schemas.ResetMyPasswordRequest, config: AxiosRequestConfig = {}): Response<schemas.MyInfo> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/@resetPassword`, 
      method: "post", 
      data: req.body,
    })
  }
  registerUserByPhone = (req: schemas.RegisterUserByPhoneRequest, config: AxiosRequestConfig = {}): Response<schemas.SessionWithToken> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/@registerByPhone`, 
      method: "post", 
      data: req.body,
    })
  }
  registerUserByEmail = (req: schemas.RegisterUserByEmailRequest, config: AxiosRequestConfig = {}): Response<schemas.SessionWithToken> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/@registerByEmail`, 
      method: "post", 
      data: req.body,
    })
  }
  register = (req: schemas.RegisterRequest, config: AxiosRequestConfig = {}): Response<schemas.SessionWithToken> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/@register`, 
      method: "post", 
      data: req.body,
    })
  }
  login = (req: schemas.LoginRequest, config: AxiosRequestConfig = {}): Response<schemas.SessionWithToken> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/@login`, 
      method: "post", 
      data: req.body,
    })
  }
  loginByPhone = (req: schemas.LoginByPhoneRequest, config: AxiosRequestConfig = {}): Response<schemas.SessionWithToken> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/@loginByPhone`, 
      method: "post", 
      data: req.body,
    })
  }
  loginByEmail = (req: schemas.LoginByEmailRequest, config: AxiosRequestConfig = {}): Response<schemas.SessionWithToken> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/@loginByEmail`, 
      method: "post", 
      data: req.body,
    })
  }
  updateMyEmail = (req: schemas.UpdateMyEmailRequest, config: AxiosRequestConfig = {}): Response<schemas.MyInfo> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/email`, 
      method: "patch", 
      data: req.body,
    })
  }
  updateMyPhone = (req: schemas.UpdateMyPhoneRequest, config: AxiosRequestConfig = {}): Response<schemas.MyInfo> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/phone`, 
      method: "patch", 
      data: req.body,
    })
  }
  logout = (req: schemas.LogoutRequest, config: AxiosRequestConfig = {}): Response<void> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/@logout`, 
      method: "post", 
      data: req.body,
    })
  }
  refreshSession = (req: schemas.RefreshSessionRequest, config: AxiosRequestConfig = {}): Response<schemas.SessionWithToken> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/@refresh`, 
      method: "post", 
      data: req.body,
    })
  }
  verifyIdentity = (req: schemas.VerifyIdentityRequest, config: AxiosRequestConfig = {}): Response<schemas.Identity> => {
    return this.client.request({
      ...config,
      url: `/auth/v1/me/@verifyIdentity`, 
      method: "post", 
      data: req.body,
    })
  }
}

type Response<T> = Promise<AxiosResponse<T>>
type Dict = Record<string, any>;

function checkPathParams(op: string, req: Dict, ks: string[]) {
  ks.forEach((p) => {
    if (!req[p]) {
      throw new Error(`${p} is required for ${op}`)
    }
  })
}

function pick(o: Dict, ks: string[]) {
  return ks.reduce((r, p) => {
    r[p] = o[p];
    return r;
  }, {} as Dict)
}

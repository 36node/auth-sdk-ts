// Generated by openapi-ts-gen. DO NOT EDIT
/* eslint-disable */
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

import * as schemas from "./schemas";

export class CoreAPIClient {
  public client: AxiosInstance;
  constructor(client: AxiosInstance) {
    if (!client.defaults.baseURL) {
      throw new Error("client's baseURL MUST specified");
    }
    this.client = client;
  }
  hello = (req: schemas.HelloRequest, config: AxiosRequestConfig = {}): Response<schemas.HealthCheckResult> => {
    return this.client.request({
      ...config,
      url: `/hello`, 
      method: "get", 
    })
  }
  login = (req: schemas.LoginRequest, config: AxiosRequestConfig = {}): Response<schemas.SessionWithToken> => {
    return this.client.request({
      ...config,
      url: `/auth/@login`, 
      method: "post", 
      data: req.body,
    })
  }
  loginByEmail = (req: schemas.LoginByEmailRequest, config: AxiosRequestConfig = {}): Response<schemas.SessionWithToken> => {
    return this.client.request({
      ...config,
      url: `/auth/@loginByEmail`, 
      method: "post", 
      data: req.body,
    })
  }
  loginByPhone = (req: schemas.LoginByPhoneRequest, config: AxiosRequestConfig = {}): Response<schemas.SessionWithToken> => {
    return this.client.request({
      ...config,
      url: `/auth/@loginByPhone`, 
      method: "post", 
      data: req.body,
    })
  }
  register = (req: schemas.RegisterRequest, config: AxiosRequestConfig = {}): Response<schemas.User> => {
    return this.client.request({
      ...config,
      url: `/auth/@register`, 
      method: "post", 
      data: req.body,
    })
  }
  registerByPhone = (req: schemas.RegisterByPhoneRequest, config: AxiosRequestConfig = {}): Response<schemas.User> => {
    return this.client.request({
      ...config,
      url: `/auth/@registerByPhone`, 
      method: "post", 
      data: req.body,
    })
  }
  registerByEmail = (req: schemas.RegisterByEmailRequest, config: AxiosRequestConfig = {}): Response<schemas.User> => {
    return this.client.request({
      ...config,
      url: `/auth/@registerByEmail`, 
      method: "post", 
      data: req.body,
    })
  }
  signToken = (req: schemas.SignTokenRequest, config: AxiosRequestConfig = {}): Response<schemas.Token> => {
    return this.client.request({
      ...config,
      url: `/auth/@signToken`, 
      method: "post", 
      data: req.body,
    })
  }
  refresh = (req: schemas.RefreshRequest, config: AxiosRequestConfig = {}): Response<schemas.SessionWithToken> => {
    return this.client.request({
      ...config,
      url: `/auth/@refresh`, 
      method: "post", 
      data: req.body,
    })
  }
  createUser = (req: schemas.CreateUserRequest, config: AxiosRequestConfig = {}): Response<schemas.User> => {
    return this.client.request({
      ...config,
      url: `/users`, 
      method: "post", 
      data: req.body,
    })
  }
  listUsers = (req: schemas.ListUsersRequest, config: AxiosRequestConfig = {}): Response<schemas.User[]> => {
    return this.client.request({
      ...config,
      url: `/users`, 
      method: "get", 
      params: pick(req, ["_sort", "id", "name_like", "username_like", "nickname_like", "ns", "ns_start", "username", "email", "phone", "registerRegion", "roles", "_limit", "_offset"]),
    })
  }
  getUser = (req: schemas.GetUserRequest, config: AxiosRequestConfig = {}): Response<schemas.User> => {
    checkPathParams("getUser", req, ["userId"])
    return this.client.request({
      ...config,
      url: `/users/${req.userId}`, 
      method: "get", 
    })
  }
  updateUser = (req: schemas.UpdateUserRequest, config: AxiosRequestConfig = {}): Response<schemas.User> => {
    checkPathParams("updateUser", req, ["userId"])
    return this.client.request({
      ...config,
      url: `/users/${req.userId}`, 
      method: "patch", 
      data: req.body,
    })
  }
  deleteUser = (req: schemas.DeleteUserRequest, config: AxiosRequestConfig = {}): Response<void> => {
    checkPathParams("deleteUser", req, ["userId"])
    return this.client.request({
      ...config,
      url: `/users/${req.userId}`, 
      method: "delete", 
    })
  }
  verifyIdentity = (req: schemas.VerifyIdentityRequest, config: AxiosRequestConfig = {}): Response<schemas.User> => {
    checkPathParams("verifyIdentity", req, ["userId"])
    return this.client.request({
      ...config,
      url: `/users/${req.userId}/@verifyIdentity`, 
      method: "post", 
    })
  }
  resetPassword = (req: schemas.ResetPasswordRequest, config: AxiosRequestConfig = {}): Response<void> => {
    checkPathParams("resetPassword", req, ["userId"])
    return this.client.request({
      ...config,
      url: `/users/${req.userId}/@resetPassword`, 
      method: "post", 
      data: req.body,
    })
  }
  updatePassword = (req: schemas.UpdatePasswordRequest, config: AxiosRequestConfig = {}): Response<void> => {
    checkPathParams("updatePassword", req, ["userId"])
    return this.client.request({
      ...config,
      url: `/users/${req.userId}/@updatePassword`, 
      method: "post", 
      data: req.body,
    })
  }
  createNamespace = (req: schemas.CreateNamespaceRequest, config: AxiosRequestConfig = {}): Response<schemas.Namespace> => {
    return this.client.request({
      ...config,
      url: `/namespaces`, 
      method: "post", 
      data: req.body,
    })
  }
  listNamespaces = (req: schemas.ListNamespacesRequest, config: AxiosRequestConfig = {}): Response<schemas.Namespace[]> => {
    return this.client.request({
      ...config,
      url: `/namespaces`, 
      method: "get", 
      params: pick(req, ["ns", "ns_start", "_sort", "name_like", "labels", "key", "_limit", "_offset"]),
    })
  }
  getNamespace = (req: schemas.GetNamespaceRequest, config: AxiosRequestConfig = {}): Response<schemas.Namespace> => {
    checkPathParams("getNamespace", req, ["namespaceIdOrKey"])
    return this.client.request({
      ...config,
      url: `/namespaces/${req.namespaceIdOrKey}`, 
      method: "get", 
    })
  }
  updateNamespace = (req: schemas.UpdateNamespaceRequest, config: AxiosRequestConfig = {}): Response<schemas.Namespace> => {
    checkPathParams("updateNamespace", req, ["namespaceId"])
    return this.client.request({
      ...config,
      url: `/namespaces/${req.namespaceId}`, 
      method: "patch", 
      data: req.body,
    })
  }
  deleteNamespace = (req: schemas.DeleteNamespaceRequest, config: AxiosRequestConfig = {}): Response<void> => {
    checkPathParams("deleteNamespace", req, ["namespaceId"])
    return this.client.request({
      ...config,
      url: `/namespaces/${req.namespaceId}`, 
      method: "delete", 
    })
  }
  createSession = (req: schemas.CreateSessionRequest, config: AxiosRequestConfig = {}): Response<schemas.Session> => {
    return this.client.request({
      ...config,
      url: `/sessions`, 
      method: "post", 
      data: req.body,
    })
  }
  listSessions = (req: schemas.ListSessionsRequest, config: AxiosRequestConfig = {}): Response<schemas.Session[]> => {
    return this.client.request({
      ...config,
      url: `/sessions`, 
      method: "get", 
      params: pick(req, ["_sort", "key", "client", "uid", "_limit", "_offset"]),
    })
  }
  getSession = (req: schemas.GetSessionRequest, config: AxiosRequestConfig = {}): Response<schemas.Session> => {
    checkPathParams("getSession", req, ["sessionId"])
    return this.client.request({
      ...config,
      url: `/sessions/${req.sessionId}`, 
      method: "get", 
    })
  }
  updateSession = (req: schemas.UpdateSessionRequest, config: AxiosRequestConfig = {}): Response<schemas.Session> => {
    checkPathParams("updateSession", req, ["sessionId"])
    return this.client.request({
      ...config,
      url: `/sessions/${req.sessionId}`, 
      method: "patch", 
      data: req.body,
    })
  }
  deleteSession = (req: schemas.DeleteSessionRequest, config: AxiosRequestConfig = {}): Response<void> => {
    checkPathParams("deleteSession", req, ["sessionId"])
    return this.client.request({
      ...config,
      url: `/sessions/${req.sessionId}`, 
      method: "delete", 
    })
  }
  createCaptcha = (req: schemas.CreateCaptchaRequest, config: AxiosRequestConfig = {}): Response<schemas.Captcha> => {
    return this.client.request({
      ...config,
      url: `/captchas`, 
      method: "post", 
      data: req.body,
    })
  }
  listCaptchas = (req: schemas.ListCaptchasRequest, config: AxiosRequestConfig = {}): Response<schemas.Captcha[]> => {
    return this.client.request({
      ...config,
      url: `/captchas`, 
      method: "get", 
      params: pick(req, ["_sort", "code", "key", "_limit", "_offset"]),
    })
  }
  getCaptcha = (req: schemas.GetCaptchaRequest, config: AxiosRequestConfig = {}): Response<schemas.Captcha> => {
    checkPathParams("getCaptcha", req, ["captchaId"])
    return this.client.request({
      ...config,
      url: `/captchas/${req.captchaId}`, 
      method: "get", 
    })
  }
  updateCaptcha = (req: schemas.UpdateCaptchaRequest, config: AxiosRequestConfig = {}): Response<schemas.Captcha> => {
    checkPathParams("updateCaptcha", req, ["captchaId"])
    return this.client.request({
      ...config,
      url: `/captchas/${req.captchaId}`, 
      method: "patch", 
      data: req.body,
    })
  }
  deleteCaptcha = (req: schemas.DeleteCaptchaRequest, config: AxiosRequestConfig = {}): Response<void> => {
    checkPathParams("deleteCaptcha", req, ["captchaId"])
    return this.client.request({
      ...config,
      url: `/captchas/${req.captchaId}`, 
      method: "delete", 
    })
  }
  sendEmail = (req: schemas.SendEmailRequest, config: AxiosRequestConfig = {}): Response<void> => {
    return this.client.request({
      ...config,
      url: `/email/@sendEmail`, 
      method: "post", 
      data: req.body,
    })
  }
  createEmailRecord = (req: schemas.CreateEmailRecordRequest, config: AxiosRequestConfig = {}): Response<schemas.EmailRecord> => {
    return this.client.request({
      ...config,
      url: `/email/records`, 
      method: "post", 
      data: req.body,
    })
  }
  listEmailRecords = (req: schemas.ListEmailRecordsRequest, config: AxiosRequestConfig = {}): Response<schemas.EmailRecord[]> => {
    return this.client.request({
      ...config,
      url: `/email/records`, 
      method: "get", 
      params: pick(req, ["status", "_sort", "createdAt_gt", "createdAt_lt", "sentAt_gt", "sentAt_lt", "from", "to", "_limit", "_offset"]),
    })
  }
  getEmailRecord = (req: schemas.GetEmailRecordRequest, config: AxiosRequestConfig = {}): Response<schemas.EmailRecord> => {
    checkPathParams("getEmailRecord", req, ["emailRecordId"])
    return this.client.request({
      ...config,
      url: `/email/records/${req.emailRecordId}`, 
      method: "get", 
    })
  }
  updateEmailRecord = (req: schemas.UpdateEmailRecordRequest, config: AxiosRequestConfig = {}): Response<schemas.EmailRecord> => {
    checkPathParams("updateEmailRecord", req, ["emailRecordId"])
    return this.client.request({
      ...config,
      url: `/email/records/${req.emailRecordId}`, 
      method: "patch", 
      data: req.body,
    })
  }
  deleteEmailRecord = (req: schemas.DeleteEmailRecordRequest, config: AxiosRequestConfig = {}): Response<void> => {
    checkPathParams("deleteEmailRecord", req, ["emailRecordId"])
    return this.client.request({
      ...config,
      url: `/email/records/${req.emailRecordId}`, 
      method: "delete", 
    })
  }
  listIndustries = (req: schemas.ListIndustriesRequest, config: AxiosRequestConfig = {}): Response<schemas.Industry[]> => {
    return this.client.request({
      ...config,
      url: `/industries`, 
      method: "get", 
    })
  }
  listRegions = (req: schemas.ListRegionsRequest, config: AxiosRequestConfig = {}): Response<schemas.Region[]> => {
    return this.client.request({
      ...config,
      url: `/regions`, 
      method: "get", 
    })
  }
  sendSms = (req: schemas.SendSmsRequest, config: AxiosRequestConfig = {}): Response<void> => {
    return this.client.request({
      ...config,
      url: `/sms/@sendSms`, 
      method: "post", 
      data: req.body,
    })
  }
  createSmsRecord = (req: schemas.CreateSmsRecordRequest, config: AxiosRequestConfig = {}): Response<schemas.SmsRecord> => {
    return this.client.request({
      ...config,
      url: `/sms/records`, 
      method: "post", 
      data: req.body,
    })
  }
  listSmsRecords = (req: schemas.ListSmsRecordsRequest, config: AxiosRequestConfig = {}): Response<schemas.SmsRecord[]> => {
    return this.client.request({
      ...config,
      url: `/sms/records`, 
      method: "get", 
      params: pick(req, ["status", "_sort", "createdAt_gt", "createdAt_lt", "sentAt_gt", "sentAt_lt", "phone", "sign", "_limit", "_offset"]),
    })
  }
  getSmsRecord = (req: schemas.GetSmsRecordRequest, config: AxiosRequestConfig = {}): Response<schemas.SmsRecord> => {
    checkPathParams("getSmsRecord", req, ["smsRecordId"])
    return this.client.request({
      ...config,
      url: `/sms/records/${req.smsRecordId}`, 
      method: "get", 
    })
  }
  updateSmsRecord = (req: schemas.UpdateSmsRecordRequest, config: AxiosRequestConfig = {}): Response<schemas.SmsRecord> => {
    checkPathParams("updateSmsRecord", req, ["smsRecordId"])
    return this.client.request({
      ...config,
      url: `/sms/records/${req.smsRecordId}`, 
      method: "patch", 
      data: req.body,
    })
  }
  deleteSmsRecord = (req: schemas.DeleteSmsRecordRequest, config: AxiosRequestConfig = {}): Response<void> => {
    checkPathParams("deleteSmsRecord", req, ["smsRecordId"])
    return this.client.request({
      ...config,
      url: `/sms/records/${req.smsRecordId}`, 
      method: "delete", 
    })
  }
}

type Response<T> = Promise<AxiosResponse<T>>
type Dict = Record<string, any>;

function checkPathParams(op: string, req: Dict, ks: string[]) {
  ks.forEach((p) => {
    if (!req[p]) {
      throw new Error(`${p} is required for ${op}`)
    }
  })
}

function pick(o: Dict, ks: string[]) {
  return ks.reduce((r, p) => {
    r[p] = o[p];
    return r;
  }, {} as Dict)
}

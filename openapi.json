{
  "hash": "a35ca49b51608e9609d104833416477b242daedf7680d57ac76bd78456497539",
  "openapi": "3.0.0",
  "paths": {
    "/hello": {
      "get": {
        "operationId": "hello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Hello!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppResult"
                }
              }
            }
          }
        },
        "summary": "health check",
        "tags": [
          "app"
        ]
      }
    },
    "/cleanup": {
      "get": {
        "operationId": "cleanup",
        "parameters": [],
        "responses": {
          "200": {
            "description": "clean up result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppResult"
                }
              }
            }
          }
        },
        "summary": "clearnup all data",
        "tags": [
          "app"
        ]
      }
    },
    "/auth/@login": {
      "post": {
        "operationId": "login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The session with token has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionWithToken"
                }
              }
            }
          }
        },
        "summary": "login with username/phone/email and password",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/authorizer": {
      "get": {
        "operationId": "getAuthorizer",
        "parameters": [
          {
            "name": "provider",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirectUri",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseType",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorizer"
                }
              }
            }
          }
        },
        "summary": "",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/@loginByGithub": {
      "post": {
        "operationId": "loginByGithub",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GithubDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The session with token has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionWithToken"
                }
              }
            }
          }
        },
        "summary": "login by Github",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/@loginByOAuth": {
      "post": {
        "operationId": "loginByOAuth",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuthDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The session with token has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionWithToken"
                }
              }
            }
          }
        },
        "summary": "login by OAuth",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/@loginByEmail": {
      "post": {
        "operationId": "loginByEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginByEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The session with token has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionWithToken"
                }
              }
            }
          }
        },
        "summary": "login by email and code",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/@loginByPhone": {
      "post": {
        "operationId": "loginByPhone",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginByPhoneDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The session with token has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionWithToken"
                }
              }
            }
          }
        },
        "summary": "login with phone and code",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/@logout": {
      "post": {
        "operationId": "logout",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "summary": "logout",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/@register": {
      "post": {
        "operationId": "register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user just created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "summary": "register with username and password",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/@registerByPhone": {
      "post": {
        "operationId": "registerByPhone",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterbyPhoneDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user just created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "summary": "register with phone and code",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/@registerByEmail": {
      "post": {
        "operationId": "registerByEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterByEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user just created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "summary": "register with email and code",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/@signToken": {
      "post": {
        "operationId": "signToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The token has been successfully signed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          }
        },
        "summary": "sign token\nä¸ºç¨æ·ç­¾åä¸ä¸ªä¸æ¬¡æ§ç token æ æ³ refresh",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/@refresh": {
      "post": {
        "operationId": "refresh",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The session with token has been successfully refreshed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionWithToken"
                }
              }
            }
          }
        },
        "summary": "refresh",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/@resetPasswordByPhone": {
      "post": {
        "operationId": "resetPasswordByPhone",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordByPhoneDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "summary": "Reset password by phone",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/@resetPasswordByEmail": {
      "post": {
        "operationId": "resetPasswordByEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordByEmailDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "summary": "Reset password by email",
        "tags": [
          "auth"
        ]
      }
    },
    "/captchas": {
      "post": {
        "operationId": "createCaptcha",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCaptchaDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The captcha has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Captcha"
                }
              }
            }
          }
        },
        "summary": "Create captcha",
        "tags": [
          "captcha"
        ]
      },
      "get": {
        "operationId": "listCaptchas",
        "parameters": [
          {
            "name": "_sort",
            "required": false,
            "in": "query",
            "description": "æåºåæ°",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "-createdAt",
                "updatedAt",
                "-updatedAt",
                "expireAt",
                "-expireAt"
              ]
            }
          },
          {
            "name": "code",
            "required": false,
            "in": "query",
            "description": "éªè¯ç ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": false,
            "in": "query",
            "description": "key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "description": "åé¡µå¤§å°",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "description": "åé¡µåç§»",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of captchas.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Captcha"
                  }
                }
              }
            }
          }
        },
        "summary": "List captchas",
        "tags": [
          "captcha"
        ]
      }
    },
    "/captchas/{captchaId}": {
      "get": {
        "operationId": "getCaptcha",
        "parameters": [
          {
            "name": "captchaId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The captcha with expected id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Captcha"
                }
              }
            }
          }
        },
        "summary": "Find captcha by id",
        "tags": [
          "captcha"
        ]
      },
      "patch": {
        "operationId": "updateCaptcha",
        "parameters": [
          {
            "name": "captchaId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCaptchaDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The captcha updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Captcha"
                }
              }
            }
          }
        },
        "summary": "Update captcha",
        "tags": [
          "captcha"
        ]
      },
      "delete": {
        "operationId": "deleteCaptcha",
        "parameters": [
          {
            "name": "captchaId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        },
        "summary": "Delete captcha",
        "tags": [
          "captcha"
        ]
      }
    },
    "/captchas/@verifyCaptcha": {
      "post": {
        "operationId": "verifyCaptcha",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyCaptchaDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Check if the captcha is valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCaptchaResultDto"
                }
              }
            }
          }
        },
        "summary": "verify captcha",
        "tags": [
          "captcha"
        ]
      }
    },
    "/email/@sendEmail": {
      "post": {
        "operationId": "sendEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content."
          }
        },
        "summary": "Send plain text email",
        "tags": [
          "email"
        ]
      }
    },
    "/email/records": {
      "post": {
        "operationId": "createEmailRecord",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailRecordDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The email record has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailRecord"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Create email record",
        "tags": [
          "emailRecord"
        ]
      },
      "get": {
        "operationId": "listEmailRecords",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "åéç¶æ",
            "schema": {
              "$ref": "#/components/schemas/EmailStatus"
            }
          },
          {
            "name": "_sort",
            "required": false,
            "in": "query",
            "description": "æåºåæ°",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "-createdAt",
                "updatedAt",
                "-updatedAt",
                "sentAt",
                "-sentAt"
              ]
            }
          },
          {
            "name": "createdAt_gt",
            "required": false,
            "in": "query",
            "description": "åå»ºæ¶é´å¤§äºè¯¥æ¶é´",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAt_lt",
            "required": false,
            "in": "query",
            "description": "åå»ºæ¶é´å°äºè¯¥æ¶é´",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "sentAt_gt",
            "required": false,
            "in": "query",
            "description": "åéæ¶é´å¤§äºè¯¥æ¶é´",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "sentAt_lt",
            "required": false,
            "in": "query",
            "description": "åéæ¶é´å°äºè¯¥æ¶é´",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "åä»¶è",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "æ¶ä»¶è",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "description": "åé¡µå¤§å°",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "description": "åé¡µåç§»",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of email records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailRecord"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "List email records",
        "tags": [
          "emailRecord"
        ]
      }
    },
    "/email/records/{emailRecordId}": {
      "get": {
        "operationId": "getEmailRecord",
        "parameters": [
          {
            "name": "emailRecordId",
            "required": true,
            "in": "path",
            "description": "Email record id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The email record with expected id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailRecord"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Find email record by id",
        "tags": [
          "emailRecord"
        ]
      },
      "patch": {
        "operationId": "updateEmailRecord",
        "parameters": [
          {
            "name": "emailRecordId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailRecordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The email record updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailRecord"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Update email record",
        "tags": [
          "emailRecord"
        ]
      },
      "delete": {
        "operationId": "deleteEmailRecord",
        "parameters": [
          {
            "name": "emailRecordId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Delete email record",
        "tags": [
          "emailRecord"
        ]
      }
    },
    "/groups": {
      "post": {
        "operationId": "createGroup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The group has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create group",
        "tags": [
          "group"
        ]
      },
      "get": {
        "operationId": "listGroups",
        "parameters": [
          {
            "name": "_sort",
            "required": false,
            "in": "query",
            "description": "æåºåæ°",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "-createdAt",
                "updatedAt",
                "-updatedAt"
              ]
            }
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "æ id ç­é",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "name_like",
            "required": false,
            "in": "query",
            "description": "åç§° æ¨¡ç³æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "åç§°",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "description": "æ¯å¦å¯ç¨",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "description": "åé¡µå¤§å°",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "description": "åé¡µåç§»",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List groups",
        "tags": [
          "group"
        ]
      }
    },
    "/groups/{groupIdOrName}": {
      "get": {
        "operationId": "getGroup",
        "parameters": [
          {
            "name": "groupIdOrName",
            "required": true,
            "in": "path",
            "description": "Group id or name, if name should encodeURIComponent",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The group with expected id or name.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Find group by id or name",
        "tags": [
          "group"
        ]
      }
    },
    "/groups/{groupId}": {
      "patch": {
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The group updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update group",
        "tags": [
          "group"
        ]
      },
      "delete": {
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete group",
        "tags": [
          "group"
        ]
      }
    },
    "/groups/{groupName}/@upsertGroupByName": {
      "post": {
        "operationId": "upsertGroupByName",
        "parameters": [
          {
            "name": "groupName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The group upserted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "æ ¹æ® groupName åå»º group",
        "tags": [
          "group"
        ]
      }
    },
    "/namespaces": {
      "post": {
        "operationId": "createNamespace",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNamespaceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The namespace has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Create namespace",
        "tags": [
          "namespace"
        ]
      },
      "get": {
        "operationId": "listNamespaces",
        "parameters": [
          {
            "name": "key",
            "required": false,
            "in": "query",
            "description": "æ key æ¥è¯¢",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "type": "string"
            }
          },
          {
            "name": "key_start",
            "required": false,
            "in": "query",
            "description": "key start æ¥è¯¢",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "type": "string"
            }
          },
          {
            "name": "key_tree",
            "required": false,
            "in": "query",
            "description": "key tree æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ns",
            "required": false,
            "in": "query",
            "description": "æå±å½åç©ºé´",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "type": "string"
            }
          },
          {
            "name": "ns_start",
            "required": false,
            "in": "query",
            "description": "æå±å½åç©ºé´ start æ¥è¯¢",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "type": "string"
            }
          },
          {
            "name": "ns_tree",
            "required": false,
            "in": "query",
            "description": "æå±å½åç©ºé´ tree æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_sort",
            "required": false,
            "in": "query",
            "description": "æåºåæ°",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "-createdAt",
                "updatedAt",
                "-updatedAt",
                "key",
                "-key",
                "name",
                "-name"
              ]
            }
          },
          {
            "name": "name_like",
            "required": false,
            "in": "query",
            "description": "åç§° æ¨¡ç³æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels",
            "required": false,
            "in": "query",
            "description": "æ ç­¾",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "description": "åé¡µå¤§å°",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "description": "åé¡µåç§»",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of namespaces.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Namespace"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "List namespaces",
        "tags": [
          "namespace"
        ]
      }
    },
    "/namespaces/{namespaceIdOrKey}": {
      "get": {
        "operationId": "getNamespace",
        "parameters": [
          {
            "name": "namespaceIdOrKey",
            "required": true,
            "in": "path",
            "description": "Namespace id or key, if key should encodeURIComponent",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The namespace with expected id or key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Find namespace by id or key",
        "tags": [
          "namespace"
        ]
      },
      "patch": {
        "operationId": "updateNamespace",
        "parameters": [
          {
            "name": "namespaceIdOrKey",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNamespaceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The namespace updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Update namespace",
        "tags": [
          "namespace"
        ]
      }
    },
    "/namespaces/{namespaceId}": {
      "delete": {
        "operationId": "deleteNamespace",
        "parameters": [
          {
            "name": "namespaceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Delete namespace",
        "tags": [
          "namespace"
        ]
      }
    },
    "/sessions": {
      "post": {
        "operationId": "createSession",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The session has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Create session",
        "tags": [
          "session"
        ]
      },
      "get": {
        "operationId": "listSessions",
        "parameters": [
          {
            "name": "_sort",
            "required": false,
            "in": "query",
            "description": "æåºåæ°",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "-createdAt",
                "updatedAt",
                "-updatedAt",
                "expireAt",
                "-expireAt"
              ]
            }
          },
          {
            "name": "refreshToken",
            "required": false,
            "in": "query",
            "description": "ç¨ key è¿è¡æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subject",
            "required": false,
            "in": "query",
            "description": "ç¨æ·æç¬¬ä¸æ¹ç¨æ· id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "required": false,
            "in": "query",
            "description": "å¦ææ¥èªç¬¬ä¸æ¹ï¼åä¼å ä¸ source",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissions",
            "required": false,
            "in": "query",
            "description": "è§è²ä¹å¤çæé",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "roles",
            "required": false,
            "in": "query",
            "description": "è§è²",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groups",
            "required": false,
            "in": "query",
            "description": "ç¨æ·æå±çç»",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ns",
            "required": false,
            "in": "query",
            "description": "user ns",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "ç¨æ·ç±»å",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "oneTimeUse",
            "required": false,
            "in": "query",
            "description": "ä¸æ¬¡æ§çï¼ç¦æ­¢è½®æ¢",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "description": "åé¡µå¤§å°",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "description": "åé¡µåç§»",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of sessions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "List sessions",
        "tags": [
          "session"
        ]
      }
    },
    "/sessions/{sessionId}": {
      "get": {
        "operationId": "getSession",
        "parameters": [
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The session with expected id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Find session by id",
        "tags": [
          "session"
        ]
      },
      "patch": {
        "operationId": "updateSession",
        "parameters": [
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSessionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The session updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Update session",
        "tags": [
          "session"
        ]
      },
      "delete": {
        "operationId": "deleteSession",
        "parameters": [
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Delete session",
        "tags": [
          "session"
        ]
      }
    },
    "/sessions/byKey/{key}": {
      "get": {
        "operationId": "getSessionByKey",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The session with expected key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Find session by key",
        "tags": [
          "session"
        ]
      }
    },
    "/sms/@sendSms": {
      "post": {
        "operationId": "sendSms",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendSmsDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content."
          }
        },
        "summary": "Send sms",
        "tags": [
          "sms"
        ]
      }
    },
    "/sms/records": {
      "post": {
        "operationId": "createSmsRecord",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSmsRecordDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The sms record has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsRecord"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Create sms record",
        "tags": [
          "smsRecord"
        ]
      },
      "get": {
        "operationId": "listSmsRecords",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "åéç¶æ",
            "schema": {
              "$ref": "#/components/schemas/SmsStatus"
            }
          },
          {
            "name": "_sort",
            "required": false,
            "in": "query",
            "description": "æåºåæ°",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "-createdAt",
                "updatedAt",
                "-updatedAt",
                "sentAt",
                "-sentAt"
              ]
            }
          },
          {
            "name": "createdAt_gt",
            "required": false,
            "in": "query",
            "description": "åå»ºæ¶é´å¤§äºè¯¥æ¶é´",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAt_lt",
            "required": false,
            "in": "query",
            "description": "åå»ºæ¶é´å°äºè¯¥æ¶é´",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "sentAt_gt",
            "required": false,
            "in": "query",
            "description": "åéæ¶é´å¤§äºè¯¥æ¶é´",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "sentAt_lt",
            "required": false,
            "in": "query",
            "description": "åéæ¶é´å°äºè¯¥æ¶é´",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "description": "ææºå·",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sign",
            "required": false,
            "in": "query",
            "description": "ç­¾å",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "description": "åé¡µå¤§å°",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "description": "åé¡µåç§»",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged of sms record list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SmsRecord"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "List sms records",
        "tags": [
          "smsRecord"
        ]
      }
    },
    "/sms/records/{smsRecordId}": {
      "get": {
        "operationId": "getSmsRecord",
        "parameters": [
          {
            "name": "smsRecordId",
            "required": true,
            "in": "path",
            "description": "Sms record id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The sms record with expected id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsRecord"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Find sms record by id",
        "tags": [
          "smsRecord"
        ]
      },
      "patch": {
        "operationId": "updateSmsRecord",
        "parameters": [
          {
            "name": "smsRecordId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSmsRecordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The sms record updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsRecord"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Update sms record",
        "tags": [
          "smsRecord"
        ]
      },
      "delete": {
        "operationId": "deleteSmsRecord",
        "parameters": [
          {
            "name": "smsRecordId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Delete sms record",
        "tags": [
          "smsRecord"
        ]
      }
    },
    "/third-parties": {
      "post": {
        "operationId": "createThirdParty",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createThirdPartyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The third party has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThirdParty"
                }
              }
            }
          }
        },
        "summary": "create third party",
        "tags": [
          "thirdParty"
        ]
      },
      "get": {
        "operationId": "listThirdParty",
        "parameters": [
          {
            "name": "source",
            "required": false,
            "in": "query",
            "description": "ç¬¬ä¸æ¹ç»å½æ¥æº",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tid",
            "required": false,
            "in": "query",
            "description": "ç¬¬ä¸æ¹ç»å½çç¨æ·å¯ä¸æ è¯",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accessToken",
            "required": false,
            "in": "query",
            "description": "ç¬¬ä¸æ¹ç»å½ accessToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expireAt",
            "required": false,
            "in": "query",
            "description": "ç¬¬ä¸æ¹ç»å½è¿ææ¶é´",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "tokenType",
            "required": false,
            "in": "query",
            "description": "ç¬¬ä¸æ¹ç»å½ token ç±»å",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshToken",
            "required": false,
            "in": "query",
            "description": "ç¬¬ä¸æ¹ç»å½ refreshToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshTokenExpireAt",
            "required": false,
            "in": "query",
            "description": "ç¬¬ä¸æ¹ç»å½ refreshToken è¿ææ¶é´",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "uid",
            "required": false,
            "in": "query",
            "description": "å³èuid",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data",
            "required": false,
            "in": "query",
            "description": "ç¨äºå­å¨ç¬¬ä¸æ¹çé¢å¤æ°æ®",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "description": "åé¡µå¤§å°",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "description": "åé¡µåç§»",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "201": {
            "description": "The third party record list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ThirdParty"
                  }
                }
              }
            }
          }
        },
        "summary": "list third party",
        "tags": [
          "thirdParty"
        ]
      }
    },
    "/third-parties/{id}": {
      "get": {
        "operationId": "getThirdParty",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "The third party.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThirdParty"
                }
              }
            }
          }
        },
        "summary": "get third party",
        "tags": [
          "thirdParty"
        ]
      },
      "patch": {
        "operationId": "updateThirdParty",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateThirdPartyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "The third party has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThirdParty"
                }
              }
            }
          }
        },
        "summary": "update third party",
        "tags": [
          "thirdParty"
        ]
      }
    },
    "/third-parties/source/{source}/uid/{uid}": {
      "get": {
        "operationId": "getThirdPartyByUid",
        "parameters": [
          {
            "name": "source",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "The third party.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThirdParty"
                }
              }
            }
          }
        },
        "summary": "get third party by uid",
        "tags": [
          "thirdParty"
        ]
      }
    },
    "/third-parties/source/{source}/tid/{tid}": {
      "get": {
        "operationId": "getThirdPartyByTid",
        "parameters": [
          {
            "name": "source",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "The third party.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThirdParty"
                }
              }
            }
          }
        },
        "summary": "get third party by tid",
        "tags": [
          "thirdParty"
        ]
      }
    },
    "/third-parties/@bind": {
      "post": {
        "operationId": "bindThirdParty",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bindThirdPartyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The third party has been successfully binded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThirdParty"
                }
              }
            }
          }
        },
        "summary": "bind third party",
        "tags": [
          "thirdParty"
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "createUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "summary": "Create user",
        "tags": [
          "user"
        ]
      },
      "get": {
        "operationId": "listUsers",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "æ id ç­é",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ns",
            "required": false,
            "in": "query",
            "description": "æå±å½åç©ºé´",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "type": "string"
            }
          },
          {
            "name": "ns_start",
            "required": false,
            "in": "query",
            "description": "æå±å½åç©ºé´ start æ¥è¯¢",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "type": "string"
            }
          },
          {
            "name": "_sort",
            "required": false,
            "in": "query",
            "description": "æåºåæ°",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "-createdAt",
                "updatedAt",
                "-updatedAt",
                "lastLoginAt",
                "-lastLoginAt",
                "expireAt",
                "-expireAt"
              ]
            }
          },
          {
            "name": "name_like",
            "required": false,
            "in": "query",
            "description": "åç§° æ¨¡ç³æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username_like",
            "required": false,
            "in": "query",
            "description": "ç¨æ·å æ¨¡ç³æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nickname_like",
            "required": false,
            "in": "query",
            "description": "æµç§° æ¨¡ç³æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ns_tree",
            "required": false,
            "in": "query",
            "description": "æå±å½åç©ºé´ç tree æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expireAt_gte",
            "required": false,
            "in": "query",
            "description": "è¿ææ¶é´å¤§äºè¯¥æ¶é´",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "expireAt_lte",
            "required": false,
            "in": "query",
            "description": "è¿ææ¶é´å°äºè¯¥æ¶é´",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "description": "æ¯å¦å¯ç¨",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "é®ç®±",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groups",
            "required": false,
            "in": "query",
            "description": "å¢é",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "inviter",
            "required": false,
            "in": "query",
            "description": "éè¯·äºº",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels",
            "required": false,
            "in": "query",
            "description": "æ ç­¾",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "å§å",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "description": "ææºå·",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registerRegion",
            "required": false,
            "in": "query",
            "description": "æ³¨åå°åºï¼å­å°åºç¼å·",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roles",
            "required": false,
            "in": "query",
            "description": "è§è²",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "ç¶æ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "ç±»å, ç»å½ç«¯",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "required": false,
            "in": "query",
            "description": "ç¨æ·å",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "description": "åé¡µå¤§å°",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "description": "åé¡µåç§»",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "summary": "List users",
        "tags": [
          "user"
        ]
      }
    },
    "/users/@countUsers": {
      "post": {
        "operationId": "countUsers",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "æ id ç­é",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ns",
            "required": false,
            "in": "query",
            "description": "æå±å½åç©ºé´",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "type": "string"
            }
          },
          {
            "name": "ns_start",
            "required": false,
            "in": "query",
            "description": "æå±å½åç©ºé´ start æ¥è¯¢",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "type": "string"
            }
          },
          {
            "name": "_sort",
            "required": false,
            "in": "query",
            "description": "æåºåæ°",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "-createdAt",
                "updatedAt",
                "-updatedAt",
                "lastLoginAt",
                "-lastLoginAt",
                "expireAt",
                "-expireAt"
              ]
            }
          },
          {
            "name": "name_like",
            "required": false,
            "in": "query",
            "description": "åç§° æ¨¡ç³æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username_like",
            "required": false,
            "in": "query",
            "description": "ç¨æ·å æ¨¡ç³æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nickname_like",
            "required": false,
            "in": "query",
            "description": "æµç§° æ¨¡ç³æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ns_tree",
            "required": false,
            "in": "query",
            "description": "æå±å½åç©ºé´ç tree æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expireAt_gte",
            "required": false,
            "in": "query",
            "description": "è¿ææ¶é´å¤§äºè¯¥æ¶é´",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "expireAt_lte",
            "required": false,
            "in": "query",
            "description": "è¿ææ¶é´å°äºè¯¥æ¶é´",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "description": "æ¯å¦å¯ç¨",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "é®ç®±",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groups",
            "required": false,
            "in": "query",
            "description": "å¢é",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "inviter",
            "required": false,
            "in": "query",
            "description": "éè¯·äºº",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels",
            "required": false,
            "in": "query",
            "description": "æ ç­¾",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "å§å",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "description": "ææºå·",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registerRegion",
            "required": false,
            "in": "query",
            "description": "æ³¨åå°åºï¼å­å°åºç¼å·",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roles",
            "required": false,
            "in": "query",
            "description": "è§è²",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "ç¶æ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "ç±»å, ç»å½ç«¯",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "required": false,
            "in": "query",
            "description": "ç¨æ·å",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "description": "åé¡µå¤§å°",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "description": "åé¡µåç§»",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The result of count users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResult"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResult"
                }
              }
            }
          }
        },
        "summary": "Count users",
        "tags": [
          "user"
        ]
      }
    },
    "/users/{userId}": {
      "get": {
        "operationId": "getUser",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user with expected id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "summary": "Find user",
        "tags": [
          "user"
        ]
      },
      "patch": {
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "summary": "Update user",
        "tags": [
          "user"
        ]
      },
      "delete": {
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        },
        "summary": "Delete user",
        "tags": [
          "user"
        ]
      }
    },
    "/users/{employeeId}/@upsertUserByEmployeeId": {
      "post": {
        "operationId": "upsertUserByEmployeeId",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user upserted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Upsert user by employeeId",
        "tags": [
          "user"
        ]
      }
    },
    "/users/{username}/@upsertUserByUsername": {
      "post": {
        "operationId": "upsertUserByUsername",
        "parameters": [
          {
            "name": "username",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user upserted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Upsert user by username",
        "tags": [
          "user"
        ]
      }
    },
    "/users/{email}/@upsertUserByEmail": {
      "post": {
        "operationId": "upsertUserByEmail",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user upserted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Upsert user by email",
        "tags": [
          "user"
        ]
      }
    },
    "/users/{phone}/@upsertUserByPhone": {
      "post": {
        "operationId": "upsertUserByPhone",
        "parameters": [
          {
            "name": "phone",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user upserted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Upsert user by phone",
        "tags": [
          "user"
        ]
      }
    },
    "/users/{userId}/@verifyIdentity": {
      "post": {
        "operationId": "verifyIdentity",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been verified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "summary": "Verify identity",
        "tags": [
          "user"
        ]
      }
    },
    "/users/{userId}/@updatePassword": {
      "post": {
        "operationId": "updatePassword",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "summary": "Update password",
        "tags": [
          "user"
        ]
      }
    },
    "/users/@aggregate": {
      "post": {
        "operationId": "aggregateUsers",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "æ id ç­é",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ns",
            "required": false,
            "in": "query",
            "description": "æå±å½åç©ºé´",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "type": "string"
            }
          },
          {
            "name": "ns_start",
            "required": false,
            "in": "query",
            "description": "æå±å½åç©ºé´ start æ¥è¯¢",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "type": "string"
            }
          },
          {
            "name": "_sort",
            "required": false,
            "in": "query",
            "description": "æåºåæ°",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "-createdAt",
                "updatedAt",
                "-updatedAt",
                "lastLoginAt",
                "-lastLoginAt",
                "expireAt",
                "-expireAt"
              ]
            }
          },
          {
            "name": "name_like",
            "required": false,
            "in": "query",
            "description": "åç§° æ¨¡ç³æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username_like",
            "required": false,
            "in": "query",
            "description": "ç¨æ·å æ¨¡ç³æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nickname_like",
            "required": false,
            "in": "query",
            "description": "æµç§° æ¨¡ç³æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ns_tree",
            "required": false,
            "in": "query",
            "description": "æå±å½åç©ºé´ç tree æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expireAt_gte",
            "required": false,
            "in": "query",
            "description": "è¿ææ¶é´å¤§äºè¯¥æ¶é´",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "expireAt_lte",
            "required": false,
            "in": "query",
            "description": "è¿ææ¶é´å°äºè¯¥æ¶é´",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "description": "æ¯å¦å¯ç¨",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "é®ç®±",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groups",
            "required": false,
            "in": "query",
            "description": "å¢é",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "inviter",
            "required": false,
            "in": "query",
            "description": "éè¯·äºº",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labels",
            "required": false,
            "in": "query",
            "description": "æ ç­¾",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "å§å",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "description": "ææºå·",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registerRegion",
            "required": false,
            "in": "query",
            "description": "æ³¨åå°åºï¼å­å°åºç¼å·",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roles",
            "required": false,
            "in": "query",
            "description": "è§è²",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "ç¶æ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "ç±»å, ç»å½ç«¯",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "required": false,
            "in": "query",
            "description": "ç¨æ·å",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "description": "åé¡µå¤§å°",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "description": "åé¡µåç§»",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A paged array of user aggregate results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAggregateResult"
                  }
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAggregateResult"
                  }
                }
              }
            }
          }
        },
        "summary": "Aggregate user",
        "tags": [
          "user"
        ]
      }
    },
    "/industries": {
      "get": {
        "operationId": "listIndustries",
        "parameters": [
          {
            "name": "depth",
            "required": false,
            "in": "query",
            "description": "è¿åçå±æ°\né»è®¤è¿åææå±çº§",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of region.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Industry"
                  }
                }
              }
            }
          }
        },
        "summary": "List Industries",
        "tags": [
          "industry"
        ]
      }
    },
    "/regions": {
      "get": {
        "operationId": "listRegions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A paged array of region.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Region"
                  }
                }
              }
            }
          }
        },
        "summary": "List Regions",
        "tags": [
          "region"
        ]
      }
    },
    "/roles": {
      "post": {
        "operationId": "createRole",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The role has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Create role",
        "tags": [
          "role"
        ]
      },
      "get": {
        "operationId": "listRoles",
        "parameters": [
          {
            "name": "_sort",
            "required": false,
            "in": "query",
            "description": "æåºåæ°",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "-createdAt",
                "updatedAt",
                "-updatedAt"
              ]
            }
          },
          {
            "name": "name_like",
            "required": false,
            "in": "query",
            "description": "åç§° æ¨¡ç³æ¥è¯¢",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "åç§°",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": false,
            "in": "query",
            "description": "role key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "description": "åé¡µå¤§å°",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "description": "åé¡µåç§»",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "List roles",
        "tags": [
          "role"
        ]
      }
    },
    "/roles/{roleIdOrKey}": {
      "get": {
        "operationId": "getRole",
        "parameters": [
          {
            "name": "roleIdOrKey",
            "required": true,
            "in": "path",
            "description": "Role id or key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The role with expected id or key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Find role by id or key",
        "tags": [
          "role"
        ]
      }
    },
    "/roles/{roleId}": {
      "patch": {
        "operationId": "updateRole",
        "parameters": [
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The role updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Update role",
        "tags": [
          "role"
        ]
      },
      "delete": {
        "operationId": "deleteRole",
        "parameters": [
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Delete role",
        "tags": [
          "role"
        ]
      }
    }
  },
  "info": {
    "title": "Auth API Server",
    "description": "Auth API for auth service",
    "version": "2.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    },
    "schemas": {
      "HealthCheckResult": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "AppResult": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "description": "å¯ä»¥æ¯ username/phone/Email"
          },
          "password": {
            "type": "string",
            "description": "å¯ç "
          }
        },
        "required": [
          "login",
          "password"
        ]
      },
      "SessionWithToken": {
        "type": "object",
        "properties": {
          "expireAt": {
            "format": "date-time",
            "type": "string",
            "description": "ä¼è¯è¿ææ¶é´"
          },
          "key": {
            "type": "string",
            "description": "session key\nå¯ä»¥ä½ä¸º refresh token"
          },
          "subject": {
            "type": "string",
            "description": "ç¨æ·æç¬¬ä¸æ¹ç¨æ· id"
          },
          "source": {
            "type": "string",
            "description": "å¦ææ¥èªç¬¬ä¸æ¹ï¼åä¼å ä¸ source"
          },
          "permissions": {
            "description": "è§è²ä¹å¤çæé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roles": {
            "description": "è§è²",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "description": "ç¨æ·æå±çç»",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ns": {
            "type": "string",
            "description": "user ns"
          },
          "type": {
            "type": "string",
            "description": "ç¨æ·ç±»å"
          },
          "oneTimeUse": {
            "type": "boolean",
            "description": "ä¸æ¬¡æ§çï¼ç¦æ­¢è½®æ¢"
          },
          "id": {
            "type": "string",
            "description": "Entity id"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity created at when"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity updated at when"
          },
          "createdBy": {
            "type": "string",
            "description": "Entity created by who"
          },
          "updatedBy": {
            "type": "string",
            "description": "Entity updated by who"
          },
          "token": {
            "type": "string",
            "description": "token"
          },
          "tokenExpireAt": {
            "format": "date-time",
            "type": "string",
            "description": "token è¿ææ¶é´"
          }
        },
        "required": [
          "expireAt",
          "key",
          "subject",
          "id",
          "token",
          "tokenExpireAt"
        ]
      },
      "Authorizer": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "url"
          }
        },
        "required": [
          "url"
        ]
      },
      "GithubDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "redirectUri": {
            "type": "string"
          },
          "repositoryId": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ]
      },
      "OAuthDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "grantType": {
            "type": "string"
          },
          "redirectUri": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "code"
        ]
      },
      "LoginByEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "é®ç®±"
          },
          "key": {
            "type": "string",
            "description": "éªè¯ç  key"
          },
          "code": {
            "type": "string",
            "description": "éªè¯ç  code"
          }
        },
        "required": [
          "email",
          "key",
          "code"
        ]
      },
      "LoginByPhoneDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "ææºå·"
          },
          "key": {
            "type": "string",
            "description": "éªè¯ç  key"
          },
          "code": {
            "type": "string",
            "description": "éªè¯ç  code"
          }
        },
        "required": [
          "phone",
          "key",
          "code"
        ]
      },
      "LogoutDto": {
        "type": "object",
        "properties": {
          "sid": {
            "type": "string",
            "description": "session id"
          }
        },
        "required": [
          "sid"
        ]
      },
      "RegisterDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "ç¨æ·å"
          },
          "password": {
            "type": "string",
            "description": "å¯ç "
          },
          "ns": {
            "type": "string",
            "description": "å½åç©ºé´"
          },
          "inviter": {
            "type": "string",
            "description": "éè¯·äºº"
          },
          "labels": {
            "description": "æ ç­¾",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "registerIp": {
            "type": "string",
            "description": "æ³¨å IP"
          },
          "registerRegion": {
            "type": "string",
            "description": "æ³¨åå°åºï¼å­å°åºç¼å·"
          },
          "type": {
            "type": "string",
            "description": "ç±»å, ç»å½ç«¯"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "å¯ç ",
            "writeOnly": true
          },
          "hasPassword": {
            "type": "boolean",
            "description": "æ¯å¦æå¯ç ",
            "readOnly": true
          },
          "avatar": {
            "type": "string",
            "description": "å¤´å"
          },
          "birthday": {
            "format": "date-time",
            "type": "string",
            "description": "çæ¥"
          },
          "data": {
            "type": "string",
            "description": "é¢å¤æ°æ®"
          },
          "email": {
            "type": "string",
            "description": "é®ç®±"
          },
          "name": {
            "type": "string",
            "description": "å§å"
          },
          "identity": {
            "type": "string"
          },
          "identityVerifiedAt": {
            "format": "date-time",
            "type": "string",
            "description": "å®åè®¤è¯æ¶é´"
          },
          "identityVerified": {
            "type": "boolean",
            "description": "å®åè®¤è¯æ¯å¦éè¿"
          },
          "intro": {
            "type": "string",
            "description": "ç®ä»"
          },
          "inviter": {
            "type": "string",
            "description": "éè¯·äºº"
          },
          "labels": {
            "description": "æ ç­¾",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "language": {
            "type": "string",
            "description": "ä½¿ç¨è¯­è¨"
          },
          "lastLoginIp": {
            "type": "string",
            "description": "æåç»å½ IP"
          },
          "lastSeenAt": {
            "format": "date-time",
            "type": "string",
            "description": "æåæ´»è·æ¶é´"
          },
          "level": {
            "type": "number",
            "description": "ç­çº§"
          },
          "nickname": {
            "type": "string",
            "description": "æµç§°"
          },
          "ns": {
            "type": "string",
            "description": "æå±å½åç©ºé´"
          },
          "phone": {
            "type": "string",
            "description": "ææºå·"
          },
          "registerIp": {
            "type": "string",
            "description": "æ³¨å IP"
          },
          "registerRegion": {
            "type": "string",
            "description": "æ³¨åå°åºï¼å­å°åºç¼å·"
          },
          "roles": {
            "description": "è§è²",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "username": {
            "type": "string",
            "description": "ç¨æ·å"
          },
          "employeeId": {
            "type": "string",
            "description": "åå·¥ç¼å·"
          },
          "permissions": {
            "description": "æé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "description": "å¢é",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lastLoginAt": {
            "format": "date-time",
            "type": "string",
            "description": "æåç»å½æ¶é´"
          },
          "active": {
            "type": "boolean",
            "description": "æ¯å¦å¯ç¨"
          },
          "status": {
            "type": "string",
            "description": "ç¶æ"
          },
          "expireAt": {
            "format": "date-time",
            "type": "string",
            "description": "è¿ææ¶é´"
          },
          "type": {
            "type": "string",
            "description": "ç±»å, ç»å½ç«¯"
          },
          "id": {
            "type": "string",
            "description": "Entity id"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity created at when"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity updated at when"
          },
          "createdBy": {
            "type": "string",
            "description": "Entity created by who"
          },
          "updatedBy": {
            "type": "string",
            "description": "Entity updated by who"
          }
        },
        "required": [
          "labels",
          "roles",
          "permissions",
          "groups",
          "id"
        ]
      },
      "RegisterbyPhoneDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "ææºå·"
          },
          "key": {
            "type": "string",
            "description": "éªè¯ç  key"
          },
          "code": {
            "type": "string",
            "description": "éªè¯ç  code"
          },
          "ns": {
            "type": "string",
            "description": "å½åç©ºé´"
          },
          "inviter": {
            "type": "string",
            "description": "éè¯·äºº"
          },
          "labels": {
            "description": "æ ç­¾",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "registerIp": {
            "type": "string",
            "description": "æ³¨å IP"
          },
          "registerRegion": {
            "type": "string",
            "description": "æ³¨åå°åºï¼å­å°åºç¼å·"
          },
          "type": {
            "type": "string",
            "description": "ç±»å, ç»å½ç«¯"
          }
        },
        "required": [
          "phone",
          "key",
          "code"
        ]
      },
      "RegisterByEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "é®ç®±"
          },
          "key": {
            "type": "string",
            "description": "éªè¯ç  key"
          },
          "code": {
            "type": "string",
            "description": "éªè¯ç  code"
          },
          "ns": {
            "type": "string",
            "description": "å½åç©ºé´"
          },
          "inviter": {
            "type": "string",
            "description": "éè¯·äºº"
          },
          "labels": {
            "description": "æ ç­¾",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "registerIp": {
            "type": "string",
            "description": "æ³¨å IP"
          },
          "registerRegion": {
            "type": "string",
            "description": "æ³¨åå°åºï¼å­å°åºç¼å·"
          },
          "type": {
            "type": "string",
            "description": "ç±»å, ç»å½ç«¯"
          }
        },
        "required": [
          "email",
          "key",
          "code"
        ]
      },
      "SignTokenDto": {
        "type": "object",
        "properties": {
          "expiresIn": {
            "type": "string",
            "description": "short time span string\n\nrefs: https://github.com/vercel/ms\n\neg: \"2 days\", \"10h\", \"7d\", \"120s\", \"2.5 hrs\", \"2h\", \"1m\", \"5s\", \"1y\", \"100\", \"1y1m1d\"\n\nm => minute\nh => hour\nd => day\nw => week\nM => month\ny => year\ns => second\nms => millisecond\næ åä½ => millisecond"
          },
          "uid": {
            "type": "string",
            "description": "ç¨æ· id"
          },
          "permissions": {
            "description": "åéæé",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "expiresIn",
          "uid"
        ]
      },
      "Token": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "token"
          },
          "tokenExpireAt": {
            "format": "date-time",
            "type": "string",
            "description": "token è¿ææ¶é´"
          }
        },
        "required": [
          "token",
          "tokenExpireAt"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "refresh token ä¹å°±æ¯ session key"
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "ResetPasswordByPhoneDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "ææºå·"
          },
          "key": {
            "type": "string",
            "description": "éªè¯ç  key"
          },
          "code": {
            "type": "string",
            "description": "éªè¯ç  code"
          },
          "password": {
            "type": "string",
            "description": "å¯ç "
          }
        },
        "required": [
          "phone",
          "key",
          "code",
          "password"
        ]
      },
      "ResetPasswordByEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "ææºå·"
          },
          "key": {
            "type": "string",
            "description": "éªè¯ç  key"
          },
          "code": {
            "type": "string",
            "description": "éªè¯ç  code"
          },
          "password": {
            "type": "string",
            "description": "å¯ç "
          }
        },
        "required": [
          "email",
          "key",
          "code",
          "password"
        ]
      },
      "CreateCaptchaDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "éªè¯ç "
          },
          "expireAt": {
            "format": "date-time",
            "type": "string",
            "description": "è¿ææ¶é´"
          },
          "key": {
            "type": "string",
            "description": "key"
          }
        },
        "required": [
          "key"
        ]
      },
      "Captcha": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "éªè¯ç "
          },
          "expireAt": {
            "format": "date-time",
            "type": "string",
            "description": "è¿ææ¶é´"
          },
          "key": {
            "type": "string",
            "description": "key"
          },
          "id": {
            "type": "string",
            "description": "Entity id"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity created at when"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity updated at when"
          },
          "createdBy": {
            "type": "string",
            "description": "Entity created by who"
          },
          "updatedBy": {
            "type": "string",
            "description": "Entity updated by who"
          }
        },
        "required": [
          "code",
          "expireAt",
          "key",
          "id"
        ]
      },
      "UpdateCaptchaDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "éªè¯ç "
          },
          "expireAt": {
            "format": "date-time",
            "type": "string",
            "description": "è¿ææ¶é´"
          },
          "key": {
            "type": "string",
            "description": "key"
          }
        }
      },
      "VerifyCaptchaDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "éªè¯ç "
          },
          "key": {
            "type": "string",
            "description": "éªè¯ç  key"
          }
        },
        "required": [
          "code",
          "key"
        ]
      },
      "VerifyCaptchaResultDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "æ¯å¦éªè¯æå"
          }
        },
        "required": [
          "success"
        ]
      },
      "SendEmailDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "from",
          "to",
          "subject",
          "content"
        ]
      },
      "EmailStatus": {
        "type": "string",
        "enum": [
          "pending",
          "sent"
        ],
        "description": "åéç¶æ"
      },
      "CreateEmailRecordDto": {
        "type": "object",
        "properties": {
          "status": {
            "description": "åéç¶æ",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailStatus"
              }
            ]
          },
          "from": {
            "type": "string",
            "description": "åä»¶è"
          },
          "to": {
            "type": "string",
            "description": "æ¶ä»¶è"
          },
          "subject": {
            "type": "string",
            "description": "ä¸»é¢"
          },
          "content": {
            "type": "string",
            "description": "åå®¹"
          },
          "sentAt": {
            "format": "date-time",
            "type": "string",
            "description": "åéæ¶é´"
          }
        },
        "required": [
          "status",
          "from",
          "to",
          "subject",
          "content"
        ]
      },
      "EmailRecord": {
        "type": "object",
        "properties": {
          "status": {
            "description": "åéç¶æ",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailStatus"
              }
            ]
          },
          "from": {
            "type": "string",
            "description": "åä»¶è"
          },
          "to": {
            "type": "string",
            "description": "æ¶ä»¶è"
          },
          "subject": {
            "type": "string",
            "description": "ä¸»é¢"
          },
          "content": {
            "type": "string",
            "description": "åå®¹"
          },
          "sentAt": {
            "format": "date-time",
            "type": "string",
            "description": "åéæ¶é´"
          },
          "id": {
            "type": "string",
            "description": "Entity id"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity created at when"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity updated at when"
          },
          "createdBy": {
            "type": "string",
            "description": "Entity created by who"
          },
          "updatedBy": {
            "type": "string",
            "description": "Entity updated by who"
          }
        },
        "required": [
          "status",
          "from",
          "to",
          "subject",
          "content",
          "id"
        ]
      },
      "UpdateEmailRecordDto": {
        "type": "object",
        "properties": {
          "status": {
            "description": "åéç¶æ",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailStatus"
              }
            ]
          },
          "from": {
            "type": "string",
            "description": "åä»¶è"
          },
          "to": {
            "type": "string",
            "description": "æ¶ä»¶è"
          },
          "subject": {
            "type": "string",
            "description": "ä¸»é¢"
          },
          "content": {
            "type": "string",
            "description": "åå®¹"
          },
          "sentAt": {
            "format": "date-time",
            "type": "string",
            "description": "åéæ¶é´"
          }
        }
      },
      "CreateGroupDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "é¢å¤æ°æ®"
          },
          "name": {
            "type": "string",
            "description": "åç§°"
          },
          "permissions": {
            "description": "æé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "active": {
            "type": "boolean",
            "description": "æ¯å¦å¯ç¨"
          }
        },
        "required": [
          "name"
        ]
      },
      "Group": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "é¢å¤æ°æ®"
          },
          "name": {
            "type": "string",
            "description": "åç§°"
          },
          "permissions": {
            "description": "æé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "active": {
            "type": "boolean",
            "description": "æ¯å¦å¯ç¨"
          },
          "id": {
            "type": "string",
            "description": "Entity id"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity created at when"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity updated at when"
          },
          "createdBy": {
            "type": "string",
            "description": "Entity created by who"
          },
          "updatedBy": {
            "type": "string",
            "description": "Entity updated by who"
          }
        },
        "required": [
          "name",
          "id"
        ]
      },
      "UpdateGroupDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "é¢å¤æ°æ®"
          },
          "name": {
            "type": "string",
            "description": "åç§°"
          },
          "permissions": {
            "description": "æé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "active": {
            "type": "boolean",
            "description": "æ¯å¦å¯ç¨"
          }
        }
      },
      "CreateNamespaceDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "é¢å¤æ°æ®"
          },
          "desc": {
            "type": "string",
            "description": "æè¿°"
          },
          "labels": {
            "description": "æ ç­¾",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "description": "åç§°"
          },
          "key": {
            "type": "string",
            "description": "å½åç©ºé´ç key\n\nåè®¸çå­ç¬¦ ^[a-zA-Z][a-zA-Z0-9._/-]{0,200}$"
          },
          "ns": {
            "type": "string",
            "description": "æå±ç namespace key"
          },
          "permissions": {
            "description": "æé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "active": {
            "type": "boolean",
            "description": "æ¯å¦å¯ç¨"
          },
          "defaultPassword": {
            "type": "string",
            "description": "é»è®¤å¯ç "
          },
          "exportable": {
            "type": "boolean",
            "description": "æ¯å¦å¯å¯¼åº"
          }
        },
        "required": [
          "name",
          "key"
        ]
      },
      "Namespace": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "é¢å¤æ°æ®"
          },
          "desc": {
            "type": "string",
            "description": "æè¿°"
          },
          "labels": {
            "description": "æ ç­¾",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "description": "åç§°"
          },
          "key": {
            "type": "string",
            "description": "å½åç©ºé´ç key\n\nåè®¸çå­ç¬¦ ^[a-zA-Z][a-zA-Z0-9._/-]{0,200}$"
          },
          "ns": {
            "type": "string",
            "description": "æå±ç namespace key"
          },
          "permissions": {
            "description": "æé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "active": {
            "type": "boolean",
            "description": "æ¯å¦å¯ç¨"
          },
          "defaultPassword": {
            "type": "string",
            "description": "é»è®¤å¯ç "
          },
          "exportable": {
            "type": "boolean",
            "description": "æ¯å¦å¯å¯¼åº"
          },
          "id": {
            "type": "string",
            "description": "Entity id"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity created at when"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity updated at when"
          },
          "createdBy": {
            "type": "string",
            "description": "Entity created by who"
          },
          "updatedBy": {
            "type": "string",
            "description": "Entity updated by who"
          }
        },
        "required": [
          "name",
          "key",
          "id"
        ]
      },
      "UpdateNamespaceDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "é¢å¤æ°æ®"
          },
          "desc": {
            "type": "string",
            "description": "æè¿°"
          },
          "labels": {
            "description": "æ ç­¾",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "description": "åç§°"
          },
          "permissions": {
            "description": "æé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "active": {
            "type": "boolean",
            "description": "æ¯å¦å¯ç¨"
          },
          "defaultPassword": {
            "type": "string",
            "description": "é»è®¤å¯ç "
          },
          "exportable": {
            "type": "boolean",
            "description": "æ¯å¦å¯å¯¼åº"
          }
        }
      },
      "CreateSessionDto": {
        "type": "object",
        "properties": {
          "expireAt": {
            "format": "date-time",
            "type": "string",
            "description": "ä¼è¯è¿ææ¶é´"
          },
          "subject": {
            "type": "string",
            "description": "ç¨æ·æç¬¬ä¸æ¹ç¨æ· id"
          },
          "source": {
            "type": "string",
            "description": "å¦ææ¥èªç¬¬ä¸æ¹ï¼åä¼å ä¸ source"
          },
          "permissions": {
            "description": "è§è²ä¹å¤çæé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roles": {
            "description": "è§è²",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "description": "ç¨æ·æå±çç»",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ns": {
            "type": "string",
            "description": "user ns"
          },
          "type": {
            "type": "string",
            "description": "ç¨æ·ç±»å"
          },
          "oneTimeUse": {
            "type": "boolean",
            "description": "ä¸æ¬¡æ§çï¼ç¦æ­¢è½®æ¢"
          }
        },
        "required": [
          "expireAt",
          "subject"
        ]
      },
      "Session": {
        "type": "object",
        "properties": {
          "expireAt": {
            "format": "date-time",
            "type": "string",
            "description": "ä¼è¯è¿ææ¶é´"
          },
          "key": {
            "type": "string",
            "description": "session key\nå¯ä»¥ä½ä¸º refresh token"
          },
          "subject": {
            "type": "string",
            "description": "ç¨æ·æç¬¬ä¸æ¹ç¨æ· id"
          },
          "source": {
            "type": "string",
            "description": "å¦ææ¥èªç¬¬ä¸æ¹ï¼åä¼å ä¸ source"
          },
          "permissions": {
            "description": "è§è²ä¹å¤çæé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roles": {
            "description": "è§è²",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "description": "ç¨æ·æå±çç»",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ns": {
            "type": "string",
            "description": "user ns"
          },
          "type": {
            "type": "string",
            "description": "ç¨æ·ç±»å"
          },
          "oneTimeUse": {
            "type": "boolean",
            "description": "ä¸æ¬¡æ§çï¼ç¦æ­¢è½®æ¢"
          },
          "id": {
            "type": "string",
            "description": "Entity id"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity created at when"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity updated at when"
          },
          "createdBy": {
            "type": "string",
            "description": "Entity created by who"
          },
          "updatedBy": {
            "type": "string",
            "description": "Entity updated by who"
          }
        },
        "required": [
          "expireAt",
          "key",
          "subject",
          "id"
        ]
      },
      "UpdateSessionDto": {
        "type": "object",
        "properties": {
          "expireAt": {
            "format": "date-time",
            "type": "string",
            "description": "ä¼è¯è¿ææ¶é´"
          },
          "subject": {
            "type": "string",
            "description": "ç¨æ·æç¬¬ä¸æ¹ç¨æ· id"
          },
          "source": {
            "type": "string",
            "description": "å¦ææ¥èªç¬¬ä¸æ¹ï¼åä¼å ä¸ source"
          },
          "permissions": {
            "description": "è§è²ä¹å¤çæé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roles": {
            "description": "è§è²",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "description": "ç¨æ·æå±çç»",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ns": {
            "type": "string",
            "description": "user ns"
          },
          "type": {
            "type": "string",
            "description": "ç¨æ·ç±»å"
          },
          "oneTimeUse": {
            "type": "boolean",
            "description": "ä¸æ¬¡æ§çï¼ç¦æ­¢è½®æ¢"
          }
        }
      },
      "SendSmsDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string"
          },
          "sign": {
            "type": "string"
          },
          "template": {
            "type": "string"
          },
          "params": {
            "type": "object"
          }
        },
        "required": [
          "phone",
          "sign",
          "template"
        ]
      },
      "SmsStatus": {
        "type": "string",
        "enum": [
          "pending",
          "sent"
        ],
        "description": "åéç¶æ"
      },
      "CreateSmsRecordDto": {
        "type": "object",
        "properties": {
          "status": {
            "description": "åéç¶æ",
            "allOf": [
              {
                "$ref": "#/components/schemas/SmsStatus"
              }
            ]
          },
          "phone": {
            "type": "string",
            "description": "ææºå·"
          },
          "sign": {
            "type": "string",
            "description": "ç­¾å"
          },
          "template": {
            "type": "string",
            "description": "æ¨¡æ¿"
          },
          "params": {
            "type": "string",
            "description": "åæ°"
          },
          "sentAt": {
            "format": "date-time",
            "type": "string",
            "description": "åéæ¶é´"
          }
        },
        "required": [
          "status",
          "phone",
          "sign",
          "template"
        ]
      },
      "SmsRecord": {
        "type": "object",
        "properties": {
          "status": {
            "description": "åéç¶æ",
            "allOf": [
              {
                "$ref": "#/components/schemas/SmsStatus"
              }
            ]
          },
          "phone": {
            "type": "string",
            "description": "ææºå·"
          },
          "sign": {
            "type": "string",
            "description": "ç­¾å"
          },
          "template": {
            "type": "string",
            "description": "æ¨¡æ¿"
          },
          "params": {
            "type": "string",
            "description": "åæ°"
          },
          "sentAt": {
            "format": "date-time",
            "type": "string",
            "description": "åéæ¶é´"
          },
          "id": {
            "type": "string",
            "description": "Entity id"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity created at when"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity updated at when"
          },
          "createdBy": {
            "type": "string",
            "description": "Entity created by who"
          },
          "updatedBy": {
            "type": "string",
            "description": "Entity updated by who"
          }
        },
        "required": [
          "status",
          "phone",
          "sign",
          "template",
          "id"
        ]
      },
      "UpdateSmsRecordDto": {
        "type": "object",
        "properties": {
          "status": {
            "description": "åéç¶æ",
            "allOf": [
              {
                "$ref": "#/components/schemas/SmsStatus"
              }
            ]
          },
          "phone": {
            "type": "string",
            "description": "ææºå·"
          },
          "sign": {
            "type": "string",
            "description": "ç­¾å"
          },
          "template": {
            "type": "string",
            "description": "æ¨¡æ¿"
          },
          "params": {
            "type": "string",
            "description": "åæ°"
          },
          "sentAt": {
            "format": "date-time",
            "type": "string",
            "description": "åéæ¶é´"
          }
        }
      },
      "createThirdPartyDto": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½æ¥æº"
          },
          "tid": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½çç¨æ·å¯ä¸æ è¯"
          },
          "accessToken": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½ accessToken"
          },
          "expireAt": {
            "type": "number",
            "description": "ç¬¬ä¸æ¹ç»å½è¿ææ¶é´"
          },
          "tokenType": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½ token ç±»å"
          },
          "refreshToken": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½ refreshToken"
          },
          "refreshTokenExpireAt": {
            "type": "number",
            "description": "ç¬¬ä¸æ¹ç»å½ refreshToken è¿ææ¶é´"
          },
          "uid": {
            "type": "string",
            "description": "å³èuid"
          },
          "data": {
            "type": "string",
            "description": "ç¨äºå­å¨ç¬¬ä¸æ¹çé¢å¤æ°æ®"
          }
        },
        "required": [
          "source",
          "tid",
          "accessToken",
          "data"
        ]
      },
      "ThirdParty": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½æ¥æº"
          },
          "tid": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½çç¨æ·å¯ä¸æ è¯"
          },
          "accessToken": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½ accessToken"
          },
          "expireAt": {
            "type": "number",
            "description": "ç¬¬ä¸æ¹ç»å½è¿ææ¶é´"
          },
          "tokenType": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½ token ç±»å"
          },
          "refreshToken": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½ refreshToken"
          },
          "refreshTokenExpireAt": {
            "type": "number",
            "description": "ç¬¬ä¸æ¹ç»å½ refreshToken è¿ææ¶é´"
          },
          "uid": {
            "type": "string",
            "description": "å³èuid"
          },
          "data": {
            "type": "string",
            "description": "ç¨äºå­å¨ç¬¬ä¸æ¹çé¢å¤æ°æ®"
          },
          "id": {
            "type": "string",
            "description": "Entity id"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity created at when"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity updated at when"
          },
          "createdBy": {
            "type": "string",
            "description": "Entity created by who"
          },
          "updatedBy": {
            "type": "string",
            "description": "Entity updated by who"
          }
        },
        "required": [
          "source",
          "tid",
          "accessToken",
          "data",
          "id"
        ]
      },
      "UpdateThirdPartyDto": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½æ¥æº"
          },
          "tid": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½çç¨æ·å¯ä¸æ è¯"
          },
          "accessToken": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½ accessToken"
          },
          "expireAt": {
            "type": "number",
            "description": "ç¬¬ä¸æ¹ç»å½è¿ææ¶é´"
          },
          "tokenType": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½ token ç±»å"
          },
          "refreshToken": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½ refreshToken"
          },
          "refreshTokenExpireAt": {
            "type": "number",
            "description": "ç¬¬ä¸æ¹ç»å½ refreshToken è¿ææ¶é´"
          },
          "uid": {
            "type": "string",
            "description": "å³èuid"
          },
          "data": {
            "type": "string",
            "description": "ç¨äºå­å¨ç¬¬ä¸æ¹çé¢å¤æ°æ®"
          }
        }
      },
      "bindThirdPartyDto": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "tid": {
            "type": "string"
          }
        },
        "required": [
          "login",
          "source",
          "tid"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "å¯ç ",
            "writeOnly": true
          },
          "hasPassword": {
            "type": "boolean",
            "description": "æ¯å¦æå¯ç ",
            "readOnly": true
          },
          "groups": {
            "description": "å¢é",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "labels": {
            "description": "æ ç­¾",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "permissions": {
            "description": "æé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roles": {
            "description": "è§è²",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "avatar": {
            "type": "string",
            "description": "å¤´å"
          },
          "birthday": {
            "format": "date-time",
            "type": "string",
            "description": "çæ¥"
          },
          "data": {
            "type": "string",
            "description": "é¢å¤æ°æ®"
          },
          "email": {
            "type": "string",
            "description": "é®ç®±"
          },
          "name": {
            "type": "string",
            "description": "å§å"
          },
          "identity": {
            "type": "string"
          },
          "identityVerifiedAt": {
            "format": "date-time",
            "type": "string",
            "description": "å®åè®¤è¯æ¶é´"
          },
          "identityVerified": {
            "type": "boolean",
            "description": "å®åè®¤è¯æ¯å¦éè¿"
          },
          "intro": {
            "type": "string",
            "description": "ç®ä»"
          },
          "inviter": {
            "type": "string",
            "description": "éè¯·äºº"
          },
          "language": {
            "type": "string",
            "description": "ä½¿ç¨è¯­è¨"
          },
          "level": {
            "type": "number",
            "description": "ç­çº§"
          },
          "nickname": {
            "type": "string",
            "description": "æµç§°"
          },
          "ns": {
            "type": "string",
            "description": "æå±å½åç©ºé´"
          },
          "phone": {
            "type": "string",
            "description": "ææºå·"
          },
          "registerIp": {
            "type": "string",
            "description": "æ³¨å IP"
          },
          "registerRegion": {
            "type": "string",
            "description": "æ³¨åå°åºï¼å­å°åºç¼å·"
          },
          "username": {
            "type": "string",
            "description": "ç¨æ·å"
          },
          "employeeId": {
            "type": "string",
            "description": "åå·¥ç¼å·"
          },
          "active": {
            "type": "boolean",
            "description": "æ¯å¦å¯ç¨"
          },
          "status": {
            "type": "string",
            "description": "ç¶æ"
          },
          "expireAt": {
            "format": "date-time",
            "type": "string",
            "description": "è¿ææ¶é´"
          },
          "type": {
            "type": "string",
            "description": "ç±»å, ç»å½ç«¯"
          }
        }
      },
      "CountResult": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          }
        },
        "required": [
          "count"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "hasPassword": {
            "type": "boolean",
            "description": "æ¯å¦æå¯ç ",
            "readOnly": true
          },
          "avatar": {
            "type": "string",
            "description": "å¤´å"
          },
          "birthday": {
            "format": "date-time",
            "type": "string",
            "description": "çæ¥"
          },
          "data": {
            "type": "string",
            "description": "é¢å¤æ°æ®"
          },
          "email": {
            "type": "string",
            "description": "é®ç®±"
          },
          "name": {
            "type": "string",
            "description": "å§å"
          },
          "identity": {
            "type": "string"
          },
          "identityVerifiedAt": {
            "format": "date-time",
            "type": "string",
            "description": "å®åè®¤è¯æ¶é´"
          },
          "identityVerified": {
            "type": "boolean",
            "description": "å®åè®¤è¯æ¯å¦éè¿"
          },
          "intro": {
            "type": "string",
            "description": "ç®ä»"
          },
          "inviter": {
            "type": "string",
            "description": "éè¯·äºº"
          },
          "labels": {
            "description": "æ ç­¾",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "language": {
            "type": "string",
            "description": "ä½¿ç¨è¯­è¨"
          },
          "lastLoginIp": {
            "type": "string",
            "description": "æåç»å½ IP"
          },
          "lastSeenAt": {
            "format": "date-time",
            "type": "string",
            "description": "æåæ´»è·æ¶é´"
          },
          "level": {
            "type": "number",
            "description": "ç­çº§"
          },
          "nickname": {
            "type": "string",
            "description": "æµç§°"
          },
          "ns": {
            "type": "string",
            "description": "æå±å½åç©ºé´"
          },
          "phone": {
            "type": "string",
            "description": "ææºå·"
          },
          "registerIp": {
            "type": "string",
            "description": "æ³¨å IP"
          },
          "registerRegion": {
            "type": "string",
            "description": "æ³¨åå°åºï¼å­å°åºç¼å·"
          },
          "roles": {
            "description": "è§è²",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "username": {
            "type": "string",
            "description": "ç¨æ·å"
          },
          "employeeId": {
            "type": "string",
            "description": "åå·¥ç¼å·"
          },
          "permissions": {
            "description": "æé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "description": "å¢é",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lastLoginAt": {
            "format": "date-time",
            "type": "string",
            "description": "æåç»å½æ¶é´"
          },
          "active": {
            "type": "boolean",
            "description": "æ¯å¦å¯ç¨"
          },
          "status": {
            "type": "string",
            "description": "ç¶æ"
          },
          "expireAt": {
            "format": "date-time",
            "type": "string",
            "description": "è¿ææ¶é´"
          },
          "type": {
            "type": "string",
            "description": "ç±»å, ç»å½ç«¯"
          }
        }
      },
      "UpdatePasswordDto": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "description": "æ§å¯ç "
          },
          "newPassword": {
            "type": "string",
            "description": "æ°å¯ç "
          }
        },
        "required": [
          "newPassword"
        ]
      },
      "AggregateUserDto": {
        "type": "object",
        "properties": {
          "group": {
            "type": "array",
            "description": "The group by clause",
            "items": {
              "type": "string",
              "enum": [
                "level",
                "labels",
                "language",
                "ns",
                "registerRegion",
                "roles",
                "groups",
                "active",
                "status",
                "createdAt"
              ]
            }
          },
          "dateUnit": {
            "type": "string",
            "description": "Date unit for time-based grouping when createdAt is in group",
            "enum": [
              "hour",
              "day",
              "week",
              "month",
              "year"
            ]
          }
        }
      },
      "DateGroup": {
        "type": "object",
        "properties": {
          "year": {
            "type": "number"
          },
          "month": {
            "type": "number"
          },
          "week": {
            "type": "number"
          },
          "day": {
            "type": "number"
          },
          "hour": {
            "type": "number"
          }
        }
      },
      "UserAggregateResult": {
        "type": "object",
        "properties": {
          "level": {
            "type": "number"
          },
          "label": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "ns": {
            "type": "string"
          },
          "registerRegion": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "status": {
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/DateGroup"
          },
          "count": {
            "type": "number",
            "description": "ç»è®¡æ°é"
          }
        },
        "required": [
          "count"
        ]
      },
      "Industry": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "ç¼ç "
          },
          "name": {
            "type": "string",
            "description": "åç§°"
          },
          "children": {
            "description": "å­é",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Industry"
            }
          }
        },
        "required": [
          "code",
          "name",
          "children"
        ]
      },
      "Region": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "ç¼©å"
          },
          "nameZh": {
            "type": "string",
            "description": "ä¸­æåç§°"
          },
          "namePinyin": {
            "type": "string",
            "description": "ä¸­ææ¼é³"
          },
          "nameEn": {
            "type": "string",
            "description": "è±æåç§°"
          },
          "dialingPrefix": {
            "type": "string",
            "description": "çµè¯åç¼"
          }
        },
        "required": [
          "code",
          "nameZh",
          "namePinyin",
          "nameEn",
          "dialingPrefix"
        ]
      },
      "CreateRoleDto": {
        "type": "object",
        "properties": {
          "permissions": {
            "description": "æé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "key": {
            "type": "string",
            "description": "role key"
          },
          "name": {
            "type": "string",
            "description": "åç§°"
          }
        },
        "required": [
          "key",
          "name"
        ]
      },
      "Role": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "role key"
          },
          "name": {
            "type": "string",
            "description": "åç§°"
          },
          "permissions": {
            "description": "æé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "Entity id"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity created at when"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Entity updated at when"
          },
          "createdBy": {
            "type": "string",
            "description": "Entity created by who"
          },
          "updatedBy": {
            "type": "string",
            "description": "Entity updated by who"
          }
        },
        "required": [
          "key",
          "name",
          "permissions",
          "id"
        ]
      },
      "UpdateRoleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "åç§°"
          },
          "permissions": {
            "description": "æé",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ListUsersQuery": {
        "type": "object",
        "properties": {
          "id": {
            "description": "æ id ç­é",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ns": {
            "description": "æå±å½åç©ºé´",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "ns_start": {
            "description": "æå±å½åç©ºé´ start æ¥è¯¢",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "_sort": {
            "type": "string",
            "description": "æåºåæ°",
            "enum": [
              "createdAt",
              "-createdAt",
              "updatedAt",
              "-updatedAt",
              "lastLoginAt",
              "-lastLoginAt",
              "expireAt",
              "-expireAt"
            ]
          },
          "name_like": {
            "type": "string",
            "description": "åç§° æ¨¡ç³æ¥è¯¢"
          },
          "username_like": {
            "type": "string",
            "description": "ç¨æ·å æ¨¡ç³æ¥è¯¢"
          },
          "nickname_like": {
            "type": "string",
            "description": "æµç§° æ¨¡ç³æ¥è¯¢"
          },
          "ns_tree": {
            "type": "string",
            "description": "æå±å½åç©ºé´ç tree æ¥è¯¢"
          },
          "expireAt_gte": {
            "format": "date-time",
            "type": "string",
            "description": "è¿ææ¶é´å¤§äºè¯¥æ¶é´"
          },
          "expireAt_lte": {
            "format": "date-time",
            "type": "string",
            "description": "è¿ææ¶é´å°äºè¯¥æ¶é´"
          },
          "active": {
            "type": "boolean",
            "description": "æ¯å¦å¯ç¨"
          },
          "email": {
            "type": "string",
            "description": "é®ç®±"
          },
          "groups": {
            "description": "å¢é",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inviter": {
            "type": "string",
            "description": "éè¯·äºº"
          },
          "labels": {
            "description": "æ ç­¾",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "description": "å§å"
          },
          "phone": {
            "type": "string",
            "description": "ææºå·"
          },
          "registerRegion": {
            "type": "string",
            "description": "æ³¨åå°åºï¼å­å°åºç¼å·"
          },
          "roles": {
            "description": "è§è²",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "ç¶æ"
          },
          "type": {
            "type": "string",
            "description": "ç±»å, ç»å½ç«¯"
          },
          "username": {
            "type": "string",
            "description": "ç¨æ·å"
          },
          "_limit": {
            "type": "number",
            "description": "åé¡µå¤§å°"
          },
          "_offset": {
            "type": "number",
            "description": "åé¡µåç§»"
          }
        }
      },
      "ListNamespacesQuery": {
        "type": "object",
        "properties": {
          "key": {
            "description": "æ key æ¥è¯¢",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "key_start": {
            "description": "key start æ¥è¯¢",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "key_tree": {
            "type": "string",
            "description": "key tree æ¥è¯¢"
          },
          "ns": {
            "description": "æå±å½åç©ºé´",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "ns_start": {
            "description": "æå±å½åç©ºé´ start æ¥è¯¢",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "ns_tree": {
            "type": "string",
            "description": "æå±å½åç©ºé´ tree æ¥è¯¢"
          },
          "_sort": {
            "type": "string",
            "description": "æåºåæ°",
            "enum": [
              "createdAt",
              "-createdAt",
              "updatedAt",
              "-updatedAt",
              "key",
              "-key",
              "name",
              "-name"
            ]
          },
          "name_like": {
            "type": "string",
            "description": "åç§° æ¨¡ç³æ¥è¯¢"
          },
          "labels": {
            "description": "æ ç­¾",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_limit": {
            "type": "number",
            "description": "åé¡µå¤§å°"
          },
          "_offset": {
            "type": "number",
            "description": "åé¡µåç§»"
          }
        }
      },
      "GetAuthorizerQuery": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string"
          },
          "redirectUri": {
            "type": "string"
          },
          "responseType": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "required": [
          "provider"
        ]
      },
      "ListCaptchasQuery": {
        "type": "object",
        "properties": {
          "_sort": {
            "type": "string",
            "description": "æåºåæ°",
            "enum": [
              "createdAt",
              "-createdAt",
              "updatedAt",
              "-updatedAt",
              "expireAt",
              "-expireAt"
            ]
          },
          "code": {
            "type": "string",
            "description": "éªè¯ç "
          },
          "key": {
            "type": "string",
            "description": "key"
          },
          "_limit": {
            "type": "number",
            "description": "åé¡µå¤§å°"
          },
          "_offset": {
            "type": "number",
            "description": "åé¡µåç§»"
          }
        }
      },
      "ListEmailRecordsQuery": {
        "type": "object",
        "properties": {
          "status": {
            "description": "åéç¶æ",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailStatus"
              }
            ]
          },
          "_sort": {
            "type": "string",
            "description": "æåºåæ°",
            "enum": [
              "createdAt",
              "-createdAt",
              "updatedAt",
              "-updatedAt",
              "sentAt",
              "-sentAt"
            ]
          },
          "createdAt_gt": {
            "format": "date-time",
            "type": "string",
            "description": "åå»ºæ¶é´å¤§äºè¯¥æ¶é´"
          },
          "createdAt_lt": {
            "format": "date-time",
            "type": "string",
            "description": "åå»ºæ¶é´å°äºè¯¥æ¶é´"
          },
          "sentAt_gt": {
            "format": "date-time",
            "type": "string",
            "description": "åéæ¶é´å¤§äºè¯¥æ¶é´"
          },
          "sentAt_lt": {
            "format": "date-time",
            "type": "string",
            "description": "åéæ¶é´å°äºè¯¥æ¶é´"
          },
          "from": {
            "type": "string",
            "description": "åä»¶è"
          },
          "to": {
            "type": "string",
            "description": "æ¶ä»¶è"
          },
          "_limit": {
            "type": "number",
            "description": "åé¡µå¤§å°"
          },
          "_offset": {
            "type": "number",
            "description": "åé¡µåç§»"
          }
        }
      },
      "ListGroupsQuery": {
        "type": "object",
        "properties": {
          "_sort": {
            "type": "string",
            "description": "æåºåæ°",
            "enum": [
              "createdAt",
              "-createdAt",
              "updatedAt",
              "-updatedAt"
            ]
          },
          "id": {
            "description": "æ id ç­é",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name_like": {
            "type": "string",
            "description": "åç§° æ¨¡ç³æ¥è¯¢"
          },
          "name": {
            "type": "string",
            "description": "åç§°"
          },
          "active": {
            "type": "boolean",
            "description": "æ¯å¦å¯ç¨"
          },
          "_limit": {
            "type": "number",
            "description": "åé¡µå¤§å°"
          },
          "_offset": {
            "type": "number",
            "description": "åé¡µåç§»"
          }
        }
      },
      "ListIndustriesQuery": {
        "type": "object",
        "properties": {
          "depth": {
            "type": "number",
            "description": "è¿åçå±æ°\né»è®¤è¿åææå±çº§"
          }
        }
      },
      "ListRolesQuery": {
        "type": "object",
        "properties": {
          "_sort": {
            "type": "string",
            "description": "æåºåæ°",
            "enum": [
              "createdAt",
              "-createdAt",
              "updatedAt",
              "-updatedAt"
            ]
          },
          "name_like": {
            "type": "string",
            "description": "åç§° æ¨¡ç³æ¥è¯¢"
          },
          "name": {
            "type": "string",
            "description": "åç§°"
          },
          "key": {
            "type": "string",
            "description": "role key"
          },
          "_limit": {
            "type": "number",
            "description": "åé¡µå¤§å°"
          },
          "_offset": {
            "type": "number",
            "description": "åé¡µåç§»"
          }
        }
      },
      "ListSessionsQuery": {
        "type": "object",
        "properties": {
          "_sort": {
            "type": "string",
            "description": "æåºåæ°",
            "enum": [
              "createdAt",
              "-createdAt",
              "updatedAt",
              "-updatedAt",
              "expireAt",
              "-expireAt"
            ]
          },
          "refreshToken": {
            "type": "string",
            "description": "ç¨ key è¿è¡æ¥è¯¢"
          },
          "subject": {
            "type": "string",
            "description": "ç¨æ·æç¬¬ä¸æ¹ç¨æ· id"
          },
          "source": {
            "type": "string",
            "description": "å¦ææ¥èªç¬¬ä¸æ¹ï¼åä¼å ä¸ source"
          },
          "permissions": {
            "description": "è§è²ä¹å¤çæé",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roles": {
            "description": "è§è²",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "description": "ç¨æ·æå±çç»",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ns": {
            "type": "string",
            "description": "user ns"
          },
          "type": {
            "type": "string",
            "description": "ç¨æ·ç±»å"
          },
          "oneTimeUse": {
            "type": "boolean",
            "description": "ä¸æ¬¡æ§çï¼ç¦æ­¢è½®æ¢"
          },
          "_limit": {
            "type": "number",
            "description": "åé¡µå¤§å°"
          },
          "_offset": {
            "type": "number",
            "description": "åé¡µåç§»"
          }
        }
      },
      "ListSmsRecordsQuery": {
        "type": "object",
        "properties": {
          "status": {
            "description": "åéç¶æ",
            "allOf": [
              {
                "$ref": "#/components/schemas/SmsStatus"
              }
            ]
          },
          "_sort": {
            "type": "string",
            "description": "æåºåæ°",
            "enum": [
              "createdAt",
              "-createdAt",
              "updatedAt",
              "-updatedAt",
              "sentAt",
              "-sentAt"
            ]
          },
          "createdAt_gt": {
            "format": "date-time",
            "type": "string",
            "description": "åå»ºæ¶é´å¤§äºè¯¥æ¶é´"
          },
          "createdAt_lt": {
            "format": "date-time",
            "type": "string",
            "description": "åå»ºæ¶é´å°äºè¯¥æ¶é´"
          },
          "sentAt_gt": {
            "format": "date-time",
            "type": "string",
            "description": "åéæ¶é´å¤§äºè¯¥æ¶é´"
          },
          "sentAt_lt": {
            "format": "date-time",
            "type": "string",
            "description": "åéæ¶é´å°äºè¯¥æ¶é´"
          },
          "phone": {
            "type": "string",
            "description": "ææºå·"
          },
          "sign": {
            "type": "string",
            "description": "ç­¾å"
          },
          "_limit": {
            "type": "number",
            "description": "åé¡µå¤§å°"
          },
          "_offset": {
            "type": "number",
            "description": "åé¡µåç§»"
          }
        }
      },
      "ListThirdPartyQuery": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½æ¥æº"
          },
          "tid": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½çç¨æ·å¯ä¸æ è¯"
          },
          "accessToken": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½ accessToken"
          },
          "expireAt": {
            "type": "number",
            "description": "ç¬¬ä¸æ¹ç»å½è¿ææ¶é´"
          },
          "tokenType": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½ token ç±»å"
          },
          "refreshToken": {
            "type": "string",
            "description": "ç¬¬ä¸æ¹ç»å½ refreshToken"
          },
          "refreshTokenExpireAt": {
            "type": "number",
            "description": "ç¬¬ä¸æ¹ç»å½ refreshToken è¿ææ¶é´"
          },
          "uid": {
            "type": "string",
            "description": "å³èuid"
          },
          "data": {
            "type": "string",
            "description": "ç¨äºå­å¨ç¬¬ä¸æ¹çé¢å¤æ°æ®"
          },
          "_limit": {
            "type": "number",
            "description": "åé¡µå¤§å°"
          },
          "_offset": {
            "type": "number",
            "description": "åé¡µåç§»"
          }
        }
      }
    }
  }
}